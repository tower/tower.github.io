<div class="container-fluid">
  <div class="row-fluid span12">

    <div class="well sidebar-nav-fixed span2">
      <ul class="nav nav-list">
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#guides-module">guides</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#template-module">template</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#template.collection">template.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#template.compile">template.compile</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#template.template">template.template</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#template.compile">template.compile</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#template.appendDirective">template.appendDirective</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#template.createEachFn">template.createEachFn</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#template.createDirectivesFn">template.createDirectivesFn</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#template.priority">template.priority</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#directive-module">directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#directive.collection">directive.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.Directive">directive.Directive</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#directive.exports">directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#directive.directive">directive.directive</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#directive.defined">directive.defined</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.toString">directive.toString</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.clear">directive.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.Directive">directive.Directive</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.exec">directive.exec</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.compile">directive.compile</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.types">directive.types</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive._compileAttr">directive._compileAttr</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.priority">directive.priority</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#directive.toString">directive.toString</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#directive.directives">directive.directives</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#show-directive-module">show-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#show-directive.exports">show-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#show-directive.showDirective">show-directive.showDirective</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#expression-module">expression</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#expression.exports">expression.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#expression.expression">expression.expression</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#element-module">element</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#element.collection">element.collection</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#element.element">element.element</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#element.inherit">element.inherit</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#element.clear">element.clear</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#element.render">element.render</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#validate-directive-module">validate-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#validate-directive.exports">validate-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#validate-directive.validateDirective">validate-directive.validateDirective</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#render-module">render</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#attr-directive-module">attr-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#attr-directive.exports">attr-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#attr-directive.attrDirective">attr-directive.attrDirective</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#directives-module">directives</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#directives.exports">directives.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#directives.towerDirectives">directives.towerDirectives</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#markdown-directive-module">markdown-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#markdown-directive.exports">markdown-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#markdown-directive.markdownDirective">markdown-directive.markdownDirective</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#text-directive-module">text-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#text-directive.exports">text-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#text-directive.textDirective">text-directive.textDirective</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#element-directive-module">element-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#element-directive.exports">element-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#element-directive.elementDirective">element-directive.elementDirective</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#content-directive-module">content-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#content-directive.exports">content-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#content-directive.contentDirective">content-directive.contentDirective</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#event-directive-module">event-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#event-directive.eventDirective">event-directive.eventDirective</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#event-directive.all">event-directive.all</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#style-directive-module">style-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#style-directive.exports">style-directive.exports</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#component-cookbook-module">component-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#component-cookbook.create">component-cookbook.create</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#cli-module">cli</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#cli.verbs">cli.verbs</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.commands">cli.commands</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.aliases">cli.aliases</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#cli.version">cli.version</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#cli.run">cli.run</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.alias">cli.alias</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#cli.info">cli.info</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.init">cli.init</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.server">cli.server</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.use">cli.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.console">cli.console</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.search">cli.search</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.publish">cli.publish</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#cli.recipe">cli.recipe</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.command">cli.command</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cli.unknownCommand">cli.unknownCommand</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#list-directive-module">list-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#list-directive.exports">list-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#list-directive.list">list-directive.list</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#ec2-adapter-module">ec2-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.exports">ec2-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.ec2">ec2-adapter.ec2</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.load">ec2-adapter.load</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.connect">ec2-adapter.connect</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.disconnect">ec2-adapter.disconnect</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.address">ec2-adapter.address</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.group">ec2-adapter.group</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.find">ec2-adapter.find</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.create">ec2-adapter.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.update">ec2-adapter.update</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.remove">ec2-adapter.remove</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.image">ec2-adapter.image</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.find">ec2-adapter.find</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.create">ec2-adapter.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.register">ec2-adapter.register</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.remove">ec2-adapter.remove</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.deserializeFind">ec2-adapter.deserializeFind</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.instance">ec2-adapter.instance</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.find">ec2-adapter.find</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.create">ec2-adapter.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.remove">ec2-adapter.remove</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.key">ec2-adapter.key</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.find">ec2-adapter.find</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.create">ec2-adapter.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.remove">ec2-adapter.remove</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.load">ec2-adapter.load</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.region">ec2-adapter.region</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.find">ec2-adapter.find</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.create">ec2-adapter.create</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.snapshot">ec2-adapter.snapshot</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.find">ec2-adapter.find</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.create">ec2-adapter.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.remove">ec2-adapter.remove</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.tag">ec2-adapter.tag</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.volume">ec2-adapter.volume</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.zone">ec2-adapter.zone</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.find">ec2-adapter.find</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-adapter.queryParams">ec2-adapter.queryParams</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#mongodb-cookbook-module">mongodb-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#mongodb-cookbook.enter">mongodb-cookbook.enter</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#neo4j-cookbook-module">neo4j-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#neo4j-cookbook.start">neo4j-cookbook.start</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#ec2-cookbook-module">ec2-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.objects">ec2-cookbook.objects</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.aliases">ec2-cookbook.aliases</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.exports">ec2-cookbook.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.exports">ec2-cookbook.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.ec2">ec2-cookbook.ec2</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.help">ec2-cookbook.help</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.command">ec2-cookbook.command</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.connect">ec2-cookbook.connect</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.query">ec2-cookbook.query</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.read">ec2-cookbook.read</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.add">ec2-cookbook.add</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.remove">ec2-cookbook.remove</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.list">ec2-cookbook.list</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.create">ec2-cookbook.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.update">ec2-cookbook.update</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.remove">ec2-cookbook.remove</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.list">ec2-cookbook.list</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.create">ec2-cookbook.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.remove">ec2-cookbook.remove</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.list">ec2-cookbook.list</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.create">ec2-cookbook.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.remove">ec2-cookbook.remove</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.exec">ec2-cookbook.exec</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.list">ec2-cookbook.list</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.create">ec2-cookbook.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#ec2-cookbook.remove">ec2-cookbook.remove</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#ssh-cookbook-module">ssh-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#ssh-cookbook.enter">ssh-cookbook.enter</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#ssh-cookbook.create">ssh-cookbook.create</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#workstation-cookbook-module">workstation-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#workstation-cookbook.create">workstation-cookbook.create</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#workstation-cookbook.setup">workstation-cookbook.setup</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#workstation-cookbook.teardown">workstation-cookbook.teardown</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#stream-module">stream</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#stream.stream">stream.stream</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.Stream">stream.Stream</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#stream.ns">stream.ns</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.load">stream.load</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.exists">stream.exists</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#stream.api">stream.api</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.init">stream.init</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.dispatch">stream.dispatch</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.extend">stream.extend</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.clear">stream.clear</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#stream.noop">stream.noop</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.exec">stream.exec</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.open">stream.open</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#stream.close">stream.close</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#cookbook-module">cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#cookbook.lookupDirectories">cookbook.lookupDirectories</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#cookbook.create">cookbook.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cookbook.install">cookbook.install</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#cookbook.find">cookbook.find</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cookbook.exec">cookbook.exec</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cookbook.findCookbookPaths">cookbook.findCookbookPaths</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#recipe-module">recipe</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.exports">recipe.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.Recipe">recipe.Recipe</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.set">recipe.set</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.get">recipe.get</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.exists">recipe.exists</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.removeFile">recipe.removeFile</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.template">recipe.template</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.removeDirectory">recipe.removeDirectory</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.executable">recipe.executable</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.exec">recipe.exec</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.include">recipe.include</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.user">recipe.user</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.inputDirectory">recipe.inputDirectory</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.outputDirectory">recipe.outputDirectory</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.toInputPath">recipe.toInputPath</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#recipe.toOutputPath">recipe.toOutputPath</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#server-router-module">server-router</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.route">server-router.route</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.Context">server-router.Context</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.callbacks">server-router.callbacks</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.router">server-router.router</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.dispatch">server-router.dispatch</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.clear">server-router.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.start">server-router.start</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.stop">server-router.stop</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.Context">server-router.Context</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.render">server-router.render</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.write">server-router.write</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-router.error">server-router.error</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#validator-module">validator</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#validator.collection">validator.collection</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#validator.exports">validator.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#validator.validator">validator.validator</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#validator.has">validator.has</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#validator.ns">validator.ns</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#validator.clear">validator.clear</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#validator.validators">validator.validators</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#type-module">type</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#type.Type">type.Type</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.collection">type.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.validator">type.validator</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#type.exports">type.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#type.type">type.type</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#type.has">type.has</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.ns">type.ns</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.clear">type.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.use">type.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.sanitize">type.sanitize</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.serializer">type.serializer</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.to">type.to</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.from">type.from</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#type.type">type.type</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#type.types">type.types</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#topology-module">topology</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#topology.stream">topology.stream</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#topology.Topology">topology.Topology</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#topology.topology">topology.topology</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#topology.Topology">topology.Topology</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#topology.clear">topology.clear</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#topology.stream">topology.stream</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#todomvc-module">todomvc</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#todomvc.newTodo">todomvc.newTodo</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#todomvc.removeTodo">todomvc.removeTodo</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#todomvc.clearCompleted">todomvc.clearCompleted</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#todomvc.toggleCompleted">todomvc.toggleCompleted</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#text-module">text</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#text.text">text.text</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.locale">text.locale</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#text.Text">text.Text</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.past">text.past</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.present">text.present</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.future">text.future</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.tense">text.tense</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.none">text.none</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.one">text.one</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.other">text.other</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.inflection">text.inflection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#text.render">text.render</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#strcase-module">strcase</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#strcase.dotCase">strcase.dotCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.classCase">strcase.classCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.namespaceCase">strcase.namespaceCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.constantCase">strcase.constantCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.camelCase">strcase.camelCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.titleCase">strcase.titleCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.snakeCase">strcase.snakeCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.pathCase">strcase.pathCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.paramCase">strcase.paramCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.separatorCase">strcase.separatorCase</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.clean">strcase.clean</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#strcase.trim">strcase.trim</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#server-module">server</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server.exports">server.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server.server">server.server</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server.Server">server.Server</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#run-loop-module">run-loop</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.queues">run-loop.queues</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.previous">run-loop.previous</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.current">run-loop.current</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#run-loop.exports">run-loop.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.run">run-loop.run</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.begin">run-loop.begin</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.end">run-loop.end</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.clear">run-loop.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.deferOnce">run-loop.deferOnce</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.add">run-loop.add</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.autorun">run-loop.autorun</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.autorun">run-loop.autorun</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.RunLoop">run-loop.RunLoop</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.flush">run-loop.flush</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#run-loop.Queue">run-loop.Queue</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#route-module">route</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#route.Route">route.Route</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.collection">route.collection</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#route.route">route.route</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#route.use">route.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.clear">route.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.Route">route.Route</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#route.param">route.param</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.validate">route.validate</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.validator">route.validator</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.type">route.type</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.use">route.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.accept">route.accept</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.format">route.format</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.self">route.self</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.match">route.match</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.handle">route.handle</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#route.parseParams">route.parseParams</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#resource-module">resource</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#resource.collection">resource.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.validator">resource.validator</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#resource.resource">resource.resource</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.Resource">resource.Resource</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#resource.use">resource.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.load">resource.load</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.ns">resource.ns</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.clear">resource.clear</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#resource.isNew">resource.isNew</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.save">resource.save</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.update">resource.update</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.remove">resource.remove</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.isValid">resource.isValid</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.validate">resource.validate</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.set">resource.set</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.get">resource.get</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.has">resource.has</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.toJSON">resource.toJSON</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#resource.defaultAttr">resource.defaultAttr</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#query-module">query</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.Query">query.Query</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.Constraint">query.Constraint</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.collection">query.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.adapters">query.adapters</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.filter">query.filter</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.validate">query.validate</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#query.exports">query.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.exports">query.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.exports">query.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.exports">query.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#query.exports">query.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.query">query.query</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.use">query.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.Query">query.Query</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.use">query.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.start">query.start</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.incoming">query.incoming</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.outgoing">query.outgoing</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.as">query.as</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.create">query.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.page">query.page</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.asc">query.asc</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.desc">query.desc</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.relation">query.relation</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.constraint">query.constraint</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.action">query.action</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.sort">query.sort</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.explain">query.explain</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.exec">query.exec</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.query">query.query</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#query.queryAttr">query.queryAttr</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.Constraint">query.Constraint</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.filter">query.filter</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.subscriber">query.subscriber</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.validate">query.validate</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#query.validate">query.validate</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#program-module">program</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#program.collection">program.collection</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#program.program">program.program</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#program.input">program.input</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#param-module">param</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#param.Param">param.Param</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#param.collection">param.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#param.validator">param.validator</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#param.exports">param.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#param.param">param.param</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#param.Param">param.Param</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#param.validator">param.validator</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#param.operator">param.operator</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#param.typecast">param.typecast</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#param.validators">param.validators</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#operator-module">operator</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#operator.collection">operator.collection</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#operator.operator">operator.operator</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#mongodb-adapter-module">mongodb-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mongodb-adapter.use">mongodb-adapter.use</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mongodb-adapter.exec">mongodb-adapter.exec</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mongodb-adapter.connect">mongodb-adapter.connect</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mongodb-adapter.disconnect">mongodb-adapter.disconnect</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#memory-adapter-module">memory-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.collections">memory-adapter.collections</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.exec">memory-adapter.exec</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.load">memory-adapter.load</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.clear">memory-adapter.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.create">memory-adapter.create</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.update">memory-adapter.update</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.remove">memory-adapter.remove</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.find">memory-adapter.find</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#memory-adapter.identify">memory-adapter.identify</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#load-module">load</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#load.paths">load.paths</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#load.keys">load.keys</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#load.fns">load.fns</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#load.load">load.load</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#load.set">load.set</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#keyboard-directive-module">keyboard-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#keyboard-directive.exports">keyboard-directive.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#keyboard-directive.keyboard">keyboard-directive.keyboard</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#fs-module">fs</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                    <li>
                      <a href="#fs.createDirectoryRecursive">fs.createDirectoryRecursive</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#fs.createDirectoryRecursiveSync">fs.createDirectoryRecursiveSync</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#fs.readDirectoryRecursive">fs.readDirectoryRecursive</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#fs.glob">fs.glob</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#fs.fileDigest">fs.fileDigest</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#fs.eachLine">fs.eachLine</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#emitter-module">emitter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.exports">emitter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.Emitter">emitter.Emitter</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.mixin">emitter.mixin</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.on">emitter.on</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.once">emitter.once</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.emit">emitter.emit</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.listeners">emitter.listeners</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#emitter.hasListeners">emitter.hasListeners</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#content-module">content</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#content.collection">content.collection</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#content.content">content.content</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.Content">content.Content</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#content.clear">content.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.is">content.is</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.root">content.root</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#content.get">content.get</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.set">content.set</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.apply">content.apply</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.call">content.call</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.remove">content.remove</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.toString">content.toString</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#content.findAction">content.findAction</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#console-module">console</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#console.exports">console.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#console.shell">console.shell</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#console.evaluate">console.evaluate</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#collection-module">collection</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#collection.collection">collection.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#collection.Collection">collection.Collection</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#collection.collection">collection.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#collection.Collection">collection.Collection</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#collection.subscribe">collection.subscribe</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#collection.unsubscribe">collection.unsubscribe</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#collection.apply">collection.apply</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#client-router-module">client-router</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.route">client-router.route</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.Context">client-router.Context</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.router">client-router.router</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.dispatch">client-router.dispatch</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.clear">client-router.clear</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.start">client-router.start</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.stop">client-router.stop</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.show">client-router.show</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.replace">client-router.replace</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.Context">client-router.Context</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-router.transition">client-router.transition</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#attr-module">attr</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#attr.Attr">attr.Attr</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#attr.validator">attr.validator</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#attr.collection">attr.collection</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#attr.exports">attr.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#attr.attr">attr.attr</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#attr.ns">attr.ns</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#attr.Attr">attr.Attr</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#attr.validator">attr.validator</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#attr.typecast">attr.typecast</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#attr.apply">attr.apply</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#attr.validators">attr.validators</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#adapter-module">adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.collection">adapter.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.Adapter">adapter.Adapter</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.adapter">adapter.adapter</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.load">adapter.load</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.exists">adapter.exists</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.Adapter">adapter.Adapter</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.query">adapter.query</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.use">adapter.use</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.connection">adapter.connection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.type">adapter.type</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.serializer">adapter.serializer</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#adapter.self">adapter.self</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#uuid-module">uuid</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                    <li>
                      <a href="#uuid.exports">uuid.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#uuid.uuid">uuid.uuid</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#style-guide-module">style-guide</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#style-guide.exports">style-guide.exports</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#style-guide.style">style-guide.style</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#relation-module">relation</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#relation.hasMany">relation.hasMany</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#proxy-module">proxy</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#proxy.status">proxy.status</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#proxy.process">proxy.process</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#proxy.server">proxy.server</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#proxy.serverFile">proxy.serverFile</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#proxy.serverFiles">proxy.serverFiles</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#proxy.proxy">proxy.proxy</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#asset-module">asset</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#asset.collection">asset.collection</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.configs">asset.configs</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.templates">asset.templates</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.layouts">asset.layouts</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.templateFiles">asset.templateFiles</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.layoutFiles">asset.layoutFiles</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#asset.config">asset.config</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.add">asset.add</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.fetch">asset.fetch</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.read">asset.read</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.initialize">asset.initialize</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#asset.asset">asset.asset</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#s3-cookbook-module">s3-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#s3-cookbook.create">s3-cookbook.create</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#input-directive-module">input-directive</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#accessor-module">accessor</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#accessor.get">accessor.get</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#accessor.use">accessor.use</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#filter-module">filter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#filter.collection">filter.collection</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#filter.filter">filter.filter</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#rest-adapter-module">rest-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#cassandra-cookbook-module">cassandra-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#cassandra-cookbook.start">cassandra-cookbook.start</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cassandra-cookbook.stop">cassandra-cookbook.stop</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cassandra-cookbook.enter">cassandra-cookbook.enter</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#cassandra-cookbook.install">cassandra-cookbook.install</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#app-cookbook-module">app-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#app-cookbook.create">app-cookbook.create</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#node-cookbook-module">node-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                    <li>
                      <a href="#node-cookbook.install">node-cookbook.install</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#server-template-module">server-template</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.View">server-template.View</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.context">server-template.context</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.views">server-template.views</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.bindings">server-template.bindings</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.helpers">server-template.helpers</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.Context">server-template.Context</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.ctx">server-template.ctx</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.view">server-template.view</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.helper">server-template.helper</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.clear">server-template.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.render">server-template.render</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.compile">server-template.compile</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.findPlaceHolders">server-template.findPlaceHolders</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.content">server-template.content</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.helpers">server-template.helpers</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.text">server-template.text</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.html">server-template.html</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.view">server-template.view</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.each">server-template.each</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.checked">server-template.checked</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.unchecked">server-template.unchecked</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.value">server-template.value</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.show">server-template.show</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.hide">server-template.hide</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.enabled">server-template.enabled</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.disabled">server-template.disabled</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.template">server-template.template</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.View">server-template.View</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.child">server-template.child</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.swap">server-template.swap</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.findPlaceHolders">server-template.findPlaceHolders</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.content">server-template.content</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.findParent">server-template.findParent</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.context">server-template.context</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.clear">server-template.clear</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.Context">server-template.Context</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.get">server-template.get</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.set">server-template.set</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.length">server-template.length</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.array">server-template.array</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.object">server-template.object</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#server-template.child">server-template.child</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#reload-module">reload</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#reload.callbacks">reload.callbacks</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#reload.onMigrate">reload.onMigrate</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#client-session-module">client-session</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#client-session.adapters">client-session.adapters</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#client-session.session">client-session.session</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#client-session.Adapter">client-session.Adapter</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#client-socket-module">client-socket</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                    <li>
                      <a href="#client-socket.exports">client-socket.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.Socket">client-socket.Socket</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.init">client-socket.init</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.onopen">client-socket.onopen</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.onclose">client-socket.onclose</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.onmessage">client-socket.onmessage</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.runCallbacks">client-socket.runCallbacks</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.emit">client-socket.emit</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#client-socket.get">client-socket.get</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#server-socket-module">server-socket</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#bundler-module">bundler</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#bundler.js">bundler.js</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#bundler.css">bundler.css</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#bundler.img">bundler.img</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#bundler.normalize">bundler.normalize</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#builder-module">builder</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#builder.exports">builder.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#builder.buildScripts">builder.buildScripts</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#builder.register">builder.register</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#builder.build">builder.build</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#builder.exports">builder.exports</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                    <li>
                      <a href="#builder.package">builder.package</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#orientdb-cookbook-module">orientdb-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                    <li>
                      <a href="#orientdb-cookbook.cookbook">orientdb-cookbook.cookbook</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#redis-cookbook-module">redis-cookbook</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                    <li>
                      <a href="#redis-cookbook.cookbook">redis-cookbook.cookbook</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#facebook-adapter-module">facebook-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#facebook-adapter.exports">facebook-adapter.exports</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#couchdb-adapter-module">couchdb-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#couchdb-adapter.exports">couchdb-adapter.exports</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#mysql-adapter-module">mysql-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.exports">mysql-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.__proto__">mysql-adapter.__proto__</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.exports">mysql-adapter.exports</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.init">mysql-adapter.init</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.connect">mysql-adapter.connect</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.disconnect">mysql-adapter.disconnect</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.execute">mysql-adapter.execute</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.deserialize">mysql-adapter.deserialize</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.typecast">mysql-adapter.typecast</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.toSQL">mysql-adapter.toSQL</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.schema">mysql-adapter.schema</a>
                    </li>
                    
                  
                    
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.Command">mysql-adapter.Command</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.pause">mysql-adapter.pause</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.resume">mysql-adapter.resume</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.destroy">mysql-adapter.destroy</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.pipe">mysql-adapter.pipe</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#mysql-adapter.write">mysql-adapter.write</a>
                    </li>
                    
                  
                
                  
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a href="#postgres-adapter-module">postgres-adapter</a></h4></li>
            <li>
              <h5>Properties:</h5>
              <ul class="nav properties">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#postgres-adapter.exports">postgres-adapter.exports</a>
                    </li>
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                
                  
                  
                
              </ul>

              <h5>Methods:</h5>
              <ul class="nav methods">
                
                  
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                  
                    
                    
                    <li>
                      <a href="#postgres-adapter.init">postgres-adapter.init</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#postgres-adapter.connect">postgres-adapter.connect</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#postgres-adapter.disconnect">postgres-adapter.disconnect</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#postgres-adapter.execute">postgres-adapter.execute</a>
                    </li>
                    
                  
                    
                    
                    <li>
                      <a href="#postgres-adapter.buildQuery">postgres-adapter.buildQuery</a>
                    </li>
                    
                  
                
                  
                  
                
              </ul>
            </li>
          </ul>
        </li>
        
      </ul>
    </div>

    <div class="span8 offset3 right-panel-info">
      <pre>[
    {
        &quot;sourceFile&quot;: &quot;.temp_tower_modules/template/index.js&quot;,
        &quot;targetFile&quot;: &quot;docs/.temp_tower_modules/template/index.js.html&quot;,
        &quot;dox&quot;: [
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Module dependencies.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Module dependencies.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;var content = require('tower-content');\nvar directive = require('tower-directive');&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;declaration&quot;,
                    &quot;name&quot;: &quot;content&quot;,
                    &quot;value&quot;: &quot;require('tower-content')&quot;,
                    &quot;string&quot;: &quot;content&quot;
                }
            },
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Expose &lt;code&gt;template&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Expose &lt;code&gt;template&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;exports = module.exports = template;&quot;
            },
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Expose &lt;code&gt;collection&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Expose &lt;code&gt;collection&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;exports.collection = {};&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;property&quot;,
                    &quot;receiver&quot;: &quot;exports&quot;,
                    &quot;name&quot;: &quot;collection&quot;,
                    &quot;value&quot;: &quot;{}&quot;,
                    &quot;string&quot;: &quot;exports.collection&quot;
                }
            },
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Expose &lt;code&gt;compile&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Expose &lt;code&gt;compile&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;exports.compile = compile;&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;property&quot;,
                    &quot;receiver&quot;: &quot;exports&quot;,
                    &quot;name&quot;: &quot;compile&quot;,
                    &quot;value&quot;: &quot;compile&quot;,
                    &quot;string&quot;: &quot;exports.compile&quot;
                }
            },
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;String&quot;
                        ],
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;description&quot;: &quot;This is strange&quot;
                    },
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;HTMLNode&quot;
                        ],
                        &quot;name&quot;: &quot;node&quot;,
                        &quot;description&quot;: &quot;this is weird too&quot;
                    },
                    {
                        &quot;type&quot;: &quot;return&quot;,
                        &quot;types&quot;: [
                            &quot;Function&quot;
                        ],
                        &quot;description&quot;: &quot;What a callback&quot;
                    },
                    {
                        &quot;type&quot;: &quot;api&quot;,
                        &quot;visibility&quot;: &quot;public&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;poopyCompile a DOM element's directives to a function.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;poopyCompile a DOM element's directives to a function.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;function template(name, node) {\n  // if `name` is a DOM node, arguments are shifted by 1\n  if ('string' !== typeof name) return compile(name);\n  // only 1 argument\n  if (undefined === node) return exports.collection[name];\n  // compile it\n  return exports.collection[name] = compile(node);\n}&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;function&quot;,
                    &quot;name&quot;: &quot;template&quot;,
                    &quot;string&quot;: &quot;template()&quot;
                }
            },
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;DOMNode&quot;
                        ],
                        &quot;name&quot;: &quot;node&quot;,
                        &quot;description&quot;: &quot;&quot;
                    },
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;Content&quot;
                        ],
                        &quot;name&quot;: &quot;scope&quot;,
                        &quot;description&quot;: &quot;&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Traverse &lt;code&gt;node&lt;/code&gt; and children recursively,&lt;br /&gt;and collect and execute directives.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Traverse &lt;code&gt;node&lt;/code&gt; and children recursively,&lt;br /&gt;and collect and execute directives.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;function compile(node) {\n  var fn = node.length\n    ? compileEach(node)\n    : compileNode(node);\n\n  // clone original element\n  fn.clone = function clone(scope){\n    return fn(scope, node.cloneNode(true));\n  }\n\n  return fn;\n}\n\nfunction compileNode(node) {\n  var directivesFn = compileDirectives(node);\n  \n  // recursive\n  var eachFn = node.childNodes\n    ? compileEach(node.childNodes)\n    : undefined;\n\n  // `returnNode` is used for recursively \n  // passing children. this is used for cloning, \n  // where it should apply the directives to \n  // the new children, not the original \n  // template's children.\n\n  function nodeFn(scope, returnNode) {\n    returnNode || (returnNode = node);\n\n    // apply directives to node.\n    if (directivesFn) scope = directivesFn(scope, returnNode);\n\n    // recurse, apply directives to children.\n    if (eachFn &amp;&amp; returnNode.childNodes)\n      eachFn(scope, returnNode.childNodes);\n\n    return returnNode;\n  }\n\n  return nodeFn;\n}\n\nfunction compileEach(children) {\n  var fns = [];\n  for (var i = 0, n = children.length; i &lt; n; i++) {\n    fns.push(compileNode(children[i]));\n  }\n\n  return createEachFn(fns);\n}\n\nfunction compileDirectives(node) {\n  var directives = getDirectives(node);\n\n  if (!directives.length) return; // don't execute function if unnecessary.\n\n  var fns = [];\n  for (var i = 0, n = directives.length; i &lt; n; i++) {\n    fns.push(directives[i].compile(node));\n  }\n\n  return createDirectivesFn(fns);\n}\n\nfunction getDirectives(node) {\n  var directives = [];\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType\n  switch (node.nodeType) {\n    case 1: // element node (visible tags plus &lt;style&gt;, &lt;meta&gt;)\n      // first, appendDirective directive named after node, if it exists.\n      appendDirective(node.nodeName.toLowerCase(), directives);\n      getDirectivesFromAttributes(node, directives);\n      break;\n    case 3: // text node\n      // node.nodeValue\n      appendDirective('interpolation', directives);\n      break;\n    case 8: // comment node\n      //\n      break;\n  }\n\n  if (directives.length) directives.sort(priority);\n  return directives;\n}\n\nfunction getDirectivesFromAttributes(node, directives) {\n  var attr;\n  for (var i = 0, n = node.attributes.length; i &lt; n; i++) {\n    attr = node.attributes[i];\n    // The specified property returns true if the \n    // attribute value is set in the document, \n    // and false if it's a default value in a DTD/Schema.\n    // http://www.w3schools.com/dom/prop_attr_specified.asp\n    // XXX: don't know what this does.\n    if (!attr.specified) continue;\n    appendDirective(attr.name, directives);\n  }\n}&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;function&quot;,
                    &quot;name&quot;: &quot;compile&quot;,
                    &quot;string&quot;: &quot;compile()&quot;
                }
            },
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Add directive.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Add directive.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;function appendDirective(name, directives) {\n  if (directive.defined(name)) {\n    directives.push(directive(name));\n  }\n}&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;function&quot;,
                    &quot;name&quot;: &quot;appendDirective&quot;,
                    &quot;string&quot;: &quot;appendDirective()&quot;
                }
            },
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Creates a template function for node children&lt;br /&gt;in an isolated JS scope.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Creates a template function for node children&lt;br /&gt;in an isolated JS scope.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;function createEachFn(fns) {\n  var n = fns.length, i;\n\n  function eachFn(scope, children) {\n    for (i = 0; i &lt; n; i++) {\n      // XXX: not sure this is correct.\n      fns[i](scope, children[i]);\n    }\n  }\n\n  return eachFn;\n}&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;function&quot;,
                    &quot;name&quot;: &quot;createEachFn&quot;,
                    &quot;string&quot;: &quot;createEachFn()&quot;
                }
            },
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Creates a template function for node directives&lt;br /&gt;in an isolated JS scope.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Creates a template function for node directives&lt;br /&gt;in an isolated JS scope.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;function createDirectivesFn(fns) {\n  var n = fns.length, i;\n\n  function directivesFn(scope, node) {\n    // XXX: maybe we can collect the directives in reverse\n    //      and then use a `while` loop.\n    for (i = 0; i &lt; n; i++) {\n      scope = fns[i](node, scope);\n    }\n\n    return scope;\n  }\n\n  return directivesFn;\n}&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;function&quot;,
                    &quot;name&quot;: &quot;createDirectivesFn&quot;,
                    &quot;string&quot;: &quot;createDirectivesFn()&quot;
                }
            },
            {
                &quot;tags&quot;: [],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Sort by priority.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Sort by priority.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;function priority(a, b) {\n  return b._priority - a._priority;\n}&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;function&quot;,
                    &quot;name&quot;: &quot;priority&quot;,
                    &quot;string&quot;: &quot;priority()&quot;
                }
            }
        ]
    },
    {
        &quot;sourceFile&quot;: &quot;towerjs.org/views/docs.ejs&quot;,
        &quot;targetFile&quot;: &quot;towerjs.org/views/docs.ejs&quot;,
        &quot;dox&quot;: []
    }
]</pre>
      <h1>Docs</h1>
      <div id="api">
        
        
        <div id="guides-module">
          <h2>guides</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="template-module">
          <h2>template</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="template.collection">
                <h3>template.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="template.compile">
                <h3>template.compile</h3>
                <p>Expose <code>compile</code>.</p>
                <pre class="js">exports.compile = compile;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="template.template">
                <h3>
                  template.template
                </h3>
                <p>poopyCompile a DOM element's directives to a function.</p>
                <pre class="js">function template(name, node) {
  // if `name` is a DOM node, arguments are shifted by 1
  if ('string' !== typeof name) return compile(name);
  // only 1 argument
  if (undefined === node) return exports.collection[name];
  // compile it
  return exports.collection[name] = compile(node);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="template.compile">
                <h3>
                  template.compile
                </h3>
                <p>Traverse <code>node</code> and children recursively,<br />and collect and execute directives.</p>
                <pre class="js">function compile(node) {
  var fn = node.length
    ? compileEach(node)
    : compileNode(node);

  // clone original element
  fn.clone = function clone(scope){
    return fn(scope, node.cloneNode(true));
  }

  return fn;
}

function compileNode(node) {
  var directivesFn = compileDirectives(node);
  
  // recursive
  var eachFn = node.childNodes
    ? compileEach(node.childNodes)
    : undefined;

  // `returnNode` is used for recursively 
  // passing children. this is used for cloning, 
  // where it should apply the directives to 
  // the new children, not the original 
  // template's children.

  function nodeFn(scope, returnNode) {
    returnNode || (returnNode = node);

    // apply directives to node.
    if (directivesFn) scope = directivesFn(scope, returnNode);

    // recurse, apply directives to children.
    if (eachFn &amp;&amp; returnNode.childNodes)
      eachFn(scope, returnNode.childNodes);

    return returnNode;
  }

  return nodeFn;
}

function compileEach(children) {
  var fns = [];
  for (var i = 0, n = children.length; i &lt; n; i++) {
    fns.push(compileNode(children[i]));
  }

  return createEachFn(fns);
}

function compileDirectives(node) {
  var directives = getDirectives(node);

  if (!directives.length) return; // don't execute function if unnecessary.

  var fns = [];
  for (var i = 0, n = directives.length; i &lt; n; i++) {
    fns.push(directives[i].compile(node));
  }

  return createDirectivesFn(fns);
}

function getDirectives(node) {
  var directives = [];

  // https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType
  switch (node.nodeType) {
    case 1: // element node (visible tags plus &lt;style&gt;, &lt;meta&gt;)
      // first, appendDirective directive named after node, if it exists.
      appendDirective(node.nodeName.toLowerCase(), directives);
      getDirectivesFromAttributes(node, directives);
      break;
    case 3: // text node
      // node.nodeValue
      appendDirective('interpolation', directives);
      break;
    case 8: // comment node
      //
      break;
  }

  if (directives.length) directives.sort(priority);
  return directives;
}

function getDirectivesFromAttributes(node, directives) {
  var attr;
  for (var i = 0, n = node.attributes.length; i &lt; n; i++) {
    attr = node.attributes[i];
    // The specified property returns true if the 
    // attribute value is set in the document, 
    // and false if it's a default value in a DTD/Schema.
    // http://www.w3schools.com/dom/prop_attr_specified.asp
    // XXX: don't know what this does.
    if (!attr.specified) continue;
    appendDirective(attr.name, directives);
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="template.appendDirective">
                <h3>
                  template.appendDirective
                </h3>
                <p>Add directive.</p>
                <pre class="js">function appendDirective(name, directives) {
  if (directive.defined(name)) {
    directives.push(directive(name));
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="template.createEachFn">
                <h3>
                  template.createEachFn
                </h3>
                <p>Creates a template function for node children<br />in an isolated JS scope.</p>
                <pre class="js">function createEachFn(fns) {
  var n = fns.length, i;

  function eachFn(scope, children) {
    for (i = 0; i &lt; n; i++) {
      // XXX: not sure this is correct.
      fns[i](scope, children[i]);
    }
  }

  return eachFn;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="template.createDirectivesFn">
                <h3>
                  template.createDirectivesFn
                </h3>
                <p>Creates a template function for node directives<br />in an isolated JS scope.</p>
                <pre class="js">function createDirectivesFn(fns) {
  var n = fns.length, i;

  function directivesFn(scope, node) {
    // XXX: maybe we can collect the directives in reverse
    //      and then use a `while` loop.
    for (i = 0; i &lt; n; i++) {
      scope = fns[i](node, scope);
    }

    return scope;
  }

  return directivesFn;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="template.priority">
                <h3>
                  template.priority
                </h3>
                <p>Sort by priority.</p>
                <pre class="js">function priority(a, b) {
  return b._priority - a._priority;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="directive-module">
          <h2>directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="directive.collection">
                <h3>directive.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="directive.Directive">
                <h3>directive.Directive</h3>
                <p>Expose <code>Directive</code>.</p>
                <pre class="js">exports.Directive = Directive;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="directive.exports">
                <h3>directive.exports</h3>
                <p>Expose <code>directives</code>.</p>
                <pre class="js">module.exports = directives;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="directive.directive">
                <h3>
                  directive.directive
                </h3>
                <p>Get/set directive function.</p>
                <pre class="js">function directive(name, fn) {
  if (undefined === fn &amp;&amp; exports.collection[name])
    return exports.collection[name];

  var instance = new Directive(name, fn);
  exports.collection[name] = instance;
  exports.collection.push(instance);
  exports.emit('define', instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="directive.defined">
                <h3>
                  directive.defined
                </h3>
                <p>Check if directive is defined.</p>

<p>XXX: defined vs. has vs. exists?</p>
                <pre class="js">exports.defined = function(name){
  return exports.collection.hasOwnProperty(name);
};

exports.has = exports.defined;</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.toString">
                <h3>
                  directive.toString
                </h3>
                <p>toString.</p>
                <pre class="js">exports.toString = function(){
  return 'directive';
};</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.clear">
                <h3>
                  directive.clear
                </h3>
                <p>Clear all directives.</p>
                <pre class="js">exports.clear = function(){
  exports.off();
  // recursively emit `&quot;remove&quot;`.
  content.clear();
  exports.collection = [];
  directives(exports);
  return exports;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.Directive">
                <h3>
                  directive.Directive
                </h3>
                <p>Instantiate a new <code>Directive</code>.</p>
                <pre class="js">function Directive(name, fn) {
  this.name = name;
  this._priority = 0;
  if (fn) this._exec = fn;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.exec">
                <h3>
                  directive.exec
                </h3>
                <p>Apply the directive.</p>

<p>This one (compared to <code>compile</code>)<br />is useful for testing. It is slightly less optimized.</p>
                <pre class="js">Directive.prototype.exec = function(element, scope){
  // way to quickly access scope on element later.
  // XXX: pretty sure if the element gets removed,
  //      this won't create a memory leak.
  element.__scope__ = scope;
  var attr = this._compileAttr(element);
  if (!content.is(scope)) scope = content('anonymous').init(scope);

  // return a scope.
  return this._exec(scope, element, attr) || scope;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.compile">
                <h3>
                  directive.compile
                </h3>
                <p>Return optimized function for use in templates.</p>
                <pre class="js">Directive.prototype.compile = function(element){
  var self = this;
  var attr = this._compileAttr(element);

  return function exec(element, scope) {
    element.__scope__ = scope;
    return self._exec(scope, element, attr) || scope;
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.types">
                <h3>
                  directive.types
                </h3>
                <p>XXX: The only types of elements this can be defined on.</p>

<p>Comment/Script/Element/Text</p>
                <pre class="js">Directive.prototype.types = function(){
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="directive._compileAttr">
                <h3>
                  directive._compileAttr
                </h3>
                <p>Compile attribute from element.</p>

<p>XXX: Maybe this becomes a separate module/object,<br />     or uses <code>tower-attr</code>.</p>
                <pre class="js">Directive.prototype._compileAttr = function(element){
  var val = element.getAttribute(this.name);
  return {
    name: this.name,
    value: val, // raw value
    expression: val ? expression(val) : noop
  };
};</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.priority">
                <h3>
                  directive.priority
                </h3>
                <p>Sorting priority.</p>

<p>Higher means it gets moved toward the front.</p>
                <pre class="js">Directive.prototype.priority = function(val){
  this._priority = val;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="directive.toString">
                <h3>
                  directive.toString
                </h3>
                <p>toString.</p>
                <pre class="js">Directive.prototype.toString = function(){
  return 'directive(&quot;' + this.name + '&quot;)';
};</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="directive.directives">
                <h3>
                  directive.directives
                </h3>
                <p>Define base directives.</p>
                <pre class="js">function directives(directive) {

  // simple helpers for defining extra directives.

  directive.event = eventDirective;
  directive.attr = attrDirective;
  
  // creates a new scope

  directive('data-scope', function(scope, element, attr){
    return content(attr.value).init({ parent: scope });
  });

  directive('data-text', function(scope, element, attr){
    var val = scope.get(attr.value);
    if (undefined !== val)
      element.textContent = val;
  });

  // attr directives

  for (var i = 0, n = attrs.length; i &lt; n; i++) {
    attrDirective(attrs[i]);
  }

  // event directives

  for (var i = 0, n = events.length; i &lt; n; i++) {
    eventDirective(events[i]);
  }

  function attrDirective(name) {
    directive('data-' + name, function(scope, element, attr){
      var val = scope.get(attr.value);
      if (undefined !== val)
        element.setAttribute(name, val);
    });
  }

  function eventDirective(name) {
    // XXX: refactor to optimize for specific cases.
    directive('on-' + name, function(scope, element, attr){
      function handle(evt) {
        // so it can be used by expression
        scope.attrs.event = evt;
        if ('change' === name) evt.value = value(element);
        // scope.apply(attr.value, [evt]);
        attr.expression(scope);
        delete scope.attrs.event;
      }

      event.bind(element, name, handle);

      scope.on('remove', function(){
        event.unbind(element, name, handle);
      });
    });
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="show-directive-module">
          <h2>show-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="show-directive.exports">
                <h3>show-directive.exports</h3>
                <p>Expose <code>showDirective</code>.</p>
                <pre class="js">module.exports = directive('data-show', showDirective);</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="show-directive.showDirective">
                <h3>
                  show-directive.showDirective
                </h3>
                <p>Define <code>showDirective</code>.</p>
                <pre class="js">function showDirective(scope, el, attr) {
  scope.on('change ' + attr.value, function(curr, prev){
    // XXX
    // if (curr &amp;&amp; curr !== prev) 
  });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="expression-module">
          <h2>expression</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="expression.exports">
                <h3>expression.exports</h3>
                <p>Expose <code>expression</code>.</p>
                <pre class="js">module.exports = expression;</pre>
              </section>
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="expression.expression">
                <h3>
                  expression.expression
                </h3>
                <p>Parse a directive expression.</p>

<p>XXX: Maybe there are "named" expressions later.</p>
                <pre class="js">function expression(val) {
  // property used in this expression.
  var deps = {};
  var fn = Function('scope', '  return ' + parseExpression(val, deps));
  var options = deps._options;
  delete deps._options;
  var keys = [];
  for (var key in deps) keys.push(key);
  fn.deps = keys;
  fn.opts = options;
  return fn;
}

function filterExpression(val) {
  val = val.split(filterRexExp);
  for (var i = 0, n = val.length; i &lt; n; i++) {
    // XXX
    // val[i] = x
  }
  return val
}

function parseExpression(val, deps) {
  return optionsExpression(val, deps)
    || fnExpression(val, deps)
    || operatorExpression(val, deps)
    || propertyExpression(val, deps);
}

function optionsExpression(val, deps) {
  if (!val.match(optionsRegExp)) return;
  var code = parseExpression(RegExp.$1, deps);
  val = RegExp.$2.split(argsRegExp);
  var options = {};
  for (var i = 0, n = val.length; i &lt; n; i++) {
    keyValueExpression(val[i], options);
  }
  deps._options = options;
  return code;
}

// &lt;input on-keypress=&quot;enter:createTodo&quot;&gt;
// &lt;input on-keypress=&quot;enter : createTodo&quot;&gt;
// &lt;input on-keypress=&quot;enter:create(todo)&quot;&gt;
function keyValueExpression(val, options) {
  // XXX: todo
  // val.match(fnRegExp);
  if (!val.match(keyValueRegExp)) return;
  val = RegExp.$2;
  options[RegExp.$1] = numberExpression(val) || val;
}

// &lt;input on-keypress=&quot;create(todo)&quot;&gt;
function fnExpression(val, deps) {
  if (!val.match(fnRegExp)) return;

  var name = RegExp.$1;
  var args = RegExp.$2;
  
  if (args) {
    return &quot;scope.call('&quot; + name + &quot;', &quot; + argumentsExpression(args, deps) + &quot;)&quot;;
  } else {
    return &quot;scope.call('&quot; + name + &quot;')&quot;;
  }
}

function argumentsExpression(val, deps) {
  val = val.split(argsRegExp);
  var result = [];
  for (var i = 0, n = val.length; i &lt; n; i ++) {
    // XXX: special cases: `i`, `event`, `this`.
    result.push(parseExpression(val[i], deps));
  }
  return result.join(', ');
}

function operatorExpression(val, deps) {
  if (!val.match(operatorRegExp)) return;

  var left = RegExp.$1;
  var operator = RegExp.$2;
  var right = RegExp.$3;

  var code = parseExpression(left, deps)
    + ' ' + operator + ' '
    + parseExpression(right, deps);

  return code;
}

function propertyExpression(val, deps) {
  return numberExpression(val, deps)
    || pathExpression(val, deps);
}

function numberExpression(val, deps) {
  if (val.match(numberRegExp)) return parseFloat(val);
}

function pathExpression(val, deps) {
  deps[val] = true;
  return &quot;scope.get('&quot; + val + &quot;')&quot;;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="element-module">
          <h2>element</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="element.collection">
                <h3>element.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="element.element">
                <h3>
                  element.element
                </h3>
                <p>Get an <code>Element</code>.</p>
                <pre class="js">function element(name) {
  if (exports.collection[name])
    return exports.collection[name];

  function Element(options) {
    this.name = name;
    this.content = this.constructor.content.init(options);
  }

  for (var key in statics) Element[key] = statics[key];

  // prototype

  Element.prototype = {};
  Element.prototype.constructor = Element;
  
  for (var key in proto) Element.prototype[key] = proto[key];

  Element.id = name;
  Element.content = content(name);
  Element.superclasses = [];
  Element.subclasses = [];
  exports.collection[name] = Element;
  exports.collection.push(Element);
  exports.emit('define', Element);
  exports.emit('define ' + name, Element);
  return Element;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="element.inherit">
                <h3>
                  element.inherit
                </h3>
                <p>Add parent class props/fns.</p>
                <pre class="js">statics.inherit = function(name){
  var parent = exports(name);

  if (this.superclasses.hasOwnProperty(name))
    return this;

  this.superclasses[name] = true;
  this.superclasses.push(name);

  if (!parent.subclasses.hasOwnProperty(this.id)) {
    parent.subclasses[this.id] = true;
    parent.subclasses.push(this.id);
  }

  for (var i = 0, n = parent.content.attrs.length; i &lt; n; i++) {
    // XXX: should just have to be like this:
    // this.attr(parent.attrs[i]);
    var attr = parent.content.attrs[i];
    this.attr(attr.name, attr.type, attr);
  }

  return this;
};

statics.disinherit = function(name){
  var parent = exports(name);

  if (this.superclasses.hasOwnProperty(name)) {
    delete this.superclasses[name];
    this.superclasses.splice(1, this.superclasses.indexOf((name));
  }

  if (parent.subclasses.hasOwnProperty(this.id)) {
    delete parent.subclasses[this.id];
    parent.subclasses.splice(1, parent.subclasses.indexOf((this.id));
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="element.clear">
                <h3>
                  element.clear
                </h3>
                <p>Clear everything (for testing).</p>
                <pre class="js">exports.clear = function(){
  exports.off();
  return this;
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
          
            
            
              
              
              <section class="method" id="element.render">
                <h3>
                  element.render
                </h3>
                <p>Render template against content.</p>
                <pre class="js">exports.render = function(){
  this.remove();
  this.el = this.constructor.fn.clone(this.content);
  return this.el;
};

exports.remove = function(){
  if (this.el &amp;&amp; this.el.parentNode) {
    this.el.parentNode.removeChild(this.el);
  }
  this.el = undefined;

  return this;
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="validate-directive-module">
          <h2>validate-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="validate-directive.exports">
                <h3>validate-directive.exports</h3>
                <p>Expose <code>validateDirective</code>.</p>
                <pre class="js">module.exports = directive('data-validate', validateDirective);</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="validate-directive.validateDirective">
                <h3>
                  validate-directive.validateDirective
                </h3>
                <p>Define <code>validateDirective</code>.</p>
                <pre class="js">function validateDirective(scope, el, attr) {

}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="render-module">
          <h2>render</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
          

          <h3>Methods:</h3>
          
            
            
          
          </div>
        </div>
        
        
        <div id="attr-directive-module">
          <h2>attr-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="attr-directive.exports">
                <h3>attr-directive.exports</h3>
                <p>Expose <code>attrDirective</code>.</p>
                <pre class="js">module.exports = attrDirective;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="attr-directive.attrDirective">
                <h3>
                  attr-directive.attrDirective
                </h3>
                <p>A one-liner.</p>
                <pre class="js">function attrDirective(name) {
  directive('data-' + name, function(scope, el, attr){
    
  });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="directives-module">
          <h2>directives</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="directives.exports">
                <h3>directives.exports</h3>
                <p>Expose <code>towerDirectives</code>.</p>
                <pre class="js">module.exports = towerDirectives;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="directives.towerDirectives">
                <h3>
                  directives.towerDirectives
                </h3>
                <p>A one-liner.</p>
                <pre class="js">function towerDirectives(name) {

}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="markdown-directive-module">
          <h2>markdown-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="markdown-directive.exports">
                <h3>markdown-directive.exports</h3>
                <p>Expose <code>markdownDirective</code>.</p>
                <pre class="js">module.exports = directive('[type=&quot;text/markdown&quot;]', markdownDirective);</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="markdown-directive.markdownDirective">
                <h3>
                  markdown-directive.markdownDirective
                </h3>
                <p>Define <code>markdownDirective</code>.</p>
                <pre class="js">function markdownDirective(scope, el, attr) {
  // XXX: todo
  el.textContent = marked(el.textContent);
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="text-directive-module">
          <h2>text-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="text-directive.exports">
                <h3>text-directive.exports</h3>
                <p>Expose <code>textDirective</code>.</p>
                <pre class="js">module.exports = directive('data-text', textDirective);</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="text-directive.textDirective">
                <h3>
                  text-directive.textDirective
                </h3>
                <p>Define <code>textDirective</code>.</p>
                <pre class="js">function textDirective(scope, el, attr) {

}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="element-directive-module">
          <h2>element-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="element-directive.exports">
                <h3>element-directive.exports</h3>
                <p>Expose <code>elementDirective</code>.</p>
                <pre class="js">module.exports = directive('data-element', elementDirective);</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="element-directive.elementDirective">
                <h3>
                  element-directive.elementDirective
                </h3>
                <p>Define <code>elementDirective</code>.</p>
                <pre class="js">function elementDirective(scope, el, attr) {

}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="content-directive-module">
          <h2>content-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="content-directive.exports">
                <h3>content-directive.exports</h3>
                <p>Expose content directive.</p>
                <pre class="js">module.exports = directive('data-content', contentDirective);</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="content-directive.contentDirective">
                <h3>
                  content-directive.contentDirective
                </h3>
                <p>Content directive.</p>
                <pre class="js">function contentDirective(scope, element, attr) {
  return content(attr.value).init({ parent: scope });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="event-directive-module">
          <h2>event-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="event-directive.eventDirective">
                <h3>
                  event-directive.eventDirective
                </h3>
                <p>Define event directive.</p>
                <pre class="js">function eventDirective(name) {
  if (!name) return all();
  if (directive.has('on-' + name)) return;

  // XXX: refactor to optimize for specific cases.
  directive('on-' + name, function(scope, element, attr){
    function handle(evt) {
      // so it can be used by expression
      scope.attrs.event = evt;
      //if ('change' === name) evt.value = value(element);
      // scope.apply(attr.value, [evt]);
      attr.expression(scope);
      delete scope.attrs.event;
    }

    event.bind(element, name, handle);

    scope.on('remove', function(){
      event.unbind(element, name, handle);
    });
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="event-directive.all">
                <h3>
                  event-directive.all
                </h3>
                <p>Define all event directives.</p>
                <pre class="js">function all() {
  for (var i = 0, n = events.length; i &lt; n; i++) {
    exports(events[i]);
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="style-directive-module">
          <h2>style-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="style-directive.exports">
                <h3>style-directive.exports</h3>
                <p>Expose <code>directive('data-style')</code>.</p>
                <pre class="js">module.exports = directive('data-style', function(scope, element, attr){
  var val = attr.value.split(/ *, */);
  var css = {};
  var i = val.length;
  while (i--) {
    var prop = val[i].split(/ *: */);
    css[prop[0]] = scope.get(prop[1]) || prop[1];
  }
  $(element).css(css);
});</pre>
              </section>
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="component-cookbook-module">
          <h2>component-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="component-cookbook.create">
                <h3>
                  component-cookbook.create
                </h3>
                <p>Example:</p>

<p>tower create component my-component</p>
                <pre class="js">exports.create = function(recipe, args, done){
  var strcase = require('tower-strcase');
  var tinfo = require('tinfo');
  var now = new Date();
  var projectName = args[4];

  var options = require('commander')
    .option('-o, --output-directory [value]', 'Output directory', process.cwd())
    .option('-b --bin [value]', 'include executable', false)
    .option('--component [value]', 'Add component.json', false)
    .option('--package [value]', 'Add package.json', true)
    .option('--travis [value]', 'Add travis.yml', false)
    .option('--namespace [value]', 'Namespace for component')
    .parse(args);
  
  recipe.outputDirectory(options.outputDirectory);

  recipe
    .set('projectName', projectName)
    .set('namespace', options.namespace)
    .set('date', { year: now.getFullYear() })
    .set('strcase', strcase)
    .set('component', options.component)
    .set('componentName', options.namespace ? [options.namespace, projectName].join('/') : projectName)
    .set('pkg', options.package);

  tinfo(function(info){
    recipe
      .set('userRealName', info.name)
      .set('userTwitterName', info.username)
      .set('userGitHubName', info.username)
      .set('userEmail', info.email);

    // ws
    console.log('');

    recipe.directory(projectName, function(){
      if (options.bin) {
        recipe.directory('bin', function(){
          recipe.file(projectName);
          recipe.executable(projectName);
        });
      }

      recipe.template('README.md');

      if (options.component)
        recipe.template('component.json');

      if (options.package)
        recipe.template('package.json');

      recipe.copy('.gitignore');
      recipe.copy('.npmignore');

      if (options.travis)
        recipe.copy('.travis.yml');

      recipe.template('index.js');

      recipe.directory('test', function(){
        recipe.template('index.js', 'test.js');
        if (options.component)
          recipe.template('index.html', 'test.html');
      });
    });
    
    // ws
    console.log('');

    done();
  }, this);
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="cli-module">
          <h2>cli</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="cli.verbs">
                <h3>cli.verbs</h3>
                <p>Verbs to use with recipes.</p>
                <pre class="js">exports.verbs = [
  'build',
  'create',
  'remove',
  'install',
  'uninstall',
  'list',
  'exec',
  'start',
  'stop',
  'connect',
  'enter',
  'shutdown',
  'describe',
  'find',
  'save',
  'show',
  'setup',
  'read',
  'update',
  'bootstrap',
  'clean',
  'clear',
  'help',
  'fetch',
  'add'
];</pre>
              </section>
              
            
              
              
              <section class="property" id="cli.commands">
                <h3>cli.commands</h3>
                <p>List of available commands.</p>
                <pre class="js">exports.commands = [
  'info',
  'server',
  'console',
  'generate',
  'create',
  'remove',
  'list',
  'init',
  'search',
  'publish',
  'watch'
].concat(exports.verbs);</pre>
              </section>
              
            
              
              
              <section class="property" id="cli.aliases">
                <h3>cli.aliases</h3>
                <p>Command aliases.</p>
                <pre class="js">exports.aliases = {
  c: 'console',
  g: 'generate',
  s: 'server',
  'new': 'init',
  generate: 'create',
  shutdown: 'stop',
  rm: 'remove'
  // list: 'find'
};</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="property" id="cli.version">
                <h3>cli.version</h3>
                <p>Tower version.</p>
                <pre class="js">exports.version = version;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="cli.run">
                <h3>
                  cli.run
                </h3>
                <p>Entrance point to running tower commands.</p>
                <pre class="js">exports.run = function(argv){
  var command = argv[2];
  // Shorten the `node app.js server` call to `node app.js`
  if (argv[1].indexOf('.') !== -1) command = 'server';

  if (!command || command.match(/^-/)) command = 'info';
  command = exports.alias(command);

  if (!command || !command.match(new RegExp('^' + exports.commands.join('|') + '$')))
    return unknownCommand(command);

  return exports[command](argv);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.alias">
                <h3>
                  cli.alias
                </h3>
                <p>Get command name from an alias.</p>
                <pre class="js">exports.alias = function(name){
  while (exports.aliases[name])
    name = exports.aliases[name];

  return name;
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="cli.info">
                <h3>
                  cli.info
                </h3>
                <p>tower info</p>
                <pre class="js">exports.info = function(argv){
  console.log([
    '',
    '  Usage: tower &lt;command&gt; &lt;cookbook&gt; [options]',
    '',
    '  Options:',
    '',
    '    -h, --help     output usage information',
    '    -V, --version  output the version number',
    '',
    '  Commands:',
    '',
    '    console                    enter tower interactive console',
    '    info &lt;name&gt; [prop]         output json cookbook information',
    '    create &lt;cookbook&gt; &lt;name&gt;   execute `create` action for cookbook',
    ''
  ].join(&quot;\n&quot;));
  // Make sure the application doesn't load yet, it'll throw errors.
  process.exit();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.init">
                <h3>
                  cli.init
                </h3>
                <p>Create a new app</p>

<p>Example:</p>

<p>tower new app</p>

<p>This is just a special case of executing a recipe.</p>
                <pre class="js">exports.init = function(argv, fn){
  argv.splice(2, 1, 'create', 'app');
  require('tower-cookbook')
    .exec('app', 'create', argv, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.server">
                <h3>
                  cli.server
                </h3>
                <p>XXX: Check if the user is running <code>tower server</code> vs <code>node app.js</code>. We need to load the <code>app.js</code> file<br />tower server</p>
                <pre class="js">exports.server = function(argv){
  var program = command()
    .usage('server [options]')
    .option('-e, --environment [value]', 'sets Tower.env (development, production, test, etc.)', 'development')
    .option('-p, --port &lt;n&gt;', 'port for the application')
    .option('--static', 'disable-watch')
    .option('--single', 'Single page app')
    .option('-v, --version')
    .on('--help', function(){
      console.log([
          '    Examples:'
        , '      tower generate scaffold Post title:string body:text belongsTo:user'
        , '      tower generate model Post title:string body:text belongsTo:user'
      ].join(&quot;\n&quot;));
    }).parse(argv);

  return require('tower-server')(program);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.use">
                <h3>
                  cli.use
                </h3>
                <p>Switch between environment config contexts.</p>
                <pre class="js">exports.use = function(argv){

};</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.console">
                <h3>
                  cli.console
                </h3>
                <p>Enter interactive console.</p>
                <pre class="js">exports.console = function(argv){
  var options = command()
    .usage('console [options]')
    .option('-e, --env [value]', 'sets Tower.env (development, production, test, etc., default: development)', 'development')
    .option('-s, --sync', 'allows for database operations to run synchronously, via node fibers')
    // .option('-r, --remote')

  require('tower-console')({
    env: options.env,
    sync: !!options.sync
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.search">
                <h3>
                  cli.search
                </h3>
                <p>Search for components people might have created.</p>
                <pre class="js">exports.search = function(){

};</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.publish">
                <h3>
                  cli.publish
                </h3>
                <p>Notify towerjs.org of your component so other people can find it.</p>
                <pre class="js">exports.publish = function(){

};

exports.watch = function(){
  require('tower-fs').watch(process.cwd());
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="cli.recipe">
                <h3>
                  cli.recipe
                </h3>
                <p>Return a function for executing a recipe's action.</p>
                <pre class="js">function recipe(verb) {
  return function(argv, fn) {
    pipeable(function(err, data){
      // [ 'node', '/usr/local/share/npm/bin/tower', 'create', 'recipe', 'my-recipe', '-o', 'tmp' ]
      // XXX: so you can do `tower &lt;verb&gt; .` and have it &lt;verb&gt; the recipe you are currently in.
      // `data` is a JSON string (if from tower) or another string piped from another command.
      if (data) argv.push('--data', data);
      require('tower-cookbook')
        .exec(argv[3], verb, argv, function(){
          process.exit();
        });
    });
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.command">
                <h3>
                  cli.command
                </h3>
                <p>Constructs commander object.</p>
                <pre class="js">function command() {
  return require('commander').version(exports.version());
}

function version() {
  return '0.5.0';
}</pre>
              </section>
              
            
              
              
              <section class="method" id="cli.unknownCommand">
                <h3>
                  cli.unknownCommand
                </h3>
                <p>@api private</p>
                <pre class="js">function unknownCommand(name) {
  // Throw a new error:
  console.error('Command [' + process.argv[2] + '] was not found.');
  process.exit();
}

// Don't run during tests.
if (process.argv[1].match(/tower$/)) exports.run(process.argv);

function complete(){
  //process.stdin.resume();
}

// $ tower list ec2:images -i ami-7539b41c | tower create ec2:instance
function pipeable(fn) {
  var data = '';

  process.stdin.setEncoding('utf8');
  process.stdin
    .on('readable', readable)
    .on('end', function(){
      withPipe(data);
    });

  function readable(){
    var chunk = process.stdin.read();
    if (null === chunk) {
      withoutPipe();
    } else {
      data += chunk;
    }
  }

  // this passes file data
  // $ ./b.js &lt; ./a.js
  // this pipes a to b
  // $ ./a.js | ./b.js
  // this doesn't work (replaces b with a)
  // $ ./a.js &gt; ./b.js
  function withPipe(data) {
    fn(null, data);
  }

  function withoutPipe() {
    fn(null);
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="list-directive-module">
          <h2>list-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="list-directive.exports">
                <h3>list-directive.exports</h3>
                <p>Expose <code>data-list</code> directive.</p>
                <pre class="js">module.exports = directive('data-list', list);</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="list-directive.list">
                <h3>
                  list-directive.list
                </h3>
                <p>List directive.</p>

<ol>
<li>compute new items added that are not visible (so, have array of visible items)</li>
<li>compute which new items will be visible if inserted
(remove ones that won't be visible)</li>
<li>for each new item
<ul><li>if (buffer.length) pop element from buffer, then apply scope</li>
<li>else templateFn.clone(scope)</li></ul></li>
<li>insert new item into DOM at correct position.
(so, basically it has a sorted collection, listening for events)</li>
</ol>
                <pre class="js">function list(_scope, element, attr) {
  var self = this;
  var val = attr.value.split(/ +/);
  element.removeAttribute('data-list');

  if (val.length &gt; 1) {
    var name = val[0];
    var prop = val[2];
  } else {
    var prop = val[0];
  }

  // e.g. todos
  var array = _scope.get(prop);
  var collection;
  if (array instanceof Collection) {
    collection = array;
    array = collection.toArray();
  }
  var fn = template(element);
  var parent = element.parentNode;
  parent.removeChild(element);
  var id = 0;
  var elements = {};

  console.log(array);
  change(array);

  if (collection) {
    //_scope.on('change ' + prop, function(array){
    collection.on('add', function(records){
      change(records);
    });

    collection.on('remove', function(records){
      for (var i = 0, n = records.length; i &lt; n; i++) {
        var attrs = records[i].attrs;
        if (elements[attrs.id]) {
          $(elements[attrs.id]).remove(); 
          delete elements[attrs.id];
        }
      }
    });

    collection.on('reset', function(records){
      for (var key in elements) {
        $(elements[key]).remove();
        delete elements[key];
      }
      change(records);
    }); 
  }

  function change(records) {
    for (var i = 0, n = records.length; i &lt; n; i++) {
      var attrs = { parent: _scope, i: i };
      attrs[name] = records[i];
      var childScope = scope(name || 'anonymous').init(attrs);
      var childElement = fn.clone(childScope);
      elements[id] = childElement;
      $(parent).prepend(childElement);
    }
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="ec2-adapter-module">
          <h2>ec2-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>ec2</code> adapter.</p>
                <pre class="js">module.exports = ec2;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>text</code>.</p>
                <pre class="js">module.exports = text;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>address</code>.</p>
                <pre class="js">module.exports = address;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>group</code>.</p>
                <pre class="js">module.exports = group;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>image</code>.</p>
                <pre class="js">module.exports = image;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>instance</code>.</p>
                <pre class="js">module.exports = instance;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>key</code>.</p>
                <pre class="js">module.exports = key;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>region</code>.</p>
                <pre class="js">module.exports = region;</pre>
              </section>
              
            
              
              
            
              
              
            
          
            
            
              
              
            
          
            
            
              
              
            
          
            
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>snapshot</code>.</p>
                <pre class="js">module.exports = snapshot;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>tag</code>.</p>
                <pre class="js">module.exports = tag;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>volume</code>.</p>
                <pre class="js">module.exports = volume;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="ec2-adapter.exports">
                <h3>ec2-adapter.exports</h3>
                <p>Expose <code>zone</code>.</p>
                <pre class="js">module.exports = zone;</pre>
              </section>
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.ec2">
                <h3>
                  ec2-adapter.ec2
                </h3>
                <p>Define <code>ec2</code> adapter.</p>
                <pre class="js">function ec2(obj) {
  if ('string' === typeof obj) {
    // XXX: perform a simple query.
    // XXX: refactor out to adapter base module.
    // return query().start('ec2.' + obj);
    return query().use('ec2').start('ec2.' + obj);
  } else {
    return adapter('ec2');
  }
}

adapter.api('ec2', ec2);
load(adapter('ec2'));
ec2.action = function(name){
  return stream('ec2.' + name);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.load">
                <h3>
                  ec2-adapter.load
                </h3>
                <p>Wire up the adapter.</p>
                <pre class="js">function load(obj) {</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.connect">
                <h3>
                  ec2-adapter.connect
                </h3>
                <p>Connect to ec2.</p>
                <pre class="js">exports.connect = function(options, fn){
  // XXX: need better way to pass around global variables.
  this.client = aws.createEC2Client(options.key, options.secret, { version: '2013-02-01' });
  if (fn) fn();
}

exports.exec = function(query, fn){
  var topology = new Topology
    , criteria = query.criteria
    , name;

  var action = criteria[criteria.length - 1][1]
    , client = this.client;

  // XXX: this function should just split the criteria by resource/adapter.
  // then the adapter
  for (var i = 0, n = criteria.length; i &lt; n; i++) {
    var criterion = criteria[i];
    switch (criterion[0]) {
      case 'select':
      case 'start':
        // XXX: how to add global variables to all streams?
        topology.stream(name = criterion[1].ns + '.' + action.type, { constraints: [], client: client });
        break;
      case 'constraint':
        topology.streams[name].constraints.push(criterion);
        break;
      case 'action':
        topology.streams[name].data = criterion[1].data;
        break;
    }
  }

  // XXX: need to come up w/ API for adding events before it's executed.
  process.nextTick(function(){
    topology.exec();
  });

  // XXX: need to refactor topology api a little.
  topology.on('data', function(data){
    fn(null, data);
  });

  return topology;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.disconnect">
                <h3>
                  ec2-adapter.disconnect
                </h3>
                <p>Disconnect from ec2.</p>
                <pre class="js">exports.disconnect = function(options, fn){
  delete this.client;
  fn();
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.address">
                <h3>
                  ec2-adapter.address
                </h3>
                <p>Define <code>address</code>.</p>
                <pre class="js">function address(resource) {
  resource
    .attr('city');
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.group">
                <h3>
                  ec2-adapter.group
                </h3>
                <p>Define <code>group</code>.</p>
                <pre class="js">function group(resource) {
  var textPattern = /[a-zA-Z]|[\._\-\:\/\(\)\#\,@\[\]\+\=\&amp;\;\{\}\!\$\*]/g;

  resource('group')
    .attr('name', 'string')
      .validate('present')
      .validate('match', textPattern)
    .attr('description', 'text')
      .validate('present')
      .validate('match', textPattern)
    .attr('vpcId') // VpcId
    .action('find', find)
      .param('name', 'array')
        .alias('n')
        .format('basic', 'GroupName.{i}')
      .param('id', 'array')
        .format('basic', 'GroupId.{i}')
      .param('ownerId', 'string')
        .format('filter', 'owner-id')
      .param('description')
        .format('filter')
      .param('groupName')
        .format('filter', 'group-name')
      .param('protocol')
        .format('filter', 'ip-permission.protocol')
    .action('create', create)
      .attr('name', 'string')
        .alias('n')
        .validate('present')
        .validate('match', textPattern)
      .attr('description', 'text')
        .alias('d')
        .validate('present')
        .validate('match', textPattern)
      .attr('vpcId')
        .alias('v') // VpcId
    .action('update', update)
      // XXX: there are both params and attrs in this case.
      //      you want update specific attributes based on query params.
      // XXX: should combine attributes from action and parent resource.
      // XXX: requires either `groupId` or `groupName`.
      //      how to handle both?
      .param('groupId')
        .format('basic', 'GroupId')
      .param('name')
        .alias('n')
        .format('basic', 'GroupName')
        //.validate('present')
      .param('protocol', [ 'integer' ])
        .alias('i')
        // XXX: this needs to be defined for each `port`
        .format('basic', 'IpPermissions.{i}.IpProtocol')
        // XXX: need way to be able to print validation requirements on cli:
        // &quot;protocol must be in [ 'tcp', 'udp', 'icmp' ]&quot;
        // XXX: validations aren't working
        //.validate('in', [ 'tcp', 'udp', 'icmp' ])
        .validate('present')
      .param('port', 'array')//['range'])
        .alias('p')
        .format('basic', [ 'IpPermissions.{i}.FromPort', 'IpPermissions.{i}.ToPort' ])
      //.param('toPort', 'array')
      //  .format('basic', 'IpPermissions.{i}.toPort')
    .action('remove', remove)
      .param('name')
        .alias('n')
        .format('basic', 'GroupName');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.find">
                <h3>
                  ec2-adapter.find
                </h3>
                <p>Query security groups.</p>
                <pre class="js">function find(ctx, data, fn) {
  var params = serializer.queryParams(ctx);
  
  ctx.client.call('DescribeSecurityGroups', params, function(err, result){
    ctx.emit('data', deserializeFind(result));
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.create">
                <h3>
                  ec2-adapter.create
                </h3>
                <p>Create a security group.</p>
                <pre class="js">function create(ctx, data, fn) {
  var data = ctx.data[0] || {};
  var params = serializer.queryParams(ctx, data);

  ctx.client.call('CreateSecurityGroup', params, function(err, result){
    ctx.emit('data', result);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.update">
                <h3>
                  ec2-adapter.update
                </h3>
                <p>Update (configure) a security group.</p>

<p>Sometimes this will be called in <code>create</code><br />b/c Amazon has a weird API and doesn't let you<br />set certain properties on <code>create</code>.</p>

<p>Example: Open ports 22, 80, and 8080 (for working w/ node.js)</p>

<p>ec2('security-group').update({ ports: [ 22, 80, 8080 ] });</p>
                <pre class="js">function update(ctx, data, fn) {
  var data = ctx.data &amp;&amp; ctx.data[0] || {};
  var params = serializer.queryParams(ctx, data);

  ctx.client.call('AuthorizeSecurityGroupIngress', params, function(err, result){
    ctx.emit('data', result);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.remove">
                <h3>
                  ec2-adapter.remove
                </h3>
                <p>Remove security group(s).</p>
                <pre class="js">function remove(ctx, data, fn) {
  var params = serializer.queryParams(ctx);

  ctx.client.call('DeleteSecurityGroup', params, function(err, result){
    ctx.emit('data', result);
    fn();
  });
}

function deserializeFind(result) {
  if (!(result.securityGroupInfo &amp;&amp; result.securityGroupInfo.item))
    return [];

  var items = result.securityGroupInfo.item;

  return items;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.image">
                <h3>
                  ec2-adapter.image
                </h3>
                <p>Define <code>image</code>.</p>
                <pre class="js">function image(resource) {
  resource('image')
    .attr('instanceId') // InstanceId, required
    .attr('name') // Name, required, 3-128 alphanumeric characters, parenthesis (()), commas (,), slashes (/), dashes (-), or underscores(_)
    .attr('description', 'text') // Description, 255 characters
    .attr('noReboot', 'boolean', false) // NoReboot
    .action('find', find)
      .param('executable-by', 'array').format('basic', 'ExecutableBy') // ExecutableBy.n
      .param('imageId', 'array')
        .format('basic', 'ImageId')
        .alias('i') // ImageId.n
        // .to(array('ImageId'))
      .param('owner-id', 'array')
        .alias('o') // Owner.n, amazon | aws-marketplace | self | AWS account ID | all
      .param('architecture', 'string')
        .alias('a')
        .format('filter')
        // .type('filter')
        .validate('in', [ 'i386', 'x86_64' ])
      // .format | .sanitize =&gt; need way to customize these per adapter/action.
      // .validate
      .param('description', 'text')
        .alias('d')
        .format('filter')
      // how to handle this, since this is both a query param and a filter?
      // .param('image-id')
      .param('image-type', 'string')
        .alias('t') // machine | kernel | ramdisk
      .param('public', 'boolean')
        .alias('p')
        .format('filter', 'is-public')
      .param('kernel-id', 'string')
        .alias('k')
        .format('filter')
      .param('manifest-location')
        .alias('l')
        .format('filter')
      // XXX: need a way to easily see what these variables mean.
      //      maybe a cli command that checks for comments/descriptions.
      // The name of the AMI (provided during image creation).
      .param('name')
        .alias('n')
        .format('filter')
      .param('owner-alias')
        .format('filter')
      .param('platform')
        .alias('p')
        .format('filter')
      .param('product-code')
        .alias('c')
        .format('filter')
      .param('product-code-type').format('filter', 'product-code.type')
      .param('ramdisk-id').format('filter')
      .param('root-device-name').format('filter')
      .param('root-device-type').format('filter')
      .param('status', 'string')
        .alias('s')
        .format('filter', 'state') // available | pending | failed
      //  .as('state', 'filter') // .to('state', 'filter') | .alias('state', 'filter')
      //  .validate('in', [ 'available', 'pending', 'failed' ])
    .action('create', create)
    .action('remove', remove);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.find">
                <h3>
                  ec2-adapter.find
                </h3>
                <p>Query images.</p>

<p>Since there is no way to paginate with Amazon's API,<br />this saves all the results to a file, which it will<br />only update if <code>.where('recent').eq(true)</code> is set.</p>

<p>Query Parameters:<br /> - is-public<br /> - kernel-id</p>
                <pre class="js">function find(ctx, data, fn) {
  var params = serializer.queryParams(ctx);

  ctx.client.call('DescribeImages', params, function(err, result){
    if (err) return fn(err);
    ctx.emit('data', deserializeFind(result));
    fn();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.create">
                <h3>
                  ec2-adapter.create
                </h3>
                <p>Create an image.</p>
                <pre class="js">function create(ctx, data, fn) {
  var options = ctx.data[0] || {};

  var params = {
      'InstanceId': options.id
    , 'Name': options.name
  };

  ctx.ec2.call('InstanceId', params, function(err, result){
    ctx.emit('data', result);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.register">
                <h3>
                  ec2-adapter.register
                </h3>
                <p>@see <a href='http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-RegisterImage.html'>http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-RegisterImage.html</a></p>
                <pre class="js">function register(ctx, data, fn) {

}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.remove">
                <h3>
                  ec2-adapter.remove
                </h3>
                <p>Deregister image.</p>
                <pre class="js">function remove(ctx, data, fn) {
  // ctx.client.call('DeregisterImage');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.deserializeFind">
                <h3>
                  ec2-adapter.deserializeFind
                </h3>
                <p>Create an image.</p>
                <pre class="js">function deserializeFind(result) {
  var items = result.imagesSet.item;
  if (items &amp;&amp; !Array.isArray(items)) items = [items];

  return items;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.instance">
                <h3>
                  ec2-adapter.instance
                </h3>
                <p>Define <code>instance</code>.</p>
                <pre class="js">function instance(resource) {
  resource('instance')
    //.id('id')
    .attr('status')
    .action('find', find)
      .param('id', 'array')
        .format('basic', 'InstanceId')
      .param('architecture', 'string')
        .format('filter')
        .validate('in', [ 'i386', 'x86_64' ])
      .param('availability-zone', 'string')
        .format('filter')
      // The public DNS name of the instance.
      .param('dns-name')
        .format('filter')
      // The ID of the security group for the instance. If the instance is in a VPC, use instance.group-id instead.
      .param('group-id')
        .format('filter')
      // The ID of the image used to launch the instance.
      .param('image-id')
        .format('filter')
      .param('status')
        .format('filter', 'instance-state-name')
        .validate('in', [ 'pending', 'running', 'shutting-down', 'terminated', 'stopping', 'stopped' ])
        // 0 (pending) | 16 (running) | 32 (shutting-down) | 48 (terminated) | 64 (stopping) | 80 (stopped)
      .param('type')
        .format('filter', 'instance-type')
      .param('key')
        .format('filter', 'key-name')
      .param('isWindows')
        .format('filter', 'platform')
    .action('create', create)
      .attr('imageId')
        .alias('i')
        .format('basic', 'ImageId')
      .attr('min', 'integer', 1)
        .format('basic', 'MinCount')
      .attr('max', 'integer', 1)
        .format('basic', 'MaxCount')
      .attr('key')
        .alias('k')
        .format('basic', 'KeyName')
      .attr('groupName', 'array')
        .alias('g')
        .format('basic', 'SecurityGroup.{i}')
    .action('remove', remove)
      .param('imageId')
        .alias('i')
        .format('basic', 'ImageId')
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.find">
                <h3>
                  ec2-adapter.find
                </h3>
                <p>Find an image.</p>
                <pre class="js">function find(ctx, data, fn) {
  var params = serializer.queryParams(ctx);

  ctx.client.call('DescribeInstances', params, function(err, result){
    ctx.emit('data', deserializeFind(result));
    fn();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.create">
                <h3>
                  ec2-adapter.create
                </h3>
                <p>Create an image.</p>
                <pre class="js">function create(ctx, data, fn) {
  var data = ctx.data[0] || {};
  var params = serializer.queryParams(ctx, data);

  ctx.client.call('RunInstances', params, function(err, result){
    ctx.emit('data', deserializeCreate(result));
    fn();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.remove">
                <h3>
                  ec2-adapter.remove
                </h3>
                <p>Remove an image.</p>

<p>"terminate" removes it, but it won't get removed from the list for 10-20 minutes.</p>
                <pre class="js">function remove(ctx, data, fn) {
  var data = ctx.data[0] || {};
  var params = serializer.queryParams(ctx, data);

  ctx.client.call('TerminateInstances', params, function(err, result){
    ctx.emit('data', deserializeCreate(result));
    fn(); // fn(err, result);
  });
}

function deserializeFind(result) {
  var items = result.reservationSet.item;
  if (!Array.isArray(items)) items = [items];

  var instances = []
    , instance;

  if (!items.length) return instances;

  items.forEach(function(i){
    instance = {
        id: i.instancesSet.item.instanceId
      , imageId: i.instancesSet.item.imageId
      , status: i.instancesSet.item.instanceState.name
      , host: i.instancesSet.item.dnsName
      , createdAt: i.instancesSet.item.launchTime
      , ip: i.instancesSet.item.ipAddress
      , architecture: i.instancesSet.item.architecture
      , type: i.instancesSet.item.instanceType
      , placement: i.instancesSet.item.placement.availabilityZone
    };

    instances.push(instance);
  });

  return instances;
}

function deserializeCreate(result) {
  if (!result.instancesSet) return [];
  var items = result.instancesSet.item;
  if (!Array.isArray(items)) items = [items];

  var instances = []
    , instance;

  if (!items.length) return instances;

  items.forEach(function(i){
    instance = {
        id: i.instanceId
      , imageId: i.imageId
      , status: (i.instanceState || i.currentState).name
      , host: i.dnsName
      , createdAt: i.launchTime
      , ip: i.ipAddress
      , architecture: i.architecture
      , type: i.instanceType
      , placement: i.placement &amp;&amp; i.placement.availabilityZone
    };

    instances.push(instance);
  });

  return instances;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.key">
                <h3>
                  ec2-adapter.key
                </h3>
                <p>Define the <code>key</code> resource and actions.</p>
                <pre class="js">function key(resource){
  resource('key')
    .attr('name', 'string')
      //.format('basic', 'KeyName')
      .validate('present')
    .attr('body', 'text')
      //.format('basic', 'PublicKeyMaterial')
    .action('find', find)
      .param('name', [ 'string' ])
        .format('basic', 'KeyName.{i}')
    .action('create', create)
      .attr('name')
        .alias('n')
        .format('basic', 'KeyName')
        .validate('present')
      .attr('body', 'text')
        .alias('b')
        .format('basic', 'PublicKeyMaterial')
    .action('remove', remove)
      .param('name')
        .alias('n')
        .format('basic', 'KeyName');
        //.validate('present');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.find">
                <h3>
                  ec2-adapter.find
                </h3>
                <p>@see <a href='http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeKeyPairs.html'>http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeKeyPairs.html</a></p>
                <pre class="js">function find(ctx, data, fn) {
  var params = serializer.queryParams(ctx);
  
  ctx.client.call('DescribeKeyPairs', params, function(err, result){
    ctx.emit('data', deserializeFind(result));
    fn();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.create">
                <h3>
                  ec2-adapter.create
                </h3>
                <p>Create a public/private key.</p>
                <pre class="js">function create(ctx, data, fn) {
  var data = ctx.data[0] || {};
  var params = serializer.queryParams(ctx, data);
  var method = null != params.body ? 'ImportKeyPair' : 'CreateKeyPair';
  console.log(method, params)
  ctx.client.call(method, params, function(err, result){
    ctx.emit('data', deserializeCreate(result));
    fn();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.remove">
                <h3>
                  ec2-adapter.remove
                </h3>
                <p>Remove key pair.</p>
                <pre class="js">function remove(ctx, data, fn) {
  var params = serializer.queryParams(ctx);

  ctx.client.call('DeleteKeyPair', params, function(err, result){
    ctx.emit('data', deserializeCreate(result));
    fn();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.load">
                <h3>
                  ec2-adapter.load
                </h3>
                <p>Import key pair.</p>

<p>XXX: somehow tie this into <code>create</code></p>
                <pre class="js">function load(ctx, data, fn) {

}

function deserializeFind(result) {
  if (result.keySet &amp;&amp; result.keySet.item) {
    return Array.isArray(result.keySet.item)
      ? result.keySet.item
      : [result.keySet.item];
  }

  return [];
}

function deserializeCreate(result) {
  // keyName: 'x',
  // keyFingerprint: 'y',
  // keyMaterial: 'z'
  return result;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.region">
                <h3>
                  ec2-adapter.region
                </h3>
                <p>Define <code>region</code>.</p>
                <pre class="js">function region(resource) {
  resource('region')
    .action('find', find);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.find">
                <h3>
                  ec2-adapter.find
                </h3>
                <p>Find a region.</p>
                <pre class="js">function find(context, data, fn) {

}</pre>
              </section>
              
            
          
            
            
              
              
            
          
            
            
              
              
              <section class="method" id="ec2-adapter.create">
                <h3>
                  ec2-adapter.create
                </h3>
                <p>Create a route.</p>
                <pre class="js">function create(context, data, fn) {

}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.snapshot">
                <h3>
                  ec2-adapter.snapshot
                </h3>
                <p>Define <code>snapshot</code>.</p>

<p>Snapshots are "backups" of EC2 instances.</p>
                <pre class="js">function snapshot(resource) {
  resource
    .action('find', find)
    .action('create', create)
    .action('remove', remove);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.find">
                <h3>
                  ec2-adapter.find
                </h3>
                <p>Query snapshots.</p>
                <pre class="js">function find(context, data, fn) {
  var params = {};

  context.ec2.call('DescribeSnapshots', params, function(err, result){
    context.emit('data', result);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.create">
                <h3>
                  ec2-adapter.create
                </h3>
                <p>Create a snapshot (backup) of an EC2 instance.</p>
                <pre class="js">function create(context, data, fn) {
  var options = context.data[0] || {};

  var params = {
      'VolumeId': options.volumeId
  };

  context.ec2.call('CreateSnapshot', params, function(err, result){
    context.emit('data', result);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.remove">
                <h3>
                  ec2-adapter.remove
                </h3>
                <p>Remove snapshot.</p>
                <pre class="js">function remove(context, data, fn) {
  var options = context.data[0] || {};

  var params = {
      'SnapshotId': options.id
  };

  context.ec2.call('DeleteSnapshot', params, function(err, result){
    context.emit('data', result);
  });
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.tag">
                <h3>
                  ec2-adapter.tag
                </h3>
                <p>Define <code>tag</code>.</p>
                <pre class="js">function tag(resource) {
  resource
    .action('find', find)
    .action('create', create)
    .action('remove', remove);
}

function find(ctx, data, fn) {

}

function create(ctx, data, fn) {
  
}

function remove(ctx, data, fn) {
  
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.volume">
                <h3>
                  ec2-adapter.volume
                </h3>
                <p>Define <code>volume</code>.</p>
                <pre class="js">function volume(resource) {
  resource('volume')
    .action('find', find)
    .action('create', create)
    .action('remove', remove);
}

function find(ctx, data, fn) {

}

function create(ctx, data, fn) {
  
}

function remove(ctx, data, fn) {
  
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-adapter.zone">
                <h3>
                  ec2-adapter.zone
                </h3>
                <p>Define <code>zone</code>.</p>
                <pre class="js">function zone(resource) {
  resource('zone')
    .attr('name', 'string')
    .attr('status', 'string')
    .attr('region', 'string')
    .action('find', find);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-adapter.find">
                <h3>
                  ec2-adapter.find
                </h3>
                <p>Find availability zones.</p>
                <pre class="js">function find(context, data, fn){

}</pre>
              </section>
              
            
          
            
            
              
              
              <section class="method" id="ec2-adapter.queryParams">
                <h3>
                  ec2-adapter.queryParams
                </h3>
                <p>General function for converting constraints<br />into ec2 query parameters.</p>
                <pre class="js">exports.queryParams = function(ctx, data){
  var args = []
    , params = {}
    , attrs = ctx.constructor.params
    , attr;

  // XXX: need to refactor
  ctx.client = require('tower-adapter')('ec2').client;

  ctx.constraints.forEach(function(constraint, i){
    attr = attrs[constraint[1].left.attr];
    // XXX: should it throw an error if an invalid param is passed?
    var val = constraint[constraint.length - 1].right.value;
    if (attr &amp;&amp; attr.format) args.push(attr.format(ctx, attr, val));
  });

  // since EC2 handles all the same way.
  if (data) {
    var attrs = ctx.constructor.attrs;
    for (var key in data) {
      attr = attrs[key];</pre>
              </section>
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="mongodb-cookbook-module">
          <h2>mongodb-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="mongodb-cookbook.enter">
                <h3>
                  mongodb-cookbook.enter
                </h3>
                
                <pre class="js">exports.enter = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('mongo', [], { stdio: 'inherit' });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="neo4j-cookbook-module">
          <h2>neo4j-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="neo4j-cookbook.start">
                <h3>
                  neo4j-cookbook.start
                </h3>
                
                <pre class="js">exports.start = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('neo4j', ['start'], { stdio: 'inherit' });
  process.on('SIGINT', function(){
    child.kill();
  });
};

exports.stop = function(recipe, args){
  var exec = require('child_process').exec;
  exec('ps -ax | grep &quot;neo4j&quot;', function(err, stdin, stderr){
    var killed = false;
    stdin.split('\n').forEach(function(line){
      // XXX: parse pid, should be separate module
      if (line.match(/^(\d+).+neo4j.server/)) {
        exec('kill -s INT ' + RegExp.$1);
        killed = true;
      }
    });
    if (!killed) console.log(&quot;No neo4j process found to kill.&quot;);
  });
};

exports.connect = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('neo4j-shell', [], { stdio: 'inherit' });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="ec2-cookbook-module">
          <h2>ec2-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-cookbook.objects">
                <h3>ec2-cookbook.objects</h3>
                <p>Sub-cookbooks.</p>

<p>XXX: Maybe they're called <code>commands</code>?</p>
                <pre class="js">exports.objects = [
  'instance',
  'credentials',
  'image',
  'group'
];</pre>
              </section>
              
            
              
              
              <section class="property" id="ec2-cookbook.aliases">
                <h3>ec2-cookbook.aliases</h3>
                <p>Alternative names for commands.</p>
                <pre class="js">exports.aliases = {
  instances: 'instance',
  server: 'instance',
  images: 'image',
  keys: 'key',
  groups: 'group',
  'security-group': 'group',
  'sg': 'group'
}</pre>
              </section>
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="ec2-cookbook.exports">
                <h3>ec2-cookbook.exports</h3>
                <p>Expose <code>connect</code>.</p>
                <pre class="js">module.exports = connect;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="ec2-cookbook.exports">
                <h3>ec2-cookbook.exports</h3>
                <p>Expose <code>query</code>.</p>
                <pre class="js">module.exports = query;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.ec2">
                <h3>
                  ec2-cookbook.ec2
                </h3>
                <p>EC2 Cookbook.</p>
                <pre class="js">function ec2(name){
  return require.resolve('./resources/models/' + name);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.help">
                <h3>
                  ec2-cookbook.help
                </h3>
                <p>List commands for EC2 cookbooks.</p>
                <pre class="js">exports.help = function(recipe, args){
  var txt = [''];
  exports.objects.forEach(function(name){
    var cookbook = require(ec2(name));
    for (var verb in cookbook)
      txt.push(['    $', 'tower', verb, name].join(' '));
  });
  txt.push('');
  console.log(txt.join('\n'));
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.command">
                <h3>
                  ec2-cookbook.command
                </h3>
                <p>Define a command.</p>

<p>XXX: tmp refactoring of some stuff.</p>
                <pre class="js">function command() {
  var options = new commander.Command;
  options
    .option('-k, --key [value]')
    .option('-s, --secret [value]')
    .option('-c, --credentials [value]', 'Path to credentials JSON')
    .option('-f, --format', 'The console output format')
  options.query = exports.query;
  options.attrs = exports.attrs;
  options.params = exports.params;
  return options;
}

exports.query = function(query){
  this._query = query;
  return this;
};

// XXX: this method is a hack for now, need to refactor.
exports.params = function(params, resource){
  var query = this._query;
  var self = this;

  // descriptions
  var text = require('tower-ec2-adapter/lib/locale');

  function parse(key) {
    return function(val) {
      query.where(key).eq(val);
    }
  }

  // convert params into options, which when parsed
  // get appended to the `query`.

  if (params) {
    params.forEach(function(param){
      // XXX: maybe this goes into `param`/`attr`.
      var desc = text.has(resource + '.' + param.name)
        ? text(resource + '.' + param.name).render()
        : '';

      var args = [buildName(param), desc, parse(param.name)];
      self.option.apply(self, args);
    });
  }

  return this;
}

// XXX: this method is a hack for now, need to refactor.
exports.attrs = function(attrs, action, args){
  var query = this._query;
  var self = this;
  var data;

  function parse(key) {
    return function(val) {
      data[key] = val;
    }
  }

  if (attrs &amp;&amp; action != 'find') {
    // where values will be applied.
    // XXX: maybe could be `resource` so it sanitizes.
    data = {};

    attrs.forEach(function(attr){
      var args = [buildName(attr), '', parse(attr.name)];
      self.option.apply(self, args);
    });
  }

  this.parse(args);

  // XXX: move out
  if (data) {
    query.action(action, data)
  } else {
    query.action(action);
  }

  return this;
}

function buildName(param) {
  // XXX: simplify
  var alias = param.aliases &amp;&amp; param.aliases[0];

  // define option, e.g. `-u, --user`
  var name = '';
  if (alias) name += '-' + alias + ', ';
  name += '--' + param.name;

  switch (param.type) {
    case 'boolean':
      break;
    default:
      name += ' &lt;value&gt;';
      break;
  }

  return name;
}

// XXX: how?
//if ('function' == typeof options.help)
//  options.help();</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.connect">
                <h3>
                  ec2-cookbook.connect
                </h3>
                <p>Wire up EC2 credentials.</p>
                <pre class="js">function connect(options, fn) {
  var ec2 = require('tower-ec2-adapter');

  if (!options.key &amp;&amp; !options.secret) {
    // try to load from databag.
    var path = require('path');

    var data = require(path.join(process.env.HOME, '.tower/config/data.json'));
    //recipe.exec('ec2:credentials', 'show', [], function(data){
    //  console.log('here', data)
    //});
    ec2().connect(data['aws'], fn);
  } else {
    // XXX: make `connect` top-level
    ec2().connect({ key: options.key, secret: options.secret }, fn);
  }
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.query">
                <h3>
                  ec2-cookbook.query
                </h3>
                <p>General query abstraction for cookbook.</p>
                <pre class="js">function query(resource, action, args, fn) {
  // lazy-load
  var stream = ec2.action(resource + '.' + action);
  var q = ec2(resource);
  
  var options = command()
    .query(q)
    .params(stream.params, 'ec2.' + resource)
    .attrs(stream.attrs, action, args);

  // need a better way
  if (args[args.length - 1].match(/^(?:-h|--help)$/)) {
    options.help();
  }

  connect(options, function(){
    q.exec(function(err, records){
      console.log(records);
      fn();
    });
  });
}</pre>
              </section>
              
            
          
            
            
              
              
            
          
            
            
              
              
              <section class="method" id="ec2-cookbook.read">
                <h3>
                  ec2-cookbook.read
                </h3>
                <p>Show credentials.</p>

<p>Returns JSON of api key and secret (encrypted).</p>
                <pre class="js">exports.read = function(recipe, args, fn){
  var fs = require('fs');
  var path = require('path');

  var data = require(path.join(process.env.HOME, '.tower/config/data.json'));
  // console.log(data['aws']);
  fn(null, data);
  //recipe
  //  .data('ec2')
  //  .find(fn);
};

exports.show = exports.read;</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.add">
                <h3>
                  ec2-cookbook.add
                </h3>
                <p>Adds API key/secret to data bag.</p>
                <pre class="js">exports.add = function(recipe, args){
  var options = require('commander')
    .option('-k, --key &lt;value&gt;')
    .option('-s, --secret &lt;value&gt;')
    .parse(args);

  var fs = require('fs');
  var path = require('path');
  var dataPath = path.join(process.env.HOME, '.tower/config/data.json');

  var data = require(dataPath);
  data['aws'] = { key: options.key, secret: options.secret };
  fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
  //recipe
  //  // save data to global data bag.
  //  .data({ ec2: { key: options.key, secret: options.secret }})
  //  .save();
};

exports.save = exports.write = exports.add;</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.remove">
                <h3>
                  ec2-cookbook.remove
                </h3>
                <p>Remove API key/secret from data bag.</p>
                <pre class="js">exports.remove = function(recipe, args){
  
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.list">
                <h3>
                  ec2-cookbook.list
                </h3>
                <p>List security groups.</p>
                <pre class="js">exports.list = function(recipe, args, fn){
  query('group', 'find', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.create">
                <h3>
                  ec2-cookbook.create
                </h3>
                <p>Create a security group.</p>
                <pre class="js">exports.create = function(recipe, args, fn){
  query('group', 'create', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.update">
                <h3>
                  ec2-cookbook.update
                </h3>
                <p>Update a security group.</p>

<p>Example:</p>

<p>$ tower update ec2:group -n hello -p 22,80,8080 -i tcp,tcp,tcp</p>
                <pre class="js">exports.update = function(recipe, args, fn){
  query('group', 'update', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.remove">
                <h3>
                  ec2-cookbook.remove
                </h3>
                <p>Remove a security group.</p>
                <pre class="js">exports.remove = function(recipe, args, fn){
  query('group', 'remove', args, fn);
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.list">
                <h3>
                  ec2-cookbook.list
                </h3>
                <p>List images.</p>
                <pre class="js">exports.list = function(recipe, args, fn){
  query('image', 'find', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.create">
                <h3>
                  ec2-cookbook.create
                </h3>
                <p>Create an image.</p>
                <pre class="js">exports.create = function(recipe, args, fn){
  query('image', 'find', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.remove">
                <h3>
                  ec2-cookbook.remove
                </h3>
                <p>Remove (terminate) an image.</p>
                <pre class="js">exports.remove = function(recipe, args, fn){
  console.log('Not implemented');
  query('image', 'find', args, fn);
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.list">
                <h3>
                  ec2-cookbook.list
                </h3>
                <p>List instances.</p>
                <pre class="js">exports.list = function(recipe, args, fn){
  query('instance', 'find', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.create">
                <h3>
                  ec2-cookbook.create
                </h3>
                <p>Create a new instance.</p>

<p>Example:</p>

<p>$ tower create ec2:instance --role web-server</p>
                <pre class="js">exports.create = function(recipe, args, fn){
  query('instance', 'create', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.remove">
                <h3>
                  ec2-cookbook.remove
                </h3>
                <p>Remove an instance.</p>
                <pre class="js">exports.remove = function(recipe, args, fn){
  query('instance', 'remove', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.exec">
                <h3>
                  ec2-cookbook.exec
                </h3>
                <p>SSH into a server, execute command.</p>

<p>$ tower exec ec2:server <name> "node -v"</p>
                <pre class="js">exports.exec = function(recipe, args, fn){
  console.log('Not implemented');
  return;
  // [node, tower, verb, object, keyName, cmd]
  var name = args[4];
  var cmd = args[5];
  // XXX: get ip address from host.
  query('instance', 'find', [ '-n', name ], function(err, instances){
    // XXX: shouldn't return array if only 1?
    var instance = instances[0];
    var host = instance.host;
    var spawn = require('child_process').spawn;
    // XXX: warn if ssh-cookbook is not installed.
    var sshKeyPath = '~/.tower/config/credentials/ec2/' + name + '.pem';
    var args = [
      'enter', 'ssh',
      '--key', sshKeyPath,
      '--exec', cmd,
      '--host', host,
      '--user', 'ubuntu'
    ];

    spawn('tower', args, { stdio: 'inherit' })
      .on('exit', function(){
        fn();
      });
  });
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="ec2-cookbook.list">
                <h3>
                  ec2-cookbook.list
                </h3>
                <p>List public/private keys.</p>
                <pre class="js">exports.list = function(recipe, args, fn){
  query('key', 'find', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.create">
                <h3>
                  ec2-cookbook.create
                </h3>
                <p>Create a public/private key.</p>
                <pre class="js">exports.create = function(recipe, args, fn){
  if ('--data' === args[args.length - 2])
    args[args.length - 2] = '--body';

  console.log(args)

  query('key', 'create', args, fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="ec2-cookbook.remove">
                <h3>
                  ec2-cookbook.remove
                </h3>
                <p>Remove a public/private key.</p>
                <pre class="js">exports.remove = function(recipe, args, fn){
  query('key', 'remove', args, fn);
};</pre>
              </section>
              
            
          
            
            
              
              
            
          
            
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="ssh-cookbook-module">
          <h2>ssh-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
              <section class="method" id="ssh-cookbook.enter">
                <h3>
                  ssh-cookbook.enter
                </h3>
                <p>SSH into an instance.</p>
                <pre class="js">exports.enter = function(recipe, args, fn){
  var fs = require('fs');

  var options = require('commander')
    .option('-k, --key [value]', 'Path to private ssh key')
    .option('-e, --exec [command]', 'Execute a command on remote server', 'pwd')
    .option('-h, --host [value]', 'EC2 host (e.g `ec2-123-123-123-123.compute-1.amazonaws.com`')
    .option('-u, --user [value]', 'EC2 user')
    .option('-p, --port [value]', 'EC2 port', 22)
    .parse(args);

  if (!options.key || !fs.existsSync(options.key))
    throw new Error('Path to private key `' +  options.key + '` does not exist');

  // XXX: how to do this with commander?
  if (!options.host)
    throw new Error('Must specify a `--host`');
  if (!options.user)
    throw new Error('Must specify a `--user`');

  var privateKey = fs.readFileSync(options.key);

  var Connection = require('ssh2');

  var c = new Connection();

  c.on('connect', function(){
    console.log('Connection :: connect');
  });
  c.on('ready', function(){
    console.log('Connection :: ready');
    // execute command on server
    c.exec(options.exec, function(err, stream){
      if (err) throw err;
      stream.on('data', function(data, extended){
        process.stdout.write((extended === 'stderr' ? 'STDERR: ' : '')
                    + data);
      });
      stream.on('end', function(){
        console.log('Stream :: EOF');
      });
      stream.on('close', function(){
        console.log('Stream :: close');
      });
      stream.on('exit', function(code, signal){
        console.log('Stream :: exit :: code: ' + code + ', signal: ' + signal);
        c.end();
      });
    });
  });
  c.on('error', function(err){
    console.log('Connection :: error :: ' + err);
  });
  c.on('end', function(){
    console.log('Connection :: end');
  });
  c.on('close', function(had_error){
    console.log('Connection :: close');
  });
  c.connect({
    host: options.host,
    port: parseInt(options.port),
    username: options.user,
    privateKey: privateKey
  });
};</pre>
              </section>
              
            
          
            
            
              
              
              <section class="method" id="ssh-cookbook.create">
                <h3>
                  ssh-cookbook.create
                </h3>
                <p>Create an SSH public/private key pair.</p>

<p>XXX: Only supports RSA now, just need to add options.</p>
                <pre class="js">exports.create = function(recipe, args, fn){
  // $ tower create ssh:key -g
  if (!args[4]) {
    console.log('Pass in the name of your key');
    process.exit();
  }

  var path = require('path');
  var filePath = path.join(process.env.HOME, '.tower/config/credentials', args[4]);
  var spawn = require('child_process').spawn;
  var args = [ '-t', 'rsa', '-f', filePath ]//, '-C', args[5]]; // -C is a comment
  var child = spawn('ssh-keygen', args, { stdio: 'inherit' })
  child.on('exit', fn);
};

// list ssh keys (local or remote)
exports.list = function(){
  var fs = require('fs')
    , path = require('path');

  var dir = path.join(process.env.HOME, '.tower/config/credentials');
  var names = fs.readdirSync(dir).filter(function(name){
    return name.match(/\.pub$/);
  });
  console.log(names.join('\n'));
};

exports.remove = function(){
  
};

exports.copy = function(){
  // pbcopy &lt; ~/.ssh/id_rsa.pub
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="workstation-cookbook-module">
          <h2>workstation-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="workstation-cookbook.create">
                <h3>workstation-cookbook.create</h3>
                <p>Alias for <code>setup</code>.</p>
                <pre class="js">exports.create = exports.setup;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="workstation-cookbook.setup">
                <h3>
                  workstation-cookbook.setup
                </h3>
                <p>Setup local workstation.</p>
                <pre class="js">exports.setup = function(recipe, args){
  var options = require('commander')
    .parse(args);

  var path = require('path');

  recipe.outputDirectory(process.env.HOME);
  recipe.logPath(function(filePath, relativeTo){
    return path.join('~', path.relative(process.env.HOME, filePath));
  });

  recipe.directory('.tower', function(){
    recipe.template('README.md');
    recipe.directory('config', function(){
      recipe.template('data.json');
      // XXX: or `env.json`?
      recipe.template('attributes.json');
      recipe.template('cookbooks.json');
      // for storing ssh keys
      recipe.directory('credentials');
      // for storing production web-server roles.
      recipe.directory('roles');
    });
  });
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="workstation-cookbook.teardown">
                <h3>
                  workstation-cookbook.teardown
                </h3>
                <p>Remove the workstation.</p>
                <pre class="js">exports.teardown = function(recipe, args){
  // XXX: maybe it opens to the line of code,
  //      so it's easier to contribute a recipe.
  console.log('Not implemented');
};

exports.remove = exports.teardown;</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="stream-module">
          <h2>stream</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="stream.stream">
                <h3>
                  stream.stream
                </h3>
                <p>Find or create a stream by <code>name</code>.</p>
                <pre class="js">function stream(name, fn) {
  if (exports.collection[name]) return exports.collection[name];
  if (exports.load(name)) return exports.collection[name];</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.Stream">
                <h3>
                  stream.Stream
                </h3>
                <p>Initialize a new <code>Stream</code>.</p>
                <pre class="js">function Stream(options) {
    options || (options = {});

    for (var key in options) this[key] = options[key];

    this.name = name;
    this.inputs = options.inputs || [];
    this.outputs = options.outputs || [];
    Stream.emit('init', this);
  }

  api.init(name, Stream, statics, proto, stream);

  Stream.action = function(x, fn){
    return stream(Stream.ns + '.' + x, fn);
  }

  if ('function' === typeof fn) Stream.on('exec', fn);

  api.dispatch(stream, name, Stream);

  return Stream;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="stream.ns">
                <h3>
                  stream.ns
                </h3>
                <p>Extend the <code>stream</code> API under a namespace.</p>
                <pre class="js">exports.ns = function(ns){
  function stream(name, fn) {
    return exports(ns + '.' + name, fn);
  }

  api.extend(stream, exports);

  stream.exists = function(name){
    return exports.exists(ns + '.' + name);
  }

  return stream;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.load">
                <h3>
                  stream.load
                </h3>
                <p>Lazy-load.</p>
                <pre class="js">exports.load = function(name, path){
  return 1 === arguments.length
    ? load(exports, name)
    : load.apply(load, [exports].concat(Array.prototype.slice.call(arguments)));
};</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.exists">
                <h3>
                  stream.exists
                </h3>
                <p>Check if <code>stream</code> exists by <code>name</code>.</p>
                <pre class="js">exports.exists = function(name){
  // try lazy loading
  if (undefined === exports.collection[name])
    return !!exports.load(name);

  return !!exports.collection[name];
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="stream.api">
                <h3>
                  stream.api
                </h3>
                <p>Setup the DSL API for a library.</p>

<p>This is called once per "apiFn method".</p>
                <pre class="js">function api(apiFn, statics, proto){
  apiFn.collection = [];

  // mixin `Emitter`

  Emitter(apiFn);
  Emitter(statics);
  Emitter(proto);

  apiFn.clear = clear.bind(apiFn);
  apiFn.remove = remove.bind(apiFn);

  return apiFn;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.init">
                <h3>
                  stream.init
                </h3>
                <p>Add base behavior to a <code>Function</code>.</p>

<p>This is called inside the API method.</p>
                <pre class="js">exports.init = function(name, fn, statics, proto, apiFn){
  fn.id = name;

  // namespace

  fn.ns = name.replace(/\.\w+$/, '');

  // statics

  for (var key in statics) fn[key] = statics[key];

  // prototype

  fn.prototype = {};
  fn.prototype.constructor = fn;
  
  for (var key in proto) fn.prototype[key] = proto[key];

  apiFn.collection[name] = fn;
  apiFn.collection.push(fn);

  return apiFn;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.dispatch">
                <h3>
                  stream.dispatch
                </h3>
                <p>Emit events for the <code>name</code>,<br />so that external libraries can add extensions.</p>
                <pre class="js">exports.dispatch = function(apiFn, name, fn){
  var parts = name.split('.');

  for (var i = 1, n = parts.length + 1; i &lt; n; i++) {
    apiFn.emit('define ' + parts.slice(0, i).join('.'), fn);
  }

  apiFn.emit('define', fn);

  return apiFn;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.extend">
                <h3>
                  stream.extend
                </h3>
                <p>Scope the <code>constructorFn</code> names under a namespace.</p>
                <pre class="js">exports.extend = function(childApi, parentApi){
  // XXX: copy functions?
  for (var key in parentApi) {
    if ('function' === typeof parentApi[key])
      childApi[key] = parentApi[key];
  }
  return childApi;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.clear">
                <h3>
                  stream.clear
                </h3>
                <p>Clear API behavior.</p>
                <pre class="js">function clear(){
  // remove all listeners
  this.off();

  while (this.collection.length)
    this.remove(this.collection.pop());

  return this;
}

function remove(val, i){
  var emitter = this.collection[val] || val;
  emitter.off();
  delete this.collection[emitter.id];
  // XXX: delete from collection array.
}</pre>
              </section>
              
            
          
            
            
              
              
              <section class="method" id="stream.noop">
                <h3>
                  stream.noop
                </h3>
                <p>Module dependencies.</p>
                <pre class="js">var noop = function(){}; // XXX: temp until async emitter.</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.exec">
                <h3>
                  stream.exec
                </h3>
                <p>Execute the stream.</p>
                <pre class="js">exports.exec = function(data, fn){
  this.constructor.emit('exec', this, data, fn || noop);
  // XXX: need to handle with/without cases.
  //if (fn) fn();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.open">
                <h3>
                  stream.open
                </h3>
                <p>Open the stream.</p>
                <pre class="js">exports.open = function(data, fn){
  // XXX: refactor
  if (this.constructor.hasListeners('open'))
    this.constructor.emit('open', this, data, fn || noop);
  if (this.hasListeners('open'))
    this.emit('open', fn || noop);

  if (!this.hasListeners('open') &amp;&amp; !this.constructor.hasListeners('open'))
    fn();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="stream.close">
                <h3>
                  stream.close
                </h3>
                <p>Close the stream.</p>
                <pre class="js">exports.close = function(fn){
  this.constructor.emit('close', this, fn);
  this.emit('close', fn);
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="cookbook-module">
          <h2>cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="cookbook.lookupDirectories">
                <h3>cookbook.lookupDirectories</h3>
                <p>Cookbook lookup paths.</p>
                <pre class="js">exports.lookupDirectories = [
  fs.join(process.cwd(), 'cookbooks'),
  fs.join(process.cwd(), 'lib/cookbooks'),
  fs.join(process.env.HOME, '.tower/node_modules'),
  fs.join(__dirname, 'examples')
];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="cookbook.create">
                <h3>
                  cookbook.create
                </h3>
                <p>Example:</p>

<p>tower create cookbook my-cookbook</p>
                <pre class="js">exports.create = function(recipe, args){
  var options = parseArgs(args)
    , projectName = args[4];

  recipe.outputDirectory(options.outputDirectory);
  recipe.set('projectName', projectName);
  recipe.set('strcase', require('tower-strcase'));
  recipe.directory(projectName, function(){
    recipe.template('index.js', 'cookbook.js');
    recipe.template('package.json');
    recipe.template('.gitignore');
    recipe.template('.npmignore');
    recipe.template('README.md', 'README.md');
    recipe.directory('templates');
  });
}

exports.remove = function(recipe, args){
  var options = parseArgs(args);
  recipe.outputDirectory(options.outputDirectory);
  recipe.removeDirectory(args[4]);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="cookbook.install">
                <h3>
                  cookbook.install
                </h3>
                <p>Install a cookbook into $HOME/.tower/node_modules</p>
                <pre class="js">exports.install = function(recipe, args){
  var path = require('path');
  var projectName = args[4];

  process.chdir(path.join(process.env.HOME, '.tower'));

  var spawn = require('child_process').spawn;
  
  spawn('npm', ['install', projectName], { stdio: 'inherit' })
    .on('exit', function(){
      // XXX: need to update the recipe so it looks in node_modules.
    });
}

function parseArgs(args) {
  var options = require('commander')
    .option('-o, --output-directory [value]', 'Output directory', process.cwd())
    .parse(args);

  return options;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="cookbook.find">
                <h3>
                  cookbook.find
                </h3>
                <p>Lookup a single cookbook.</p>

<p>This is resolved from the command line.</p>
                <pre class="js">exports.find = function(name, directories){
  var parts = name.split(':');
  var key = parts.shift();
  var cookbook;

  // XXX: cache
  //var paths = findOrCreateCookbookPaths();
  //if (paths &amp;&amp; paths[key]) {
  //  
  //}

  directories || (directories = exports.lookupDirectories);

  // XXX: should cache this in ~/.tower/config/packages.json or something.
  directories.forEach(function(directory){
    fs.directoryPathsSync(directory).forEach(function(path){
      var pkg = fs.join(path, 'package.json');
      pkg = fs.existsSync(pkg) &amp;&amp; require(pkg);

      if (pkg &amp;&amp; key === pkg.cookbook) {
        cookbook = require(path);
        // namespace
        cookbook.ns = pkg.cookbook;
        // XXX: where templates are.
        cookbook.sourcePath = fs.join(path, 'templates');
      }

      return !cookbook;
    });

    return !cookbook; // exit if one was found.
  });

  if (!cookbook) {
    console.log('Cookbook [' + name + '] not found.')
    process.exit();
  }

  // nested cookbook.
  if (parts.length) {
    name = parts.join(':');
    if (cookbook.aliases) {
      while (cookbook.aliases[name])
        name = cookbook.aliases[name];
    }
    // XXX: cache these paths, for faster lookup later.
    cookbook = require(cookbook(name));
  }

  return cookbook;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="cookbook.exec">
                <h3>
                  cookbook.exec
                </h3>
                <p>Execute <code>action</code> on recipe <code>name</code>.</p>
                <pre class="js">exports.exec = function(name, action, args, fn){
  var cookbook = exports.find(name);
  var method = cookbook[action];

  if (!method) {
    console.log('Cookbook [' + name + '] action [' + action + '] is not defined.');
    process.exit();
  }
  
  // XXX: handle source path again.
  var recipe = new Recipe(cookbook.sourcePath);

  // XXX: for nested methods, handle callback.
  if (3 === method.length)
    method.call(recipe, recipe, args, fn || noop);
  else {
    method.call(recipe, recipe, args);
    if (fn) fn();
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="cookbook.findCookbookPaths">
                <h3>
                  cookbook.findCookbookPaths
                </h3>
                <p>Creates ~/.tower/config/cookbooks.json.</p>

<p>XXX: We should probably generalize <code>cookbooks.json</code><br />     to include more packages.</p>
                <pre class="js">function findCookbookPaths() {
  // XXX: refactor
  var path = fs.join(process.env.HOME, '.tower');
  if (!fs.existsSync(path)) fs.mkdirSync(path);
  path = fs.join(path, 'config');
  if (!fs.existsSync(path)) fs.mkdirSync(path);
  path = fs.join(path, 'cookbooks.json');
  if (fs.existsSync(path)) return fs.readFileSync(path);
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="recipe-module">
          <h2>recipe</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="recipe.exports">
                <h3>recipe.exports</h3>
                <p>Expose <code>Recipe</code>.</p>
                <pre class="js">module.exports = Recipe;

Recipe.logging = true;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="recipe.Recipe">
                <h3>
                  recipe.Recipe
                </h3>
                <p>Instantiate a new <code>Recipe</code>.</p>
                <pre class="js">function Recipe(sourcePath) {
  this._locals = {};
  this.context = [];
  this.sourcePath = sourcePath;
  this.targetPath = process.cwd();
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="recipe.set">
                <h3>
                  recipe.set
                </h3>
                <p>@api public</p>
                <pre class="js">Recipe.prototype.set = function(key, val){
  this._locals[key] = val;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.get">
                <h3>
                  recipe.get
                </h3>
                <p>@api public</p>
                <pre class="js">Recipe.prototype.get = function(key){
  return this._locals[key];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.exists">
                <h3>
                  recipe.exists
                </h3>
                <p>Check if file exists.</p>
                <pre class="js">Recipe.prototype.exists = function(filePath){
  return fs.existsSync(filePath);
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="recipe.removeFile">
                <h3>
                  recipe.removeFile
                </h3>
                <p>Remove file from the target directory.</p>
                <pre class="js">Recipe.prototype.removeFile = function(filePath){
  filePath = this.toOutputPath(filePath)
  fs.removeFileSync(filePath);
  this.log('remove', filePath);
  return this;
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="recipe.template">
                <h3>
                  recipe.template
                </h3>
                <p>Create a new file from a template (ejs currently).</p>
                <pre class="js">Recipe.prototype.template = function(targetPath, templatePath){
  var sourcePath = this.toInputPath(templatePath || targetPath)
    , content = fs.readFileSync(sourcePath).toString()
    , locals = this._locals;

  locals.filename = sourcePath;

  content = require('ejs').render(content, locals);

  delete locals.filename;

  this.createFile(targetPath || templatePath, content);
  return this;
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="recipe.removeDirectory">
                <h3>
                  recipe.removeDirectory
                </h3>
                <p>Remove directory recursively if it exists.</p>
                <pre class="js">Recipe.prototype.removeDirectory = function(directoryPath){
  directoryPath = this.toOutputPath(directoryPath);

  if (fs.existsSync(directoryPath)) {
    fs.removeDirectoryRecursiveSync(directoryPath); 
    this.log('remove', directoryPath);
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.executable">
                <h3>
                  recipe.executable
                </h3>
                <p>Make a file executable (defaults to chmod 755).</p>
                <pre class="js">Recipe.prototype.executable = function(filePath, chmod){
  fs.chmodSync(this.toOutputPath(filePath), chmod || 0755);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.exec">
                <h3>
                  recipe.exec
                </h3>
                <p>Create and run a recipe from within the currently executing recipe.</p>
                <pre class="js">Recipe.prototype.exec = function(name, action, args, fn){
  // XXX: pass the locals through
  require('child_process')
    .spawn('tower', [action, name].concat(args), { stdio: 'inherit' })
    .on('exit', fn);

  return this;
};

Recipe.prototype.download = function(){
  
};

Recipe.prototype.upload = function(){

};

// http://reiddraper.com/first-chef-recipe/
Recipe.prototype.package = function(){
  return this;
};

Recipe.prototype.service = function(name, fn){
  return this;
};

Recipe.prototype.path = function(){
  return this;
};

Recipe.prototype.source = function(){
  return this;
};

Recipe.prototype.owner = function(){
  return this;
};

Recipe.prototype.group = function(){
  return this;
};

Recipe.prototype.mode = function(){
  return this;
};

Recipe.prototype.notifies = function(){
  return this;
};

Recipe.prototype.bash = function(){
  return this;  
};

Recipe.prototype.cwd = function(){
  return this;
};

Recipe.prototype.recursive = function(){
  return this;
};

Recipe.prototype.cwd = Recipe.prototype.cd;

Recipe.prototype.code = function(){

};

Recipe.prototype.env = function(){

};

Recipe.prototype.action = function(){

};

Recipe.prototype.platform = function(){

};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.include">
                <h3>
                  recipe.include
                </h3>
                <p>Invoke another recipe.</p>
                <pre class="js">Recipe.prototype.include = function(name){
  //this.invoke
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.user">
                <h3>
                  recipe.user
                </h3>
                <p>Create a system user.</p>
                <pre class="js">Recipe.prototype.user = function(){
  return this;
};

Recipe.prototype.gid = function(){
  return this;
};

Recipe.prototype.home = function(){
  return this;
};

Recipe.prototype.shell = function(){
  return this;
};

Recipe.prototype.comment = function(){
  return this;
};

Recipe.prototype.supports = function(){
  return this;
};

// http://docs.opscode.com/resource_remote_file.html
Recipe.prototype.rights = function(){

};

Recipe.prototype.checksum;

Recipe.prototype.content = function(){

};

// get or set data from ~/.tower/config/data
Recipe.prototype.data = function(obj){
  //if ('string' === obj)
  return this;
};

Recipe.prototype.log = function(action, filePath){
  if (!Recipe.logging) return;

  cursor
    .write('  ')
    [colors[action]]()
    .write(action)
    .reset()
    .write(' : ' + (this._logPath || fs.relativePath)(filePath, process.cwd()))
    .write('\n')
    .reset();
};

Recipe.prototype.logPath = function(fn){
  this._logPath = fn;
  return;
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="recipe.inputDirectory">
                <h3>
                  recipe.inputDirectory
                </h3>
                <p>Set the <code>sourcePath</code> in a chainable way.</p>
                <pre class="js">Recipe.prototype.inputDirectory = function(filePath){
  this.sourcePath = filePath;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.outputDirectory">
                <h3>
                  recipe.outputDirectory
                </h3>
                <p>Set the <code>targetPath</code> in a chainable way.</p>
                <pre class="js">Recipe.prototype.outputDirectory = function(filePath){
  this.targetPath = filePath;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.toInputPath">
                <h3>
                  recipe.toInputPath
                </h3>
                <p>Convert a file path to the absolute path in the source directory.</p>
                <pre class="js">Recipe.prototype.toInputPath = function(filePath){
  return fs.join(this.sourcePath, filePath);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="recipe.toOutputPath">
                <h3>
                  recipe.toOutputPath
                </h3>
                <p>Convert a file path to the absolute path in the target directory.</p>
                <pre class="js">Recipe.prototype.toOutputPath = function(filePath){
  return fs.join(this.targetPath, filePath);
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="server-router-module">
          <h2>server-router</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="server-router.route">
                <h3>server-router.route</h3>
                <p>Expose <code>route</code>.</p>
                <pre class="js">exports.route = route;</pre>
              </section>
              
            
              
              
              <section class="property" id="server-router.Context">
                <h3>server-router.Context</h3>
                <p>Expose <code>Context</code>.</p>
                <pre class="js">exports.Context = Context;</pre>
              </section>
              
            
              
              
              <section class="property" id="server-router.callbacks">
                <h3>server-router.callbacks</h3>
                <p>Expose <code>callbacks</code>.</p>
                <pre class="js">exports.callbacks = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="server-router.router">
                <h3>
                  server-router.router
                </h3>
                <p>Routing middleware.</p>
                <pre class="js">function router(req, res, fn) {
  exports.dispatch(new Context({
    path: req.path
    req: req,
    res: res,
    event: 'request',
  }), fn);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.dispatch">
                <h3>
                  server-router.dispatch
                </h3>
                <p>Dispatch the given <code>context</code>.</p>
                <pre class="js">exports.dispatch = function(context, fn){
  if ('string' === typeof context)
    context = new Context({ path: context });

  series(exports.callbacks, context, function(err){
    if (err &amp;&amp; fn) fn(err);
  });

  return exports;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.clear">
                <h3>
                  server-router.clear
                </h3>
                <p>Clear routes and callbacks.</p>
                <pre class="js">exports.clear = function(){
  exports.callbacks.length = 0;
  route.routes.length = 0;
  return exports;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.start">
                <h3>
                  server-router.start
                </h3>
                <p>Listen to port.</p>
                <pre class="js">exports.start = function(port, fn){

}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.stop">
                <h3>
                  server-router.stop
                </h3>
                <p>Stop listening to port.</p>
                <pre class="js">exports.stop = function(fn){

}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.Context">
                <h3>
                  server-router.Context
                </h3>
                <p>Instantiate a new <code>Context</code>.</p>

<p>XXX: Maybe this becomes <code>tower-server-context</code>.</p>
                <pre class="js">function Context(options) {
  options || (options = {});

  for (var key in options) this[key] = options[key];

  var path = options.path;
  var i = path.indexOf('?');
  this.canonicalPath = path;
  this.path = path || '/';
  this.state = {};
  this.state.path = path;
  this.querystring = ~i ? path.slice(i + 1) : '';
  this.pathname = ~i ? path.slice(0, i) : path;
  this.params = [];
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.render">
                <h3>
                  server-router.render
                </h3>
                <p>Render a specific format.</p>
                <pre class="js">Context.prototype.render = function(){
  var req = this.req;
  var res = this.res;
  var next = req.next;
  var formats = this.route.formats;
  var format = req.accepts(this.route.accepts);

  // http://stackoverflow.com/questions/1975416/trying-to-understand-the-vary-http-header
  res.set('Vary', 'Accept');

  if (format) {
    // res.set('Content-Type', normalizeType(key));
    formats[format](req, this, next);
  } else if (formats['*']) {
    formats['*'](this);
  } else {
    var err = new Error('Not Acceptable');
    err.status = 406;
    // err.types = normalizeTypes(keys);
    next(err);
  }

  return this;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.write">
                <h3>
                  server-router.write
                </h3>
                <p>Write to a connection or response.</p>
                <pre class="js">Context.prototype.write = function(string){
  if (this.tcp) {
    this.connection.write([this.event, this.path, string].join(','));
  } else {
    this.res.write(string);
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-router.error">
                <h3>
                  server-router.error
                </h3>
                <p>Example</p>

<p>context.error(404);<br />   context.emit(404);</p>
                <pre class="js">Context.prototype.error = function(code, message){
  // XXX: maybe there is a default handler?
  this.res.send(code, message);
  this.emit(code, message);
};

Context.prototype.send = function(code, message){
  if (this.tcp) {
    //this.connection.write([this.event, this.path, string].join(','));
  } else {
    this.res.send.apply(this.res, arguments);
  }
};

// redirect
// cookie
// clearCookie
// location
// download
// sendfile
// jsonp
// links
// status

// maybe do this?
Context.prototype.__defineGetter__('ip', function(){
  return this.req.ip;
});</pre>
              </section>
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="validator-module">
          <h2>validator</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="validator.collection">
                <h3>validator.collection</h3>
                <p>All validators in the order they were defined.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="validator.exports">
                <h3>validator.exports</h3>
                <p>Expose <code>validators</code>.</p>
                <pre class="js">module.exports = validators;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="validator.validator">
                <h3>
                  validator.validator
                </h3>
                <p>Get or set a validator function.</p>
                <pre class="js">function validator(name, fn) {
  if (undefined === fn) return exports.collection[name];

  exports.collection[name] = fn;
  exports.collection.push(fn);
  exports.emit('define', name, fn);
  
  return fn;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="validator.has">
                <h3>
                  validator.has
                </h3>
                <p>Check if validator exists.</p>
                <pre class="js">exports.has = function(name){
  return !!exports.collection[name];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="validator.ns">
                <h3>
                  validator.ns
                </h3>
                <p>Scope validators to a namespace.</p>
                <pre class="js">exports.ns = function(ns){
  return function validator(name, fn) {
    return exports(ns + '.' + name, fn);
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="validator.clear">
                <h3>
                  validator.clear
                </h3>
                <p>Remove all validators.</p>
                <pre class="js">exports.clear = function(){
  var collection = exports.collection;

  exports.off('define');
  for (var key in collection) {
    if (collection.hasOwnProperty(key)) {
      delete collection[key];
    }
  }
  collection.length = 0;
  return exports;
};

validators(exports);</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="validator.validators">
                <h3>
                  validator.validators
                </h3>
                <p>Define basic operators/validators.</p>
                <pre class="js">function validators(validator) {
  validator('eq', function eq(a, b){
    return a === b;
  });

  validator('neq', function neq(a, b){
    return a !== b;
  });

  validator('contains', function contains(a, b){
    return !!~indexof(b, a);
  });

  validator('in', validator('contains'));

  validator('excludes', function nin(a, b){
    return !~indexof(b, a);
  });

  validator('nin', validator('excludes'));

  validator('gte', function gte(a, b){
    return a &gt;= b;
  });

  validator('gt', function gt(a, b){
    return a &gt; b;
  });

  validator('lte', function gte(a, b){
    return a &lt;= b;
  });

  validator('lt', function gt(a, b){
    return a &lt; b;
  });

  validator('match', function match(a, b){
    return !!a.match(b);
  });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="type-module">
          <h2>type</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="type.Type">
                <h3>type.Type</h3>
                <p>Expose <code>Type</code>.</p>
                <pre class="js">exports.Type = Type;</pre>
              </section>
              
            
              
              
              <section class="property" id="type.collection">
                <h3>type.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="type.validator">
                <h3>type.validator</h3>
                <p>Expose <code>validator</code>.</p>
                <pre class="js">exports.validator = validator.ns('type');</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="type.exports">
                <h3>type.exports</h3>
                <p>Expose <code>types</code>.</p>
                <pre class="js">module.exports = types;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="type.type">
                <h3>
                  type.type
                </h3>
                <p>Define or get a type.</p>
                <pre class="js">function type(name, fn) {
  if (undefined === fn &amp;&amp; exports.collection[name])
      return exports.collection[name];

  var instance = new Type(name, fn);
  exports.collection[name] = instance;
  exports.collection.push(instance);
  exports.emit('define', name, instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="type.has">
                <h3>
                  type.has
                </h3>
                <p>Check if validator exists.</p>
                <pre class="js">exports.has = function(name){
  return !!exports.collection[name];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.ns">
                <h3>
                  type.ns
                </h3>
                <p>Scope validators to a namespace.</p>
                <pre class="js">exports.ns = function(ns){
  return function type(name, fn) {
    return exports(ns + '.' + name, fn);
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.clear">
                <h3>
                  type.clear
                </h3>
                <p>Remove all validators.</p>
                <pre class="js">exports.clear = function(){
  var collection = exports.collection;

  exports.off();
  for (var key in collection) {
    if (collection.hasOwnProperty(key)) {
      delete collection[key];
    }
  }
  collection.length = 0;
  return exports;
};

function Type(name, fn) {
  // XXX: name or path? maybe both.
  this.name = name;
  // XXX: or maybe just delegate:
  // this.validator = type.validator.ns(name);
  // that might reduce memory quite a bit.
  // even though it's still only a tiny bit of it.
  this.validators = [];
  // serialization/sanitization function.
  if (fn) this.use(fn);
}

Type.prototype.validator = function(name, fn){
  // XXX: see above, this should probably just
  // be happening in `validator.ns(this.name)`.
  exports.validator(this.name + '.' + name, fn);
  this.validators.push(this.validators[name] = fn);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.use">
                <h3>
                  type.use
                </h3>
                <p>Sanitize functions to pass value through.</p>
                <pre class="js">Type.prototype.use = function(fn){
  (this.sanitizers || (this.sanitizers = [])).push(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.sanitize">
                <h3>
                  type.sanitize
                </h3>
                <p>Sanitize (or maybe <code>serialize</code>).</p>

<p>XXX: maybe rename to <code>cast</code>?</p>
                <pre class="js">Type.prototype.sanitize = function(val){
  if (!this.sanitizers) return val;

  this.sanitizers.forEach(function sanitize(sanitizer){
    val = sanitizer(val);
  });

  return val;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.serializer">
                <h3>
                  type.serializer
                </h3>
                <p>Seralizer object by name.</p>

<p>XXX: Maybe refactor into <code>tower/serializer</code> module.</p>
                <pre class="js">Type.prototype.serializer = function(name){
  this.context = (this.serializers || (this.serializers = {}))[name] = {};
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.to">
                <h3>
                  type.to
                </h3>
                <p>Define how to serialize type from<br />JavaScript to external API/service request format.</p>

<p>XXX: to/out/request/serialize/format/use</p>
                <pre class="js">Type.prototype.to = function(fn){
  // XXX: some way to set a default serializer.
  if (!this.context) this.serializer('default');
  this.context.to = fn;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.from">
                <h3>
                  type.from
                </h3>
                <p>Define how to deserialize type from <br />external API/service request format to JavaScript.</p>

<p>XXX: from/in/response/deserialize</p>
                <pre class="js">Type.prototype.from = function(fn){
  if (!this.context) this.serializer('default');
  this.context.from = fn;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="type.type">
                <h3>
                  type.type
                </h3>
                <p>Bring back to parent context.</p>

<p>XXX: need more robust way to do this across modules.</p>
                <pre class="js">Type.prototype.type = function(name){

};

types(exports);</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="type.types">
                <h3>
                  type.types
                </h3>
                <p>Define basic types and type validators.</p>
                <pre class="js">function types(type) {
  // XXX: type('string').validator('lte')
  // would default to `validator('gte')` if not explicitly defined.
  type('string')
    .use(String)
    .validator('gte', function gte(a, b){
      return a.length &gt;= b.length;
    })
    .validator('gt', function gt(a, b){
      return a.length &gt; b.length;
    });

  type('id');

  type('integer')
    .use(parseInt);

  type('float')
    .use(parseFloat);

  type('decimal')
    .use(parseFloat);

  type('number')
    .use(parseFloat);
    
  type('date')
    .use(parseDate);

  type('boolean')
    .use(parseBoolean);

  type('array')
    // XXX: test? test('asdf') // true/false if is type.
    // or `validate`
    .use(function(val){
      // XXX: handle more cases.
      return isArray(val)
        ? val
        : val.split(/,\s*/);
    })
    .validator('lte', function lte(a, b){
      return a.length &lt;= b.length;
    });

  function parseDate(val) {
    return isDate(val)
      ? val
      : new Date(val);
  }

  function parseBoolean(val) {
    // XXX: can be made more robust
    return !!val;
  }
}

// XXX: refactor to `part`
function isDate(val) {
  return '[object Date]' === Object.prototype.toString.call(val);
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="topology-module">
          <h2>topology</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="topology.stream">
                <h3>topology.stream</h3>
                <p>Expose <code>stream</code> (a <code>tower-stream</code> constructor).</p>
                <pre class="js">exports.stream = stream;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="property" id="topology.Topology">
                <h3>topology.Topology</h3>
                <p>Expose <code>Topology</code>.</p>
                <pre class="js">exports.Topology = topology('default');</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="topology.topology">
                <h3>
                  topology.topology
                </h3>
                <p>Return a <code>Topology</code> by <code>name</code> (lazily).</p>
                <pre class="js">function topology(name) {
  if (lookup[name]) return lookup[name];</pre>
              </section>
              
            
              
              
              <section class="method" id="topology.Topology">
                <h3>
                  topology.Topology
                </h3>
                <p>Initialize a new <code>Topology</code>.</p>
                <pre class="js">function Topology() {
    this.name = name;
    this.streams = [];

    Topology.streams.forEach(function(_stream){
      this.stream(_stream.name, _stream);
    }, this);

    this.emit('init', this);
  }

  // statics
  Topology.toString = function toString(){
    return 'topology(&quot;' + name + '&quot;)';
  }

  Topology.className = Topology.id = name;
  Topology.streams = [];

  for (var key in statics) Topology[key] = statics[key];

  // prototype

  Topology.prototype = {};
  Topology.prototype.constructor = Topology;
  
  for (var key in proto) Topology.prototype[key] = proto[key];

  lookup[name] = Topology;
  constructors.push(Topology);
  topology.emit('define', Topology);

  return Topology;
}</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="topology.clear">
                <h3>
                  topology.clear
                </h3>
                <p>Clear <code>topology.constructors</code>.</p>
                <pre class="js">exports.clear = function(){
  exports.off('define');

  constructors.forEach(function(emitter){
    emitter.off('init');
    emitter.off('data');
    emitter.off('exec');
    emitter.off('close');

    delete lookup[emitter.id];
  });

  constructors.length = 0;
  
  return exports;
};</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="topology.stream">
                <h3>
                  topology.stream
                </h3>
                <p>DSL for building a stream on an instance.</p>
                <pre class="js">exports.stream = function(obj, options){
  if ('string' == typeof obj)
    obj = this.streams[obj] = stream(obj).create(options);
  else
    this.streams[obj.name] = obj;

  this.streams.push(obj);

  return this;
};

exports.exec = function(done){
  // - the last stream emits events to topology.
  // - sort starting from the end finding the inputs.
  var streams = this.streams
    , self = this
    , closed = {};

  function build(node) {
    if (node.outputs.length) {
      var fns = [];
      
      node.outputs.forEach(function(next){
        fns.push(function(data, fn){
          streams[next].exec(data, fn);
          // this fixes it?
          // fn();
        });
      });

      // after all &quot;next&quot; nodes have received the data,
      // then execute the current node again.
      fns.push(function(data, fn){
        node.exec(data, fn);
      });

      node.on('data', function(data){
        series(fns, data);
      });

      node.on('close', function(){
        closed[node.name] = true;
        // should wait until all its inputs are closed first.
        node.outputs.forEach(function(next){
          var allComplete = true;
          streams[next].inputs.forEach(function(input){
            if (!closed[input.name]) {
              allComplete = false;
              return false;
            }
          });

          if (allComplete)
            streams[next].close();
        });
      });
    } else {
      node.on('data', function(data){
        self.emit('data', data);
      });

      node.on('close', function(){
        self.emit('close');
      });
    }
  }

  // 1. build
  // 2. open
  // 3. execute
  // 4. close

  // 1. build
  streams.forEach(build);

  // 2. open
  var open = [];
  streams.forEach(function(node){
    open.push(function(data, fn){
      node.open(data, fn);
    });
  });

  // 3. execute
  open.push(function(){
    // needs to start the first in the series.
    streams.forEach(function(_stream){
      // XXX: need a way to debug when there is no `.on('exec')`
      //      handler for a stream (which means it will hang).
      if (!_stream.inputs.length)
        streams[_stream.name].exec();
    });
  });

  series(open, undefined, done);

  return this;
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="todomvc-module">
          <h2>todomvc</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="todomvc.newTodo">
                <h3>
                  todomvc.newTodo
                </h3>
                <p>Create a new <code>todo</code>.</p>
                <pre class="js">function newTodo(event) {
  var title = $(event.target).val();
  $(event.target).val('');
  // callback b/c adapters can be async (AJAX, sockets, etc.)

  resource('todo').create({ title: title, completed: false }, function(err, todo){
    collection('todos').push(todo);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="todomvc.removeTodo">
                <h3>
                  todomvc.removeTodo
                </h3>
                <p>Remove an existing <code>todo</code>.</p>
                <pre class="js">function removeTodo(todo, i, event) {
  todo.remove(function(){
    collection('todos').remove(todo);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="todomvc.clearCompleted">
                <h3>
                  todomvc.clearCompleted
                </h3>
                <p>Clear all completed todos.</p>
                <pre class="js">function clearCompleted() {
  // view('todo').remove();
  resource('todo').query('completed').remove();
  return false;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="todomvc.toggleCompleted">
                <h3>
                  todomvc.toggleCompleted
                </h3>
                <p>Toggle completed todos.</p>
                <pre class="js">function toggleCompleted(completed) {
  resource('todo').update({ completed: completed }, function(err, records){
    // XXX: for some reason duplicate records are being passed back.
    collection('todos').reset(records);
  });
}

router.start();</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="text-module">
          <h2>text</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="text.text">
                <h3>
                  text.text
                </h3>
                <p>Example:</p>

<p>text('messages')</p>
                <pre class="js">function text(key, val) {
  return undefined === val
    ? (locale[key] || (locale[key] = new Text))
    : (locale[key] = new Text).one(val);
}

exports.has = function(key){
  return !!locale[key];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.locale">
                <h3>
                  text.locale
                </h3>
                <p>Set locale.</p>
                <pre class="js">exports.locale = function(val){
  locale = exports[val] || (exports[val] = {});
  return exports;
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="text.Text">
                <h3>
                  text.Text
                </h3>
                <p>Instantiate a new <code>Text</code>.</p>
                <pre class="js">function Text() {
  this.inflections = [];
}</pre>
              </section>
              
            
              
              
              <section class="method" id="text.past">
                <h3>
                  text.past
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.past = function(string){
  return this.inflection(string, context.count, 'past');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.present">
                <h3>
                  text.present
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.present = function(string){
  return this.inflection(string, context.count, 'present');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.future">
                <h3>
                  text.future
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.future = function(string){
  return this.inflection(string, context.count, 'future');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.tense">
                <h3>
                  text.tense
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.tense = function(string, tense, count){
  return this.inflection(string, count, tense);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.none">
                <h3>
                  text.none
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.none = function(string){
  return this.inflection(string, 'none');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.one">
                <h3>
                  text.one
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.one = function(string){
  return this.inflection(string, 'one');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.other">
                <h3>
                  text.other
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.other = function(string){
  return this.inflection(string, 'other');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.inflection">
                <h3>
                  text.inflection
                </h3>
                <p>@param {String} string</p>
                <pre class="js">Text.prototype.inflection = function(string, count, tense){
  // this isn't quite correct...
  this.inflections.push(context = {
    string: string,
    count: count == null ? 'all' : count,
    tense: tense || 'present'
  });

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="text.render">
                <h3>
                  text.render
                </h3>
                <p>This could be a view on the client.</p>
                <pre class="js">Text.prototype.render = function(options){
  options || (options = {});

  var count = (options.count ? (1 === options.count ? 'one' : 'other') : 'none')
    , tense = options.tense || 'present'
    , key = tense + '.' + count
    , inflections = this.inflections
    , inflection = inflections[0]
    , currScore = 0
    , prevScore = 0;

  for (var i = 0, n = inflections.length; i &lt; n; i++) {
    currScore = 0
      + (count === inflections[i].count ? 1 : 0)
      + (tense === inflections[i].tense ? 1 : 0);

    if (currScore &gt; prevScore) {
      inflection = inflections[i];
      prevScore = currScore; 
    }
  }

  return inflection.string.replace(/\{\{(\w+)\}\}/g, function(_, $1){
    return options[$1];
  });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="strcase-module">
          <h2>strcase</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="strcase.dotCase">
                <h3>
                  strcase.dotCase
                </h3>
                <p>"dot.case"</p>
                <pre class="js">exports.dotCase = function(string) {
  return exports.separatorCase(string, '.');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.classCase">
                <h3>
                  strcase.classCase
                </h3>
                <p>"ClassCase"</p>
                <pre class="js">exports.classCase = function(string) {
  return exports.separatorCase(string, '_').replace(/(?:^|_|\-|\/)(.)/g, function(match, c) {
    return c.toUpperCase();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.namespaceCase">
                <h3>
                  strcase.namespaceCase
                </h3>
                <p>"Namespace.Case"</p>
                <pre class="js">exports.namespaceCase = function(string) {
  return exports.separatorCase(string, '.').replace(/(^|_|\.|\-|\/)(.)/g, function(match, p, c) {
    return p + c.toUpperCase();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.constantCase">
                <h3>
                  strcase.constantCase
                </h3>
                <p>"CONSTANT_CASE"</p>
                <pre class="js">exports.constantCase = function(string) {
  return exports.separatorCase(string, '_').replace(/[a-z]/g, function(c) {
    return c.toUpperCase();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.camelCase">
                <h3>
                  strcase.camelCase
                </h3>
                <p>"camelCase"</p>
                <pre class="js">exports.camelCase = function(string) {
  return exports.separatorCase(string, '_').replace(/[-_\.\/\s]+(.)?/g, function(match, c) {
    return c.toUpperCase();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.titleCase">
                <h3>
                  strcase.titleCase
                </h3>
                <p>"Title Case"</p>
                <pre class="js">exports.titleCase = function(string) {
  return exports.separatorCase(string, ' ').replace(/(?:^|\s)\S/g, function(c) {
    return c.toUpperCase();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.snakeCase">
                <h3>
                  strcase.snakeCase
                </h3>
                <p>"snake_case"</p>
                <pre class="js">exports.snakeCase = function(string) {
  return exports.separatorCase(string, '_');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.pathCase">
                <h3>
                  strcase.pathCase
                </h3>
                <p>"path/case"</p>
                <pre class="js">exports.pathCase = function(string) {
  return this.separatorCase(string, '/');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.paramCase">
                <h3>
                  strcase.paramCase
                </h3>
                <p>"param-case"</p>
                <pre class="js">exports.paramCase = function(string) {
  return this.separatorCase(string, '-');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.separatorCase">
                <h3>
                  strcase.separatorCase
                </h3>
                <p>Generic string transform.</p>
                <pre class="js">exports.separatorCase = function(string, separator) {
  return exports.clean(exports.trim(string), separator).replace(/([a-z\d])([A-Z]+)/g, '$1' + separator + '$2').replace(/[-\.\/\_\s]+/g, separator).toLowerCase();
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.clean">
                <h3>
                  strcase.clean
                </h3>
                <p>Remove non-word characters.</p>
                <pre class="js">exports.clean = function(string, separator) {
  return string.replace(/\W+/g, separator || ' ');
}</pre>
              </section>
              
            
              
              
              <section class="method" id="strcase.trim">
                <h3>
                  strcase.trim
                </h3>
                <p>Remove non-word from the start/end of the string only.</p>
                <pre class="js">exports.trim = function(string) {
  return string.replace(/^\W+|\W+$/g, '');
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="server-module">
          <h2>server</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="server.exports">
                <h3>server.exports</h3>
                <p>Expose <code>server</code>.</p>
                <pre class="js">module.exports = server;</pre>
              </section>
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="server.server">
                <h3>
                  server.server
                </h3>
                <p>Create singleton <code>Server</code>.</p>
                <pre class="js">function server(args) {
  if (instance) return instance;
  return instance = new Server(args);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server.Server">
                <h3>
                  server.Server
                </h3>
                <p>Create a new <code>Server</code>.</p>
                <pre class="js">function Server(args) {
  this.options = {
    port: args.port || 3000,
    environment: args.environment || 'development'
  }

  this.io = sockjs.createServer({
    sockjs_url: 'http://cdn.sockjs.org/sockjs-0.3.min.js',
    log: function() {}
  });

  this.openSockets = [];
  this.callbacks = [];
  this.express = express();
  this.bundle = new Bundle(this);

  this.initializeSockets();

  // Middleware.
  // XXX: Move this into a separate method of it's own.
  this.express.use('/public', express.static(process.cwd() + '/public'));

  this.app = application;

  this.server = http.createServer(this.express);
  this.io.installHandlers(this.server, { prefix: '/echo' });
}

Server.prototype.listen = function(){
  this.server.listen(this.options.port, '0.0.0.0');
  console.log(&quot;Tower is listening on &quot; + this.options.port);
};

Server.prototype.initializeSockets = function(){
  var self = this;

  this.io.on('connection', function(socket){
    socket.send = function(data){
      socket.write(data);
    };

    socket.on('data', function(message){
      console.log(message);
    });

    socket.on('close', function(){
      var open = [];
      for (var i = 0, n = self.openSockets.length; i &lt; n; i++) {
        if (self.openSockets[i] !== socket) {
          open.push(self.openSockets[i]);
        }
      }
      self.openSockets = open;
    });

    self.openSockets.push(socket);

    self.callbacks.forEach(function(fn){
      fn(socket);
    });
  });
};

Server.prototype.emit = function(data){
  this.openSockets.forEach(function(socket){
    socket.send(JSON.stringify(data));
  });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="run-loop-module">
          <h2>run-loop</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="property" id="run-loop.queues">
                <h3>run-loop.queues</h3>
                <p>List of queues. This can be extended<br />by a public method <code>addQueue</code></p>
                <pre class="js">exports.queues = [ 'free' ];</pre>
              </section>
              
            
              
              
              <section class="property" id="run-loop.previous">
                <h3>run-loop.previous</h3>
                <p>Previous RunLoop</p>
                <pre class="js">exports.previous = null;</pre>
              </section>
              
            
              
              
              <section class="property" id="run-loop.current">
                <h3>run-loop.current</h3>
                <p>Current RunLoop</p>
                <pre class="js">exports.current = null;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="run-loop.exports">
                <h3>run-loop.exports</h3>
                <p>Expose <code>Queue</code>.</p>
                <pre class="js">module.exports = Queue;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="run-loop.run">
                <h3>
                  run-loop.run
                </h3>
                <p>Create a new runloop and run a callback within it.</p>
                <pre class="js">function run(target, method) {
  var ret, args;

  exports.begin();

  if (!method) {
    method = target;
    target = null;
  }

  if ('function' !== typeof method) {
    throw new Error(&quot;Parameter passed to `run` must be a function.&quot;);
  }

  args = arguments.length &gt; 2 ? slice.call(arguments, 2) : undefined;

  try {
    if (method) {
      ret = method.apply(target || {}, args || []);
    }
  } finally {
    exports.end();
  }

  return ret;
}</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="run-loop.begin">
                <h3>
                  run-loop.begin
                </h3>
                <p>Begin the run</p>
                <pre class="js">exports.begin = function(){
  if (exports.current)
    exports.previous = exports.current;

  exports.current = new RunLoop(exports.current);
  run.emit('begin', exports.current);
  return exports.current;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="run-loop.end">
                <h3>
                  run-loop.end
                </h3>
                <p>This will trigger the run to begin<br />which will initiate all the queues and<br />flushing of those queues.</p>
                <pre class="js">exports.end = function(){
  try {
    exports.current.flush();
  } finally {
    exports.current = null;
    if (exports.previous) {
      exports.current = exports.previous;
      exports.previous = null;
    }
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="run-loop.clear">
                <h3>
                  run-loop.clear
                </h3>
                <p>Clear the runloop of any queues or instances.</p>
                <pre class="js">exports.clear = function(){
  exports.current = null;
  exports.previous = null;
  exports.queues = ['free'];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="run-loop.deferOnce">
                <h3>
                  run-loop.deferOnce
                </h3>
                <p>Add a new batch to the runloop.</p>
                <pre class="js">exports.deferOnce = function(queueName, target, method){
  if (!method) {
    method = target;
    target = null;
  }

  if ('string' === typeof method) {
    method = target[method];
  }

  var stack = new Error().stack,
    args = arguments.length &gt; 3 ? slice.call(arguments, 3) : undefined;

  if (!exports.current) {
    exports.autorun();
  }

  return exports.current.schedule(queueName, target, method, args, true, stack);
};


exports.defer = function(queueName, target, method){
  if (!method) {
    method = target;
    target = null;
  }

  if ('string' === typeof method) {
    method = target[method];
  }

  var stack = new Error().stack,
    args = arguments.length &gt; 3 ? slice.call(arguments, 3) : undefined;

  if (!exports.current) {
    exports.autorun();
  }

  return exports.current.schedule(queueName, target, method, args, false, stack);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="run-loop.add">
                <h3>
                  run-loop.add
                </h3>
                <p>Add a permanent queue to the 'queue' queue. (need to rephrase it)</p>
                <pre class="js">exports.add = function(queue){
  exports.queues.push(queue);
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="run-loop.autorun">
                <h3>
                  run-loop.autorun
                </h3>
                <p>Autorun Function</p>
                <pre class="js">function autorun() {
  scheduleAutorun = null;
  if (exports.current) {
    exports.flush();
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="run-loop.autorun">
                <h3>
                  run-loop.autorun
                </h3>
                <p>Autorun the RunLoop.</p>

<p>This will create a new RunLoop if non exists.</p>
                <pre class="js">exports.autorun = function() {
  if (exports.current) return;

  exports.create();

  if (!scheduleAutorun) {
    // XXX: http://paulirish.com/2011/requestanimationframe-for-smart-animating/
    // nextTick(autorun, 1)
    scheduleAutorun = setTimeout(autorun, 1);
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="run-loop.RunLoop">
                <h3>
                  run-loop.RunLoop
                </h3>
                <p>Runloop Constructor.</p>
                <pre class="js">function RunLoop(prev) {
  this.queues = {};
  this.queueNames = exports.queues;

  for (var i = 0, n = this.queueNames.length; i &lt; n; i++) {
    var queueName = this.queueNames[i];
    this.queues[queueName] = new Queue(exports, queueName);
  }

}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="run-loop.flush">
                <h3>
                  run-loop.flush
                </h3>
                <p>Flush all the queues.</p>
                <pre class="js">RunLoop.prototype.flush = function() {
  var self = this;

  var queues = this.queues
    , queueNames = this.queueNames
    , queueName
    , queue
    , queueItems
    , priorQueueNameIndex
    , queueNameIndex = 0
    , numberOfQueues = queueNames.length;

  outerloop:
  while (queueNameIndex &lt; numberOfQueues) {
    queueName = queueNames[queueNameIndex];
    queue = queues[queueName];
    queueItems = queue._queue.slice();
    queue._queue = [];

    var options = queue.options,
      before = options &amp;&amp; options.before,
      after = options &amp;&amp; options.after,
      target, method, args,
      queueIndex = 0,
      numberOfQueueItems = queueItems.length;

    if (numberOfQueueItems &amp;&amp; before) {
      before();
    }

    while (queueIndex &lt; numberOfQueueItems) {
      target = queueItems[queueIndex];
      method = queueItems[queueIndex + 1];
      args = queueItems[queueIndex + 2];

      if (typeof method === 'string') {
        method = target[method];
      }

      if (typeof method === 'function') method.apply(target, args);

      queueIndex += 4;
    }
    if (numberOfQueueItems &amp;&amp; after) {
      after();
    }

    if ((priorQueueNameIndex = indexOfPriorQueueWithActions(this, queueNameIndex)) !== -1) {
      queueNameIndex = priorQueueNameIndex;
      continue outerloop;
    }

    queueNameIndex++;
  }

};

function indexOfPriorQueueWithActions(daq, currentQueueIndex) {
  var queueName, queue;

  for (var i = 0, l = currentQueueIndex; i &lt;= l; i++) {
    queueName = daq.queueNames[i];
    queue = daq.queues[queueName];
    if (queue._queue.length) { return i; }
  }

  return -1;
}

// XXX: maybe a `part/next-tick` module?
var nextTick;

if ('undefined' === typeof window) {
  run.nextTick = process.nextTick;
} else {
  run.nextTick = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(fn) {
    window.setTimeout(callback, 1000 / 60);
  };
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="run-loop.Queue">
                <h3>
                  run-loop.Queue
                </h3>
                <p>Instantiate a new <code>Queue</code>.</p>
                <pre class="js">function Queue(daq, name, options) {
  this.daq = daq;
  this.name = name;
  this.options = options || {};
  this._queue = [];
}

Queue.prototype.push = function(target, method, args, stack){
  var queue = this._queue;
  queue.push(target, method, args, stack);
  return {
    queue: this,
    target: target,
    method: method
  };
};

Queue.prototype.pushUnique = function(target, method, args, stack){
  var queue = this._queue;

  for (var i = 0, l = queue.length; i &lt; l; i += 4) {
    currentTarget = queue[i];
    currentMethod = queue[i + 1];

    if (currentTarget === target &amp;&amp; currentMethod === method) {
      queue[i + 2] = args; // replace args
      queue[i + 3] = stack; // replace stack
      return {
        queue: this,
        target: target,
        method: method
      }; // TODO: test this code path
    }
  }

  this._queue.push(target, method, args, stack);
  return {
    queue: this,
    target: target,
    method: method
  };
};

Queue.prototype.cancel = function(actionToCancel){
  var queue = this._queue, currentTarget, currentMethod, i, l;

  for (i = 0, l = queue.length; i &lt; l; i += 4) {
    currentTarget = queue[i];
    currentMethod = queue[i+1];

    if (currentTarget === actionToCancel.target &amp;&amp; currentMethod === actionToCancel.method) {
      queue.splice(i, 4);
      return true;
    }
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="route-module">
          <h2>route</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="route.Route">
                <h3>route.Route</h3>
                <p>Expose <code>Route</code>.</p>
                <pre class="js">exports.Route = Route;</pre>
              </section>
              
            
              
              
              <section class="property" id="route.collection">
                <h3>route.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="route.route">
                <h3>
                  route.route
                </h3>
                <p>Find or define a route.</p>

<p>Examples:</p>

<p>route('/posts', 'posts.index')<br />   route('/posts', 'posts.index', 'GET')<br />   route('/posts', 'posts.index', { method: 'GET' })<br />   route('/posts', { name: 'posts.index', method: 'GET' })<br />   route({ path: '/posts', name: 'posts.index', method: 'GET' })<br />   route('posts.index')</p>
                <pre class="js">function route(name, path, options){
  if (1 === arguments.length &amp;&amp; exports.collection[name])
    return exports.collection[name];

  options || (options = {});

  var fn;

  if ('/' === name.charAt(0)) {
    if ('function' === typeof path)
      fn = path;
    else
      options.name = path;
    options.path = name;
  } else {
    options.name = name;
    options.path = path;
  }

  var instance = new Route(options);
  if (fn) instance.on('request', fn);
  exports.collection[instance.id] = instance;
  exports.collection.push(instance);
  exports.emit('define', instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="route.use">
                <h3>
                  route.use
                </h3>
                <p>Add mixin to exports.collection.</p>
                <pre class="js">exports.use = function(fn){
  mixins.push(fn);
  return exports;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.clear">
                <h3>
                  route.clear
                </h3>
                <p>Remove all exports.collection.</p>
                <pre class="js">exports.clear = function(){
  mixins.length = 0;
  exports.collection.length = 0;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.Route">
                <h3>
                  route.Route
                </h3>
                <p>Instantiate a new <code>Route</code>.</p>
                <pre class="js">function Route(options){
  this.context = this;
  this.id = this.name = options.name;
  this.path = options.path;
  this.method = options.method || 'GET';
  this.regexp = pathToRegexp(
    options.path,
    this.keys = [],
    options.sensitive,
    options.strict);

  this.formats = {};
  this.params = [];
  this.accepts = [];
  this.middlewares = [];
  this.validators = [];
  this.actions = {
    enter: [],
    exit: [],
    request: [],
    connect: [],
    disconnect: []
  };
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="route.param">
                <h3>
                  route.param
                </h3>
                <p>Specify how to parse a URL parameter.</p>

<p>This is roughly equivalent to an attribute<br />on a model, e.g. <code>model('Post').attr(x)</code>.</p>
                <pre class="js">Route.prototype.param = function(name, type, options){
  this.context = this.params[name] = param(name, type, options);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.validate">
                <h3>
                  route.validate
                </h3>
                <p>Define a validator.</p>
                <pre class="js">Route.prototype.validate = function(key, val){
  if (this === this.context)
    // key is a function
    this.validator(key, val)
  else
    // param or attr
    this.context.validator(key, val);

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.validator">
                <h3>
                  route.validator
                </h3>
                <p>Append a validator function to the stack.</p>
                <pre class="js">exports.validator = function(fn){
  // XXX: just a function in this case, but could handle more.
  this.validators.push(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.type">
                <h3>
                  route.type
                </h3>
                <p>The accepted HTTP methods.</p>
                <pre class="js">Route.prototype.type = function(type){
  // maybe it should accept an array?
  this.method = type;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.use">
                <h3>
                  route.use
                </h3>
                <p>Function to process the incoming request.</p>

<p>If called multiple times they will be executed<br />in sequence. They can be asynchronous, just<br />pass a <code>done</code> argument to <code>fn</code>.</p>
                <pre class="js">Route.prototype.use = function(fn){
  this.middlewares.push(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.accept">
                <h3>
                  route.accept
                </h3>
                <p>Accepted <code>Content-Type</code>s.</p>

<p>If not specified, it will accept any.</p>
                <pre class="js">Route.prototype.accept = function(){
  var n = arguments.length
  var accepts = new Array(n);

  for (var i = 0; i &lt; n; i++)
    this.accepts.push(arguments[i]);

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.format">
                <h3>
                  route.format
                </h3>
                <p>Specify how to format the data for the response.</p>

<p>Example:</p>

<p>route('/', 'index')<br />     .format('json', function(content){<br />       content.render({ hello: 'world' });<br />     })</p>
                <pre class="js">Route.prototype.format = function(name, fn){
  if ('function' === typeof name) {
    this.formats['*'] = name;
  } else {
    this.formats[name] = fn;
    this.accepts.push(name);
  }

  return this;
};

Route.prototype.action = function(name){
  var action = this.actions[name] || (this.actions[name] = []);

  for (var i = 1, n = arguments.length; i &lt; n; i++) {
    action.push(arguments[i]);
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.self">
                <h3>
                  route.self
                </h3>
                <p>Clear the chainable API context.</p>
                <pre class="js">Route.prototype.self = function(){
  context = this;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.match">
                <h3>
                  route.match
                </h3>
                <p>Check if this route matches <code>path</code>, if so<br />populate <code>params</code>.</p>
                <pre class="js">Route.prototype.match = function(path, params){
  var keys = this.keys;
  var qsIndex = path.indexOf('?');
  var pathname = ~qsIndex ? path.slice(0, qsIndex) : path;
  var m = this.regexp instanceof RegExp
    ? this.regexp.exec(pathname)
    : new RegExp(this.regexp).exec(pathname);

  if (!m) return false;

  for (var i = 1, n = m.length; i &lt; n; ++i) {
    var key = keys[i - 1];

    var val = 'string' == typeof m[i]
      ? decodeURIComponent(m[i])
      : m[i];

    if (key) {
      params[key.name] = params.hasOwnProperty(key.name) &amp;&amp; undefined !== params[key.name]
        ? params[key.name]
        : val;
    } else {
      params.push(val);
    }
  }

  return true;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.handle">
                <h3>
                  route.handle
                </h3>
                <p>Process a request given a context.</p>
                <pre class="js">Route.prototype.handle = function(context, next){
  if (!this.match(context.path, context.params))
    return next();

  this.parseParams(context);

  context.event || (context.event = 'request');
  context.route = this;

  // TODO: defaults for exports.collection?
  // if (this._enter.length) {
  var self = this;

  try {
    var callbacks = self.middlewares.concat(
      self.actions['enter'],
      self.actions[context.event],
      self.formats['*'] ? [self.formats['*']] : []
    );

    // req.accepted[0].subtype
    // req.ip
    // http://expressjs.com/api.html
    // req.xhr
    // req.subdomains
    // req.acceptedLanguages for tower-inflector
    // TODO: handle multiple formats.
    series(callbacks, context, next, self);
  } catch (e) {
    //self.emit(500, e);
    // Errors that occurs won't be caught but an error
    // within the `series` method will.
    throw e;
    context.error = e;
    series(self.actions['500'], context, function(){}, self)
  }
  
  return true;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="route.parseParams">
                <h3>
                  route.parseParams
                </h3>
                <p>Parse the params from a given context.</p>
                <pre class="js">Route.prototype.parseParams = function(context){
  for (var key in this.params) {
    if (context.params.hasOwnProperty(key)) {
      // XXX: serialize params
      // tower-type
      context.params[key] = parseInt(context.params[key], 10);
    }
  }
};</pre>
              </section>
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="resource-module">
          <h2>resource</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="resource.collection">
                <h3>resource.collection</h3>
                <p>Expose <code>collection</code></p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="resource.validator">
                <h3>resource.validator</h3>
                <p>Expose <code>validator</code>.</p>
                <pre class="js">exports.validator = validator;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="resource.resource">
                <h3>
                  resource.resource
                </h3>
                <p>Create a new resource constructor with the given <code>name</code>.</p>
                <pre class="js">function resource(name) {
  if (exports.collection[name]) return exports.collection[name];
  if (exports.load(name)) return exports.collection[name];</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.Resource">
                <h3>
                  resource.Resource
                </h3>
                <p>Initialize a new resource with the given <code>attrs</code>.</p>
                <pre class="js">function Resource(attrs, storedAttrs) {
    // XXX: if storedAttrs, don't set to dirty
    this.attrs = {};
    this.dirty = {};
    this._callbacks = {};
    attrs = Resource._defaultAttrs(attrs, this);

    for (var key in attrs) {
      if (attrs.hasOwnProperty(key))
        this.set(key, attrs[key], true);
    }

    Resource.emit('init', this);
  }

  Resource.toString = function toString(){
    return 'resource(&quot;' + name + '&quot;)';
  }

  // statics

  Resource.className = name;
  Resource.id = name;
  Resource.attrs = [];
  // optimization
  Resource.attrs.__default__ = {};
  Resource.validators = [];
  Resource.prototypes = [];
  Resource.relations = [];
  Resource._callbacks = {};
  // starting off context
  Resource.context = Resource;

  for (var key in statics) Resource[key] = statics[key];

  // prototype

  Resource.prototype = {};
  Resource.prototype.constructor = Resource;
  
  for (var key in proto) Resource.prototype[key] = proto[key];

  Resource.action = stream.ns(name);
  Resource.id();

  exports.collection[name] = Resource;
  exports.collection.push(Resource);
  exports.emit('define', Resource);
  exports.emit('define ' + name, Resource);

  return Resource;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="resource.use">
                <h3>
                  resource.use
                </h3>
                <p>Mixins.</p>
                <pre class="js">exports.use = function(obj){
  if ('function' === typeof obj) {
    obj.call(exports, statics, proto, exports);
  } else {
    for (var key in obj) statics[key] = obj[key]
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.load">
                <h3>
                  resource.load
                </h3>
                <p>Lazy-load stuff for a particular constructor.</p>

<p>Example:</p>

<p>resource.load('user', require.resolve('./lib/user'));</p>
                <pre class="js">exports.load = function(name, path){
  return 1 === arguments.length
    ? load(exports, name)
    : load.apply(load, [exports].concat(Array.prototype.slice.call(arguments)));
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.ns">
                <h3>
                  resource.ns
                </h3>
                <p>Create a <code>resource</code> function that<br />just prepends a namespace to every key.</p>

<p>This is used to make the DSL simpler,<br />check out the <code>tower-adapter</code> code for an example.</p>
                <pre class="js">exports.ns = function(ns){
  function resource(name) {
    return exports(ns + '.' + name);
  }

  // XXX: copy functions?
  for (var key in exports) {
    if ('function' === typeof exports[key])
      resource[key] = exports[key];
  }
  return resource;
};

// XXX: maybe remove &quot;resource('name')&quot; as toString.
exports.is = function(obj){
  return obj &amp;&amp; obj.constructor.toString().indexOf('resource(') === 0;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.clear">
                <h3>
                  resource.clear
                </h3>
                <p>Clear resources.</p>
                <pre class="js">exports.clear = function(){
  exports.collection.forEach(function(emitter){
    emitter.off('define');
    delete exports.collection[emitter.className];
  });

  exports.collection.length = 0;

  return exports;
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="resource.isNew">
                <h3>
                  resource.isNew
                </h3>
                <p>Check if this resource is new.</p>
                <pre class="js">exports.isNew = function(){
  var key = this.constructor.primaryKey;
  return !this.has(key);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.save">
                <h3>
                  resource.save
                </h3>
                <p>Save and invoke <code>fn(err)</code>.</p>

<p>Events:</p>

<ul>
<li><code>save</code> on updates and saves</li>
<li><code>saving</code> pre-update or save, after validation</li>
</ul>
                <pre class="js">exports.save = function(fn){
  var self = this;
  this.constructor.emit('saving', this);
  this.emit('saving');
  // XXX: needs to somehow set default properties
  // XXX: this itself should probably be
  //      bundled into a topology/stream/action.
  this.validate(function(err){
    if (err) {
      fn(err);
    } else {
      query()
        .select(self.constructor.className)
        .create(self, function(){
          self.dirty = {};
          self.constructor.emit('save', self);
          self.emit('save');
          if (fn) fn(null, self);
        });
    }
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.update">
                <h3>
                  resource.update
                </h3>
                <p>Update and invoke <code>fn(err)</code>.</p>
                <pre class="js">exports.update = function(fn){
  return query()
    .select(this.constructor.className)
    .action('update', this).exec(fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.remove">
                <h3>
                  resource.remove
                </h3>
                <p>Remove the resource and mark it as <code>.removed</code><br />and invoke <code>fn(err)</code>.</p>

<p>Events:</p>

<ul>
<li><code>removing</code> before deletion</li>
<li><code>remove</code> on deletion</li>
</ul>
                <pre class="js">exports.remove = function(fn){
  return query()
    .select(this.constructor.className)
    .where('id').eq(this.get('id'))
    .action('remove').exec(fn);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.isValid">
                <h3>
                  resource.isValid
                </h3>
                <p>Validate the resource and return a boolean.</p>
                <pre class="js">exports.isValid = function(fn){
  this.validate(fn);
  return 0 === this.errors.length;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.validate">
                <h3>
                  resource.validate
                </h3>
                <p>Perform validations.</p>
                <pre class="js">exports.validate = function(fn){
  var self = this;
  this.errors = [];
  this.emit('validating', this);
  // XXX: need single `validateAttributes`
  // XXX: need to store validators by key.
  each(this.constructor.validators, this, function(){
    // self.emit('after-validate', self);
    // self.emit('validated', self);
    self.emit('validate', self);

    if (fn) {
      if (self.errors.length)
        fn(new Error('Validation Error'));
      else
        fn(); 
    }
  });
  return 0 === this.errors.length;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.set">
                <h3>
                  resource.set
                </h3>
                <p>Set attribute value.</p>
                <pre class="js">exports.set = function(name, val, quiet){
  var attr = this.constructor.attrs[name];
  if (!attr) return; // XXX: throw some error, or dynamic property flag?
  if (undefined === val &amp;&amp; attr.hasDefaultValue)
    val = attr.apply(this);
  val = attr.typecast(val);
  var prev = this.attrs[name];
  this.dirty[name] = val;
  this.attrs[name] = val;

  // XXX: this `quiet` functionality could probably be implemented
  //   in a less ad-hoc way. It is currently only used when setting
  //   properties passed in through `init`, such as from a db/adapter
  //   serializing data into a resource, doesn't need to dispatch changes.
  if (!quiet) {
    this.constructor.emit('change ' + name, this, val, prev);
    this.emit('change ' + name, val, prev); 
  }
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.get">
                <h3>
                  resource.get
                </h3>
                <p>Get <code>name</code> value.</p>
                <pre class="js">exports.get = function(name){
  // XXX: need a better way to do this
  if ('id' === name &amp;&amp; this.__id__) return this.__id__;
  if (undefined === this.attrs[name]) {
    var attr = this.defaultAttr(name)
    if (attr)
      return this.attrs[name] = attr.apply(this);
  } else {
    return this.attrs[name];
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.has">
                <h3>
                  resource.has
                </h3>
                <p>Check if <code>attr</code> is present (not <code>null</code> or <code>undefined</code>).</p>
                <pre class="js">exports.has = function(attr){
  return null != this.attrs[attr];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.toJSON">
                <h3>
                  resource.toJSON
                </h3>
                <p>Return the JSON representation of the resource.</p>
                <pre class="js">exports.toJSON = function(){
  return this.attrs;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="resource.defaultAttr">
                <h3>
                  resource.defaultAttr
                </h3>
                <p>Returns <code>Attr</code> definition if it has a default value.</p>
                <pre class="js">exports.defaultAttr = function(name){
  var defaultAttrs = this.constructor.attrs.__default__;
  return defaultAttrs.hasOwnProperty(name) &amp;&amp; defaultAttrs[name];
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="query-module">
          <h2>query</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="query.Query">
                <h3>query.Query</h3>
                <p>Expose <code>Query</code>.</p>
                <pre class="js">exports.Query = Query;</pre>
              </section>
              
            
              
              
              <section class="property" id="query.Constraint">
                <h3>query.Constraint</h3>
                <p>Expose <code>Constraint</code>.</p>
                <pre class="js">exports.Constraint = Constraint;</pre>
              </section>
              
            
              
              
            
              
              
              <section class="property" id="query.collection">
                <h3>query.collection</h3>
                <p>Named queries.</p>
                <pre class="js">exports.collection = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="query.adapters">
                <h3>query.adapters</h3>
                <p>Queryable adapters.</p>
                <pre class="js">exports.adapters = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="query.filter">
                <h3>query.filter</h3>
                <p>Expose <code>filter</code>.</p>
                <pre class="js">exports.filter = filter;</pre>
              </section>
              
            
              
              
              <section class="property" id="query.validate">
                <h3>query.validate</h3>
                <p>Validate query constraints.</p>
                <pre class="js">exports.validate = validateConstraints;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="query.exports">
                <h3>query.exports</h3>
                <p>Expose <code>Constraint</code>.</p>
                <pre class="js">module.exports = Constraint;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="query.exports">
                <h3>query.exports</h3>
                <p>Expose <code>filter</code>.</p>
                <pre class="js">module.exports = filter;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="query.exports">
                <h3>query.exports</h3>
                <p>Expose <code>query-subscriber</code> program.</p>
                <pre class="js">module.exports = subscriber();</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="query.exports">
                <h3>query.exports</h3>
                <p>Expose <code>validate</code>.</p>
                <pre class="js">module.exports = validate;</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
              <section class="property" id="query.exports">
                <h3>query.exports</h3>
                <p>Expose <code>validate</code>.</p>
                <pre class="js">module.exports = validate;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="query.query">
                <h3>
                  query.query
                </h3>
                <p>Wrap an array for chaining query criteria.</p>
                <pre class="js">function query(name) {
  return null == name
    ? new Query
    : exports.collection[name]
      ? exports.collection[name].clone()
      : (exports.collection[name] = new Query(name));
}</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="query.use">
                <h3>
                  query.use
                </h3>
                <p>Make an adapter queryable.</p>

<p>XXX: The main reason for doing it this way<br />     is to not create circular dependencies.</p>
                <pre class="js">exports.use = function(adapter){
  exports.adapters[adapter.name] = adapter;
  exports.adapters.push(adapter);
  return exports;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.Query">
                <h3>
                  query.Query
                </h3>
                <p>Construct a new <code>Query</code> instance.</p>
                <pre class="js">function Query(name) {
  this.name = name;
  this.constraints = [];
  this.selects = [];
  this.sorting = [];
  this.paging = {};
  // XXX: accomplish both joins and graph traversals.
  this.relations = [];
  // this.starts = []
  // this.groupings = {}
}</pre>
              </section>
              
            
              
              
              <section class="method" id="query.use">
                <h3>
                  query.use
                </h3>
                <p>Explicitly tell the query what adapters to use.</p>

<p>If not specified, it will do its best to find<br />the adapter. If one or more are specified, the<br />first specified will be the default, and its namespace<br />can be left out of the resources used in the query<br />(e.g. <code>user</code> vs. <code>facebook.user</code> if <code>query().use('facebook').select('user')</code>).</p>
                <pre class="js">Query.prototype.use = function(name){
  (this.adapters || (this.adapters = []))
    .push('string' === typeof name ? exports.adapters[name] : name);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.start">
                <h3>
                  query.start
                </h3>
                <p>The starting table or record for the query.</p>
                <pre class="js">Query.prototype.start = function(key, val){
  this._start = key;
  (this.starts || (this.starts = [])).push(queryModel(key));
  return this;
};

// XXX: http://docs.neo4j.org/chunked/stable/query-return.html

Query.prototype.returns = function(key){
  this.selects.push(queryAttr(key, this._start));
  return this;
};

Query.prototype.select = function(key){
  this._start = this._start || key;
  this.selects.push(queryAttr(key, this._start));
  return this;
};

Query.prototype.where = function(key){
  this.context = key;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.incoming">
                <h3>
                  query.incoming
                </h3>
                <p>In a graph database, the data pointing <em>to</em> this node.<br />In a relational/document database, the records with<br />a foreign key pointing to this record or set of records.</p>

<p>Example:</p>

<p>query().start('users')<br />     .incoming('friends')<br />     .incoming('friends');</p>
                <pre class="js">Query.prototype.incoming = function(key){
  return this.relation('incoming', key);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.outgoing">
                <h3>
                  query.outgoing
                </h3>
                <p>In a graph database, the data pointing <em>from</em> this node.<br />In a relational/document database, the record this<br />record points to via its foreign key.</p>

<p>Example:</p>

<p>query().start('users')<br />     .outgoing('friends')<br />     .outgoing('friends');</p>
                <pre class="js">Query.prototype.outgoing = function(key){
  return this.relation('outgoing', key);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.as">
                <h3>
                  query.as
                </h3>
                <p>What the variable should be called for the data returned.<br />References the previous item in the query.</p>

<p>Example:</p>

<p>query().start('users').as('people');</p>
                <pre class="js">Query.prototype.as = function(key){
  // XXX: todo
  this.selects[this.selects.length - 1].alias = key;
  return this;
};</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="query.create">
                <h3>
                  query.create
                </h3>
                <p>Create one or more records.</p>

<p>This is different from the other actions <br />in that it can take data (records) as arguments.</p>
                <pre class="js">Query.prototype.create = function(data, fn){
  return this.action('create', data).exec(fn);
};

Query.prototype.update = function(data, fn){
  return this.action('update', data).exec(fn);
};

// XXX

Query.prototype.first = function(fn){
  this.limit(1).action('find').exec(function(err, records){
    if (err) return fn(err);
    fn(err, records[0]);
  });
};

// XXX: default sorting param

Query.prototype.last = function(fn){
  this.limit(1).action('find').exec(function(err, records){
    if (err) return fn(err);
    fn(err, records[0]);
  });
};

Query.prototype.limit = function(val){
  this.paging.limit = val;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.page">
                <h3>
                  query.page
                </h3>
                <p>Specify the page number.</p>

<p>Use in combination with <code>limit</code> for calculating <code>offset</code>.</p>
                <pre class="js">Query.prototype.page = function(val){
  this.paging.page = val;
  return this;
};

Query.prototype.offset = function(val){
  this.paging.offset = val;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.asc">
                <h3>
                  query.asc
                </h3>
                <p>Sort ascending by <code>key</code>.</p>

<p>If the key is a property name, it will<br />be combined with the table/collection name<br />defined somewhere earlier in the query.</p>

<p>Example:</p>

<p>query().start('users').asc('createdAt');</p>
                <pre class="js">Query.prototype.asc = function(key){
  return this.sort(key, 1);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.desc">
                <h3>
                  query.desc
                </h3>
                <p>Sort descending by <code>key</code>.</p>

<p>If the key is a property name, it will<br />be combined with the table/collection name<br />defined somewhere earlier in the query.</p>

<p>Example:</p>

<p>query().start('users').desc('createdAt');</p>
                <pre class="js">Query.prototype.desc = function(key){
  return this.sort(key, -1);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.relation">
                <h3>
                  query.relation
                </h3>
                <p>Pushes a <code>"relation"</code> onto the query.</p>
                <pre class="js">Query.prototype.relation = function(dir, key){
  var attr = queryAttr(key, this._start);
  attr.direction = dir;
  this.relations.push(attr);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.constraint">
                <h3>
                  query.constraint
                </h3>
                <p>Pushes a <code>"constraint"</code> onto the query.</p>
                <pre class="js">Query.prototype.constraint = function(key, op, val){
  this.constraints.push(new Constraint(key, op, val, this._start));
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.action">
                <h3>
                  query.action
                </h3>
                <p>Pushes an <code>"action"</code> onto the query.</p>

<p>Example:</p>

<p>query().action('insert', { message: 'Test' });<br />   query().action('insert', [ { message: 'one.' }, { message: 'two.' } ]);</p>
                <pre class="js">Query.prototype.action = function(type, data){
  this.type = type
  this.data = data ? isArray(data) ? data : [data] : undefined;
  return this;
};

// XXX: only do if it decreases final file size
// each(['find', 'create', 'update', 'delete'])</pre>
              </section>
              
            
              
              
              <section class="method" id="query.sort">
                <h3>
                  query.sort
                </h3>
                <p>Pushes a sort direction onto the query.</p>
                <pre class="js">Query.prototype.sort = function(key, dir){
  var attr = queryAttr(key, this._start);
  attr.direction = key;
  this.sorting.push(attr);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.explain">
                <h3>
                  query.explain
                </h3>
                <p>A way to log the query criteria,<br />so you can see if the adapter supports it.</p>
                <pre class="js">Query.prototype.explain = function(fn){
  this._explain = fn;
  return this;
};

Query.prototype.clone = function(){
  return new Query(this.name);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.exec">
                <h3>
                  query.exec
                </h3>
                <p>XXX: For now, only one query per adapter.<br />     Later, you can query across multiple adapters</p>
                <pre class="js">Query.prototype.exec = function(fn){
  this.context = this._start = undefined;
  var adapter = this.adapters &amp;&amp; this.adapters[0] || exports.adapters[0];
  this.validate(function(){});
  if (this.errors &amp;&amp; this.errors.length) return fn(this.errors);
  if (!this.selects[0]) throw new Error('Must `.select(resourceName)`');
  return adapter.exec(this, fn);
};

Query.prototype.validate = function(fn){
  var adapter = this.adapters &amp;&amp; this.adapters[0] || exports.adapters[0];
  validate(this, adapter, fn);
};

Query.prototype.subscribe = function(fn){
  var self = this;
  subscriber.output(this.type, function(record){
    if (self.test(record)) fn(record);
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="query.query">
                <h3>
                  query.query
                </h3>
                <p>Define another query on the parent scope.</p>

<p>XXX: wire this up with the resource (for todomvc).</p>
                <pre class="js">Query.prototype.query = function(name) {
  return query(name);
};

function queryModel(key) {
  key = key.split('.');

  if (2 === key.length)
    return { adapter: key[0], resource: key[1], ns: key[0] + '.' + key[1] };
  else
    return { resource: key[0], ns: key[0] }; // XXX: adapter: adapter.default()
}</pre>
              </section>
              
            
              
              
              <section class="method" id="query.queryAttr">
                <h3>
                  query.queryAttr
                </h3>
                <p>Variables used in query.</p>
                <pre class="js">function queryAttr(val, start){
  var variable = {};

  val = val.split('.');

  switch (val.length) {
    case 3:
      variable.adapter = val[0];
      variable.resource = val[1];
      variable.attr = val[2];
      variable.ns = variable.adapter + '.' + variable.resource;
      break;
    case 2:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = val[0];
      variable.attr = val[1];
      variable.ns = variable.resource;
      break;
    case 1:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = start;
      variable.attr = val[0];
      variable.ns = variable.resource;
      break;
  }

  variable.path = variable.ns + '.' + variable.attr;

  return variable;
}

function queryValue(val) {
  // XXX: eventually handle relations/joins.
  return { value: val, type: typeof(val) };
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="query.Constraint">
                <h3>
                  query.Constraint
                </h3>
                <p>Instantiate a new <code>Constraint</code>.</p>
                <pre class="js">function Constraint(a, operator, b, start) {
  this.left = left(a, start);
  this.operator = operator;
  this.right = right(b);
}

function left(val, start) {
  var variable = {};

  val = val.split('.');

  switch (val.length) {
    case 3:
      variable.adapter = val[0];
      variable.resource = val[1];
      variable.attr = val[2];
      variable.ns = variable.adapter + '.' + variable.resource;
      break;
    case 2:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = val[0];
      variable.attr = val[1];
      variable.ns = variable.resource;
      break;
    case 1:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = start;
      variable.attr = val[0];
      variable.ns = variable.resource;
      break;
  }
  
  variable.path = variable.ns + '.' + variable.attr;

  return variable;
}

function right(val) {
  // XXX: eventually handle relations/joins.
  return { value: val, type: typeof(val) };
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="query.filter">
                <h3>
                  query.filter
                </h3>
                <p>Filter records based on a set of constraints.</p>

<p>This is a robust solution, hooking into an<br />extendable validation system. If you just need<br />something simple, use the built-in <code>array.filter</code>.</p>
                <pre class="js">function filter(array, constraints) {
  if (!constraints.length) return array;

  var result = [];

  // XXX: is there a more optimal algorithm?
  for (var i = 0, n = array.length; i &lt; n; i++) {
    if (validateConstraints(array[i], constraints))
      result.push(array[i]);
  }

  return result;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="query.subscriber">
                <h3>
                  query.subscriber
                </h3>
                <p>Define a query subscribing program.</p>
                <pre class="js">function subscriber() {
  program('query-subscriber')
    .input('create')
    .input('update')
    .input('remove');

  return program('query-subscriber').init();
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="query.validate">
                <h3>
                  query.validate
                </h3>
                <p>Validate an object against an array of constraints.</p>

<p>To define validations, use the <code>tower-validator</code> module.<br />XXX: that isn't implemented yet, they're in here.</p>
                <pre class="js">function validate(obj, constraints) {
  for (var i = 0, n = constraints.length; i &lt; n; i++) {
    // XXX: obj vs. obj.get
    var constraint = constraints[i]
      , left = obj.get ? obj.get(constraint.left.attr) : obj[constraint.left.attr]
      , right = constraint.right.value;

    if (!validator(constraint.operator)(left, right))
      return false;
  }

  return true;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="query.validate">
                <h3>
                  query.validate
                </h3>
                <p>Add validations to perform before this is executed.</p>

<p>XXX: not implemented.</p>
                <pre class="js">function validate(query, adapter, fn) {
  // XXX: only supports one action at a time atm.
  var constraints = query.constraints;
  var type = query.type;
  query.errors = [];
  // XXX: collect validators for resource and for each attribute.
  // var resourceValidators = resource(criteria[0][1].ns).validators;
  for (var i = 0, n = constraints.length; i &lt; n; i++) {
    var constraint = constraints[i];

    if (!adapter.action.exists(constraint.left.resource + '.' + type))
      continue;

    var stream = adapter.action(constraint.left.resource + '.' + type);
    var param = stream.params &amp;&amp; stream.params[constraint.left.attr];
    if (param &amp;&amp; param.validate(query, constraint)) {
      // $ tower list ec2:group --name 'hello-again-again,hello-again'
      constraint.right.value = param.typecast(constraint.right.value);
    }
  }

  query.errors.length ? fn(query.errors) : fn();
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="program-module">
          <h2>program</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="program.collection">
                <h3>program.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="program.program">
                <h3>
                  program.program
                </h3>
                <p>Get/set <code>Program</code>.</p>
                <pre class="js">function program(name) {
  if (exports.collection[name])
    return exports.collection[name];

  function Program(name) {
    this.inputs = initStreams(Program.inputs);
    this.outputs = initStreams(Program.outputs);
  }

  // statics

  for (var key in statics) Program[key] = statics[key];

  Program.id = name;
  Program.inputs = [];
  Program.outputs = [];
  Program.stream = stream.ns(name);

  // prototype

  Program.prototype = {};
  Program.prototype.constructor = Program;
  
  for (var key in proto) Program.prototype[key] = proto[key];

  exports.collection[name] = Program;
  exports.collection.push(Program);

  return Program;
}

function initStreams(streams) {
  var result = [];
  for (var name in streams) {
    result.push(streams[name].create());
  }
  return result;
}</pre>
              </section>
              
            
          
            
            
              
              
              <section class="method" id="program.input">
                <h3>
                  program.input
                </h3>
                
                <pre class="js">exports.input = function(name, fn){
  if (undefined === fn) return this.inputs[name];
  this.inputs[name] = fn;
  this.inputs.push(fn);
  return this;
};

exports.output = function(name, fn){
  if (undefined === fn) return this.outputs[name];
  this.outputs[name] = fn;
  this.outputs.push(fn);
  return this;
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="param-module">
          <h2>param</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="param.Param">
                <h3>param.Param</h3>
                <p>Expose <code>Param</code>.</p>
                <pre class="js">exports.Param = Param;</pre>
              </section>
              
            
              
              
              <section class="property" id="param.collection">
                <h3>param.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="param.validator">
                <h3>param.validator</h3>
                <p>Expose <code>validator</code>.</p>
                <pre class="js">exports.validator = validator.ns('param');</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="param.exports">
                <h3>param.exports</h3>
                <p>Expose <code>validators</code>.</p>
                <pre class="js">module.exports = validators;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="param.param">
                <h3>
                  param.param
                </h3>
                <p>Get a <code>Param</code>.</p>
                <pre class="js">function param(name, type, options) {
  if (exports.collection[name])
    return exports.collection[name];

  var instance = new Param(name, type, options);
  exports.collection[name] = instance;
  exports.collection.push(instance);
  exports.emit('define', name, instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="param.Param">
                <h3>
                  param.Param
                </h3>
                <p>Instantiate a new <code>Param</code>.</p>
                <pre class="js">function Param(name, type, options){
  if (!type) {
    options = { type: 'string' };
  } else if (isArray(type)) {
    options = { type: 'array' };
    options.itemType = type[0] || 'string';
  } else if ('object' === typeof type) {
    options = type;
  } else {
    options || (options = {});
    options.type = type;
  }

  this.name = name;
  this.type = options.type || 'string';

  if (options.validators) this.validators = [];
  if (options.alias) this.aliases = [ options.alias ];
  else if (options.aliases) this.aliases = options.aliases;

  // XXX: lazily create validators/operators?
  // this.validators = options.validators || [];
  // this.operators = options.operators || [];
}</pre>
              </section>
              
            
              
              
              <section class="method" id="param.validator">
                <h3>
                  param.validator
                </h3>
                <p>Add validator to stack.</p>
                <pre class="js">Param.prototype.validator = function(key, val){
  var assert = exports.validator(key);

  (this.validators || (this.validators = []))
    .push(function validate(self, query, constraint){ // XXX: fn callback later
      if (!assert(self, constraint.right.value, val))
        query.errors.push('Invalid Constraint something...');
    });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="param.operator">
                <h3>
                  param.operator
                </h3>
                <p>Append operator to stack.</p>
                <pre class="js">Param.prototype.operator = function(name){
  if (!this.operators) {  
    this.operators = [];

    var assert = validator('in');

    (this.validators || (this.validators = []))
      .push(function validate(self, query, constraint){
        if (!assert(self, constraint.operator, self.operators)) {
          query.errors.push('Invalid operator ' + constraint.operator);
        }
      });
  }

  this.operators.push(name);
};

Param.prototype.validate = function(query, constraint, fn){
  if (!this.validators) return true;

  for (var i = 0, n = this.validators.length; i &lt; n; i++) {
    this.validators[i](this, query, constraint);
  }

  return !(query.errors &amp;&amp; query.errors.length);
};

Param.prototype.alias = function(key){
  (this.aliases || (this.aliases = [])).push(key);
};

// XXX: this might be too specific, trying it out for now.
Param.prototype.format = function(type, name){
  this.serializer = { type: type, name: name };
};</pre>
              </section>
              
            
              
              
              <section class="method" id="param.typecast">
                <h3>
                  param.typecast
                </h3>
                <p>Convert a value into a proper form.</p>

<p>Typecasting.</p>
                <pre class="js">Param.prototype.typecast = function(val){
  // XXX: handle item type for array.
  return type(this.type).sanitize(val);
};

validators(exports);</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="param.validators">
                <h3>
                  param.validators
                </h3>
                <p>Define default validators.</p>
                <pre class="js">function validators(param) {
  // XXX: todo
  param.validator('present', function(self, obj){
    return null != obj;
  });

  ['eq', 'neq', 'in', 'nin', 'contains', 'gte', 'gt', 'lt', 'lte', 'match'].forEach(function(key){
    param.validator(key, function(self, obj, val){
      return validator(key)(obj, val);
    });
  });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="operator-module">
          <h2>operator</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="operator.collection">
                <h3>operator.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="operator.operator">
                <h3>
                  operator.operator
                </h3>
                <p>Define/get an operator.</p>
                <pre class="js">function operator(name, fn) {
  if (!fn &amp;&amp; exports.collection[name])
    return exports.collection[name];

  exports.collection[name] = fn;
  exports.collection.push(name);
  return fn;
}

// inspired from https://github.com/angular/angular.js/blob/master/src/ng/parse.js
operator('null', function(){
  return null;
});

operator('true', function(){
  return true;
});

operator('false', function(){
  return false;
});

var noop = function(){};

operator('undefined', noop);

operator('+', function(self, locals, a, b){
  a = a(self, locals);
  b = b(self, locals);

  if (undefined !== a) {
    return undefined !== b
      ? a + b
      : a;
  }
  return undefined !== b
    ? b
    : undefined;
});

// XXX: todo
operator('-');
operator('*');
operator('/');
operator('%');
operator('^');
operator('=');
operator('===');
operator('!==');
operator('==');
operator('!=');
operator('&lt;=');
operator('&lt;');
operator('&gt;');
operator('&gt;=');
operator('&amp;&amp;');
operator('||');
operator('&amp;');
operator('|');
operator('!');</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="mongodb-adapter-module">
          <h2>mongodb-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="mongodb-adapter.use">
                <h3>
                  mongodb-adapter.use
                </h3>
                <p>XXX: Switch database.</p>
                <pre class="js">exports.use = function(name){
  exports.database = name;
  return exports;
};</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="mongodb-adapter.exec">
                <h3>
                  mongodb-adapter.exec
                </h3>
                <p>Execute a database query.</p>
                <pre class="js">exports.exec = function(query, fn){
  var client = exports.connections[exports.database];
  if (!client) throw new Error('Not connected to a database');

  var action = stream('mongodb.' + query.type).create({
    query: query,
    client: client,
    collection: client.collection(query.selects[0].resource)
  });

  process.nextTick(function(){
    action.exec(fn);
  });

  return action;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="mongodb-adapter.connect">
                <h3>
                  mongodb-adapter.connect
                </h3>
                <p>Connect to a database.</p>
                <pre class="js">exports.connect = function(name, fn){
  if (this.connections[name]) return fn(null, this.connections[name]);

  var self = this;
  var server = new mongodb.Server('127.0.0.1', 27017, {});
  var db = new mongodb.Db(name, server, { safe:false });

  db.open(function(err, client){
    if (err) return fn(err);
    self.connections[name] = client;
    // XXX: not sure the best way to do this.
    if (!exports.database) exports.database = name;
    fn(null, client);
  });

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="mongodb-adapter.disconnect">
                <h3>
                  mongodb-adapter.disconnect
                </h3>
                <p>Disconnect from a database.</p>
                <pre class="js">exports.disconnect = function(name, fn){
  if (this.connections[name]) {
    this.connections[name].close();
    delete this.connections[name];
    if (name === exports.database)
      delete exports.database;
    process.nextTick(fn);
  } else {
    fn();
  }
};

function find(context, data, fn) {
  var constraints = serializeConstraints(context.query);

  context.collection.find(constraints).toArray(function(err, docs){
    // deserialize.
    context.emit('data', docs);
    fn();
  });
}

function create(context, data, fn) {
  var attrs = serializeAttrs(context.query);

  context.collection.insert(attrs, function(err, docs){
    context.emit('data', docs);
    fn();
  });
}

function update(context, data, fn) {
  var attrs = serializeAttrs(context.query);
  var constraints = serializeConstraints(context.query);

  context.collection.update(constraints, attrs, function(err, docs){
    context.emit('data', docs);
    fn();
  });
}

function remove(context, data, fn) {
  var constraints = serializeConstraints(context.query);
  
  context.collection.remove(constraints, function(err, docs){
    context.emit('data', docs);
    fn();
  });
}

function serializeAttrs(query) {
  if (!query.data) return {};
  // XXX: handle multiple
  var result = [];

  query.data.forEach(function(data){
    var attrs = {};
    
    for (var key in data) {
      // XXX: find model and typecast.
      attrs[key] = data[key];
    }

    result.push(attrs);
  });

  return result;
}

function serializeConstraints(query) {
  var constraints = {};

  query.constraints.forEach(function(constraint){
    var left = constraint.left.attr;
    var right = constraint.right.value;

    switch (constraint.operator) {
      case 'eq':
        constraints[left] = right;
        break;
      default:
        constraints[left] || (constraints[left] = {});
        constraints[left]['$' + constraint.operator] = right;
        break;
    }
  });

  // sorting

  if (query.sorting) {
    constraints['$orderby'] = {};
    query.sorting.forEach(function(sorting){
      constraints['$orderby'][sorting.attr] = sorting.direction;
    });
  }

  // paging

  if (query.paging) {
    if (query.paging.limit)
      constraints.limit = query.paging.limit;
  }

  return constraints;
}

function deserializeAttrs(docs, context) {

}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="memory-adapter-module">
          <h2>memory-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="memory-adapter.collections">
                <h3>memory-adapter.collections</h3>
                <p>Collections by name.</p>
                <pre class="js">exports.collections = {};</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="memory-adapter.exec">
                <h3>
                  memory-adapter.exec
                </h3>
                <p>Execute a database query.</p>
                <pre class="js">exports.exec = function(query, fn){
  var program = stream('memory' + '.' + query.type).create({
    collectionName: query.selects[0],
    query: query
  });

  // XXX: process.nextTick
  program.on('data', function(records){
    fn(null, records);
  });

  program.exec();

  return program;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="memory-adapter.load">
                <h3>
                  memory-adapter.load
                </h3>
                <p>Load data.</p>
                <pre class="js">exports.load = function(name, val){
  if ('object' === typeof name) {
    for (var key in name)
      exports.load(key, name[key]);
  } else {
    var collection = exports.find(name) || exports.create(name);
    for (var i = 0, n = val.length; i &lt; n; i++) {
      collection.push(identify(val[i], name))
    }
  }

  return exports;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="memory-adapter.clear">
                <h3>
                  memory-adapter.clear
                </h3>
                <p>Reset everything.</p>
                <pre class="js">exports.clear = function(){
  // XXX: should be more robust.
  exports.collections = {};
};

exports.collection = function(name){
  return exports.find(name) || exports.create(name);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="memory-adapter.create">
                <h3>
                  memory-adapter.create
                </h3>
                <p>Create a database/collection/index.</p>
                <pre class="js">exports.create = function(name, fn){
  return exports.collections[name] = [];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="memory-adapter.update">
                <h3>
                  memory-adapter.update
                </h3>
                <p>Update a database/collection/index.</p>
                <pre class="js">exports.update = function(name, fn){

};</pre>
              </section>
              
            
              
              
              <section class="method" id="memory-adapter.remove">
                <h3>
                  memory-adapter.remove
                </h3>
                <p>Remove a database/collection/index.</p>
                <pre class="js">exports.remove = function(name, fn){
  delete exports.collections[name];
  return exports;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="memory-adapter.find">
                <h3>
                  memory-adapter.find
                </h3>
                <p>Find a database/collection/index.</p>
                <pre class="js">exports.find = function(name, fn){
  return exports.collections[name];
};

function collection(name) {
  return exports.collections[name] || (exports.collections[name] = []);
}

function find(ctx, data, fn) {
  var records = collection(ctx.collectionName.resource);
  var constraints = ctx.query.constraints;

  if (constraints.length) {
    records = query.filter(records, constraints)
  } else {
    records = records.concat();
  }

  // XXX: sort
  // https://github.com/viatropos/tower/blob/master/packages/tower-support/shared/array.coffee
  //records = records.sort(function(a, b){
  //  a.id &lt; b.id
  //});

  // limit
  if (ctx.query.paging.limit) records.splice(ctx.query.paging.limit);
  
  ctx.emit('data', records);
  
  fn();

  ctx.close();
}

function create(ctx, data, fn) {
  var name = ctx.collectionName.resource;
  var records = collection(name);
  var constraints = ctx.query.constraints;

  for (var i = 0, n = ctx.query.data.length; i &lt; n; i++) {
    records.push(ctx.query.data[i] = identify(ctx.query.data[i], name));
  }

  ctx.emit('data', ctx.query.data);
  fn();
  ctx.close();
}

function update(ctx, data, fn) {
  var records = collection(ctx.collectionName.resource);
  var data = ctx.query.data &amp;&amp; ctx.query.data[0]; // XXX: refactor
  var constraints = ctx.query.constraints;

  // XXX: or `isBlank`
  // if (!data)

  if (constraints.length) {
    records = query.filter(records, constraints);
  }

  // XXX: this could be optimized to just iterate once
  //      by reimpl part of `filter` here.
  // XXX: or maybe there is a `each-array-and-remove` that
  // is a slightly different iteration pattern so you can
  // remove/modify items while iterating.
  for (var i = 0, n = records.length; i &lt; n; i++) {
    // XXX: `merge` part?
    // for (var key in data) records[i][key] = data[key];
    for (var key in data) records[i].set(key, data[key]);
  }

  ctx.emit('data', records);
  fn();
  ctx.close();
}

function remove(ctx, data, fn) {
  var records = collection(ctx.collectionName.resource);
  var constraints = ctx.query.constraints;
  var result = [];

  if (constraints.length) {
    var i = records.length;

    while (i--) {
      if (query.validate(records[i], constraints)) {
        result.unshift(records.splice(i, 1)[0]);
      }
    }
  }

  ctx.emit('data', result);
  fn();
}</pre>
              </section>
              
            
              
              
              <section class="method" id="memory-adapter.identify">
                <h3>
                  memory-adapter.identify
                </h3>
                <p>Create a hidden <code>__id__</code> on <code>record</code>,<br />so it can be stored in memory by id.</p>
                <pre class="js">function identify(record, name) {
  // XXX: refactor. maybe adapters allow raw objects (not resources)
  // used for storing in memory on the client.
  if (!resource.is(record)) {
    record = resource(name).init(record); 
  }

  if (null == record.__id__) {
    record.__id__ = (record.get ? record.get('id') : record.id) || uuid();
  }

  return record;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="load-module">
          <h2>load</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="load.paths">
                <h3>load.paths</h3>
                <p>Map of <code>api + '.' + key</code> to absolute module path.</p>
                <pre class="js">exports.paths = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="load.keys">
                <h3>load.keys</h3>
                <p>Map of path to array of <code>api + '.' + key</code>.</p>
                <pre class="js">exports.keys = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="load.fns">
                <h3>load.fns</h3>
                <p>Map of path to <code>fn</code>.</p>
                <pre class="js">exports.fns = {};</pre>
              </section>
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="load.load">
                <h3>
                  load.load
                </h3>
                <p>Lazy-load a module.</p>

<p>This is something like an IoC container.<br />Make sure the <code>api.toString()</code> is unique.</p>
                <pre class="js">function load(api, key, path) {
  return undefined === path
    ? exports.get(api, key)
    : exports.set.apply(exports, arguments);
}

exports.get = function(api, key){
  var path = exports.paths[api.name + '.' + key];
  if (path) {
    var fn = exports.fns[path];
    if (fn) return fn();
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="load.set">
                <h3>
                  load.set
                </h3>
                <p>Define how to lazy-load a module.</p>
                <pre class="js">exports.set = function(api, key, path){
  var pathKey = api.name + '.' + key;
  if (!exports.paths[pathKey]) {
    exports.paths[pathKey] = path;
    (exports.keys[path] || (exports.keys[path] = [])).push(pathKey);
    if (!exports.fns[path]) {
      exports.fns[path] = requireFn(path, Array.prototype.slice.call(arguments, 3));
    }
  }
  return exports;
};

exports.clear = function(path){
  for (var i = 0, n = exports.keys[path].length; i &lt; n; i++) {
    delete exports.paths[exports.keys[path][i]];
  }
  exports.keys[path].length = 0;
  delete exports.keys[path];
  delete exports.fns[path];
};

function requireFn(path, args) {
  return function(obj) {
    // remove all listeners
    exports.clear(path);

    var result = require(path);

    if ('function' === typeof result) {
      //args.unshift(obj);
      result.apply(result, args);
    }
    
    args = undefined;
    return result;
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="keyboard-directive-module">
          <h2>keyboard-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="keyboard-directive.exports">
                <h3>keyboard-directive.exports</h3>
                <p>Expose <code>keyboard</code>.</p>
                <pre class="js">module.exports = keyboard;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="keyboard-directive.keyboard">
                <h3>
                  keyboard-directive.keyboard
                </h3>
                <p>Define a keyboard shortcut.</p>
                <pre class="js">function keyboard(name, cmd, type) {
  type || (type = 'keypress');
  cmd || (cmd = name);

  return directive('on-' + name, function(scope, element, attr){
    function handle(evt) {
      if (cmd === keyname(which(evt))) {
        scope.attrs.event = evt;
        attr.expression(scope);
        delete scope.attrs.event;
      }
    }

    event.bind(element, type, handle);

    scope.on('remove', function(){
      event.unbind(element, type, handle);
    });
  });
}

function which(evt) {
  return evt.which || evt.keyCode;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="fs-module">
          <h2>fs</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
              <section class="property" id="fs.createDirectoryRecursive">
                <h3>fs.createDirectoryRecursive</h3>
                <p>TODO</p>
                <pre class="js">exports.createDirectoryRecursive = exports.mkdirp = function(directoryPath, mode, callback) {
  if (typeof mode === 'function') {
    callback = mode;
    mode = undefined;
  }

  exports._createDirectoryRecursive(exports.relativePath(directoryPath), mode, callback);

  return this;
}

exports._createDirectoryRecursive = createDirectoryRecursiveHard;

function createDirectoryRecursiveHard(directoryPath, mode, callback) {
  // this way tries to create it from the bottom up.
  // you could also create it from the top down.
  fs.mkdir(directoryPath, function(error) {
    if (error) {
      if (error.code === 'ENOENT') {
        var index = directoryPath.lastIndexOf(exports.pathSeparator);

        if (index &gt; 0) {
          createDirectoryRecursiveHard(directoryPath.substring(0, index), mode, function(error) {
            if (error)
              callback(error)
            else
              createDirectoryRecursiveHard(directoryPath, mode, callback); // try again
          });
        } else {
            throw err;
        }
      } else if (error.code === 'EEXIST') {
        callback();
      } else {
        callback(error);
      }
    } else {
      callback();
    }
  });
}

function createDirectoryRecursiveSoft() {

}</pre>
              </section>
              
            
              
              
              <section class="property" id="fs.createDirectoryRecursiveSync">
                <h3>fs.createDirectoryRecursiveSync</h3>
                <p>Recursively create directories.</p>
                <pre class="js">exports.createDirectoryRecursiveSync = exports.mkdirpRecursiveSync = function(directoryPath, mode) {
  require('wrench').mkdirSyncRecursive(directoryPath, mode);

  return this;
}

exports.copyDirectoryRecursive = function(fromPath, toPath, callback) {
  require('wrench').copyDirRecursive(fromPath, toPath, callback);

  return this;
}

exports.copyDirectoryRecursiveSync = function(fromPath, toPath, options) {
  require('wrench').copyDirSyncRecursive(fromPath, toPath, options);

  return this;
}

exports.removeDirectoryRecursive = function(directoryPath, callback) {
  require('wrench').rmdirRecursive(directoryPath, callback);

  return this;
}

exports.removeDirectoryRecursiveSync = function(directoryPath, failSilent) {
  require('wrench').rmdirSyncRecursive(directoryPath, false);

  return this;
}</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="fs.readDirectoryRecursive">
                <h3>
                  fs.readDirectoryRecursive
                </h3>
                <p>TODO</p>
                <pre class="js">exports.readDirectoryRecursive = function(directoryPath, callback) {
  exports.glob(directoryPath, callback);
}

exports.readDirectoryRecursiveSync = function(directoryPath) {
  //return exports.globSync(directoryPath);
  return require('wrench').readdirSyncRecursive(directoryPath);
}

exports.absolutePath = function(filePath) {
  return path.resolve(filePath);
}

exports.relativePath = function(filePath, relativeTo) {
  return path.relative(relativeTo || process.cwd(), filePath);
}

exports.exists = function(filePath) {
  fs.exists(filePath);

  return this;
}

exports.existsSync = function(filePath) {
  return fs.existsSync(filePath);
}

exports.removeDirectory = function(directoryPath) {
  fs.rmdir(directoryPath);

  return this;
}

exports.removeDirectorySync = function(directoryPath) {
  return fs.rmdirSync(directoryPath);
}

exports.removeFile = function(filePath, callback) {
  fs.unlink(filePath, callback);

  return this;
}

exports.removeFileSync = function(filePath) {
  if (fs.existsSync(filePath))
    fs.unlinkSync(filePath);

  return this;
}

exports.directoryPathsSync = function(directoryPath) {
  var entries = this.entryPathsSync(directoryPath)
    , directories = [];

  entries.forEach(function(entry) {
    if (fs.statSync(entry).isDirectory())
      directories.push(entry);
  });

  return directories;
}

exports.isFile = function(filePath, callback) {
  fs.stat(filePath, function(error, stats) {
    if (error)
      callback(error, stats);
    else
      callback(null, !stats.isDirectory());
  });

  return this;
}

exports.isFileSync = function(filePath) {
  return !fs.statSync(filePath).isDirectory();
}

exports.isDirectory = function(filePath, callback) {
  fs.stat(filePath, function(error, stats) {
    if (error)
      callback(error, stats);
    else
      callback(null, stats.isDirectory());
  });

  return this;
}

exports.isDirectorySync = function(filePath) {
  return fs.statSync(filePath).isDirectory();
}

exports.directoryNamesSync = function(directoryPath) {
  var entries = this.entryNamesSync(directoryPath)
    , directories = [];

  entries.forEach(function(entry) {
    if (fs.statSync(path.join(directoryPath, entry)).isDirectory())
      directories.push(entry);
  });

  return directories;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="fs.glob">
                <h3>
                  fs.glob
                </h3>
                <p>glob("<em>*\/</em>.js", options, function (error, files) {})</p>
                <pre class="js">exports.glob = function(pattern, options, callback) {
  require('glob')(pattern, options, callback);

  return this;
}

exports.globSync = function(pattern, options) {
  return require('glob').sync(pattern, options);
}

exports.filePathsSync = function(directoryPath) {
  var entries = this.entryPathsSync(directoryPath)
    , files = [];

  entries.forEach(function(entry) {
    if (!fs.statSync(entry).isDirectory())
      files.push(entry);
  });

  return files;
}

exports.entryNamesSync = function(directoryPath) {
  return fs.readdirSync(directoryPath);
}

exports.entryPathsSync = function(directoryPath) {
  if (!exports.existsSync(directoryPath)) return [];
  return exports.entryNamesSync(directoryPath).map(function(filePath) {
    return path.join(directoryPath, filePath);
  });
}

exports.chmod = function(filePath, chmod, callback) {
  fs.chmod(filePath, chmod, callback);

  return this;
}

exports.chmodSync = function(filePath, chmod) {
  fs.chmodSync(filePath, chmod);
  return this;
}

exports.copyFile = function(fromPath, toPath, callback) {
  fs.createReadStream(fromPath).pipe(fs.createWriteStream(toPath).on('close', callback));
}

exports.copyFileSync = function(fromPath, toPath) {
  exports.createFileSync(toPath, exports.readFileSync(fromPath));
}

exports.join = function() {
  return path.join.apply(path, arguments);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="fs.fileDigest">
                <h3>
                  fs.fileDigest
                </h3>
                <p>fileDigest(path, {algorithm: md5 (default), sha1, sha256}, callback)</p>
                <pre class="js">exports.fileDigest = function(filePath, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  var crypto = require('crypto')
    , algorithm = options.algorithm || 'md5'
    , checksum = crypto.createHash(algorithm)
    , stream = fs.createReadStream(filePath)
    , _this = this;

  stream.on('data', function(data) {
    checksum.update(data);
  });

  stream.on('end', function() {
    callback.call(_this, null, checksum.digest('hex'));
  });

  return this;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="fs.eachLine">
                <h3>
                  fs.eachLine
                </h3>
                <p>TODO</p>
                <pre class="js">exports.eachLine = function(filePath, callback) {

}

exports.pathWithDigest = function(digest, filePath, ext) {
  var dirname = exports.dirname(filePath)
    , basename = exports.basename(filePath, ext);

  return path.join(dirname, basename + '-' + digest + ext);
}

exports.pathWithoutDigest = function(filePath, ext) {
  var dirname = exports.dirname(filePath)
    , basename = exports.basename(filePath, ext);

  return path.join(dirname, basename.replace(/-[a-fA-F\d]{32}$/, '') + ext);
}

exports.dirname = function(filePath) {
  return path.dirname(filePath);
}

exports.basename = function(filePath, ext) {
  return path.basename.apply(path, arguments);
}

exports.watch = function(pattern, callback) {
  return require('gaze')(pattern, callback);
}

exports.stat = function() {
  fs.stat.apply(fs, arguments);
  return this;
}

exports.statSync = function() {
  return fs.statSync.apply(fs, arguments);
}

exports.createReadStream = function() {
  return fs.createReadStream.apply(fs, arguments);
}

exports.createWriteStream = function() {
  return fs.createWriteStream.apply(fs, arguments);
}

exports.downloadFile = function(fromUrl, toPath, callback) {
  var file = fs.createWriteStream(toPath);
  
  require(fromUrl.match(/^(https?)/)[1]).get(fromUrl, function(response) {
    response.on('end', callback);
    response.pipe(file);
  }).on('error', callback);

  return this;
}

// TODO</pre>
              </section>
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="emitter-module">
          <h2>emitter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="emitter.exports">
                <h3>emitter.exports</h3>
                <p>Expose <code>Emitter</code>.</p>
                <pre class="js">module.exports = Emitter;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="emitter.Emitter">
                <h3>
                  emitter.Emitter
                </h3>
                <p>Initialize a new <code>Emitter</code>.</p>
                <pre class="js">function Emitter(obj) {
  if (obj) return mixin(obj);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="emitter.mixin">
                <h3>
                  emitter.mixin
                </h3>
                <p>Mixin the emitter properties.</p>
                <pre class="js">function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="emitter.on">
                <h3>
                  emitter.on
                </h3>
                <p>Listen on the given <code>event</code> with <code>fn</code>.</p>
                <pre class="js">Emitter.prototype.on = function(event, fn){
  this._callbacks || (this._callbacks = {});
  (this._callbacks[event] || (this._callbacks[event] = []))
    .push(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="emitter.once">
                <h3>
                  emitter.once
                </h3>
                <p>Adds an <code>event</code> listener that will be invoked a single<br />time then automatically removed.</p>
                <pre class="js">Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks || (this._callbacks = {});

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  fn._off = on;
  this.on(event, on);
  return this;
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="emitter.emit">
                <h3>
                  emitter.emit
                </h3>
                <p>Emit <code>event</code> with the given args.</p>
                <pre class="js">Emitter.prototype.emit = function(event){
  if (!this._callbacks) return this;

  this._callbacks || (this._callbacks || {});

  var callbacks = this._callbacks[event];

  if (callbacks) {
    var args = slice.call(arguments, 1);
    callbacks = callbacks.slice(0);
    for (var i = 0, n = callbacks.length; i &lt; n; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="emitter.listeners">
                <h3>
                  emitter.listeners
                </h3>
                <p>Return array of callbacks for <code>event</code>.</p>
                <pre class="js">Emitter.prototype.listeners = function(event){
  this._callbacks || (this._callbacks = {});
  return this._callbacks[event] || [];
};</pre>
              </section>
              
            
              
              
              <section class="method" id="emitter.hasListeners">
                <h3>
                  emitter.hasListeners
                </h3>
                <p>Check if this emitter has <code>event</code> handlers.</p>
                <pre class="js">Emitter.prototype.hasListeners = function(event){
  return !!this.listeners(event).length;
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="content-module">
          <h2>content</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="content.collection">
                <h3>content.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="content.content">
                <h3>
                  content.content
                </h3>
                <p>Public API</p>
                <pre class="js">function content(name, fn) {
  if (exports.collection[name]) return exports.collection[name];</pre>
              </section>
              
            
              
              
              <section class="method" id="content.Content">
                <h3>
                  content.Content
                </h3>
                <p>Instantiate a new <code>Content</code>.</p>
                <pre class="js">function Content(data) {
    this.name = name;
    // all actual attributes/values
    this.attrs = {};
    this.children = [];

    if (data) {
      // special prop
      this.parent = data.parent;
      delete data.parent;
      for (var key in data) this.set(key, data[key]);
    }

    // XXX: probably should do `this.set('parent')`
    //      so there is a standard way of managing parents.
    if (!this.parent &amp;&amp; 'root' !== name)
      this.parent = exports.root();
    if (this.parent)
      this.parent.children.push(this);

    // for being able to emit events to instances from class.
    Content.instances.push(this);
    Content.emit('init', this);
  }

  Content.prototype = {};
  Content.prototype.constructor = Content;
  Content.id = name;
  Content.attrs = [];
  Content.actions = {};
  Content.instances = [];

  // statics

  for (var key in statics) Content[key] = statics[key];

  // proto

  for (var key in proto) Content.prototype[key] = proto[key];

  if (fn) Content.on('init', fn);

  exports.collection.push(Content);
  exports.collection[name] = Content;
  exports.emit('define', Content);
  return Content;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="content.clear">
                <h3>
                  content.clear
                </h3>
                <p>Clear the collections.</p>

<p>Used for testing.</p>
                <pre class="js">exports.clear = function(){
  exports.off();
  exports.root().remove();
  exports.collection = [];
  root = undefined;
  return this;
};

exports.defined = function(name){
  return exports.collection.hasOwnProperty(name);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="content.is">
                <h3>
                  content.is
                </h3>
                <p>Check if <code>obj</code> is a <code>Content</code> object.</p>
                <pre class="js">exports.is = function(obj){
  return obj &amp;&amp; '[object Content]' === obj.toString();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="content.root">
                <h3>
                  content.root
                </h3>
                <p>Root content.</p>
                <pre class="js">exports.root = function(){
  if (root) return root;
  return root = content('root').init();
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="content.get">
                <h3>
                  content.get
                </h3>
                <p>Get attr.</p>

<p>Attributes can be functions.<br />However, an <code>action</code> can not be called through <code>get</code>.</p>
                <pre class="js">exports.get = function(path){
  path = path.split('.');
  var val = findAttr(this, path.shift());

  // XXX: refactor to more generic/better system.
  while (path.length &amp;&amp; undefined !== val) {
    var name = path.shift();
    if (val.hasOwnProperty(name)) {
      val = val[name];
    // XXX: unoptimized, but should work for the moment.
    } else if ('function' === typeof val.get) {
      val = val.get([name].concat(path).join('.'));
      path = [];
    } else {
      val = undefined;
    }
  }

  return val;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="content.set">
                <h3>
                  content.set
                </h3>
                <p>Set attr.</p>
                <pre class="js">exports.set = function(name, val){
  // XXX: set for `nested.path`.
  // XXX: make better comparator.
  if (this.attrs[name] !== val) {
    var prev = this.attrs[name];
    this.attrs[name] = val;
    // XXX: maybe it looks for `dependencies` on
    //      `this.constructor.attrs[name].dependencies`,
    //      to see if it should emit change events for computed props.
    this.changed(name, val, prev);
  }

  return val;
};

exports.changed = function(name, val, prev){
  this.emit('change ' + name, val, prev);
  this.emit('change', name, val, prev);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="content.apply">
                <h3>
                  content.apply
                </h3>
                <p>Apply an action.</p>
                <pre class="js">exports.apply = function(name, args){
  return findAction(this, name).apply(this, args);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="content.call">
                <h3>
                  content.call
                </h3>
                <p>Call an action.</p>
                <pre class="js">exports.call = function(name){
  return findAction(this, name).apply(this, slice.call(arguments, 1));
};</pre>
              </section>
              
            
              
              
              <section class="method" id="content.remove">
                <h3>
                  content.remove
                </h3>
                <p>Emit <code>'remove'</code> event for directives<br />to teardown custom functionality for their element.</p>
                <pre class="js">exports.remove = function(){
  for (var i = 0, n = this.children.length; i &lt; n; i++) {
    this.children[i].remove();
  }
  this.emit('remove');
  // XXX: not sure this is necessary
  this.constructor.emit('remove', this);

  var i = indexOf(this.constructor.instances, this);
  if (i &gt;= 0)
    this.constructor.instances.splice(i, 1);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="content.toString">
                <h3>
                  content.toString
                </h3>
                <p>Standard <code>toString</code>.</p>
                <pre class="js">exports.toString = function(){
  return '[object Content]';
};

function findAttr(content, name) {
  while (content) {
    // the order of lookups:
    // this.attrs[name]
    // this.constructor.attrs[name].value // default
    // this.parent.get(name);
    if (undefined !== content.attrs[name]) return content.attrs[name];

    // try getting default value
    var attr = content.constructor.attrs[name];
    if (attr &amp;&amp; attr.hasDefaultValue)
      return content.attrs[name] = attr.apply(content);
    // try getting value from parent
    // XXX: not sure if it should cache
    content = content.parent;
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="content.findAction">
                <h3>
                  content.findAction
                </h3>
                <p>Traverse content tree to find action <code>fn</code>.</p>
                <pre class="js">function findAction(content, name) {
  while (content) {
    if (content.constructor.actions[name])
      return content.constructor.actions[name];
    content = content.parent;
  }

  throw new Error('content action [' + name + '] not found.');
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="console-module">
          <h2>console</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="console.exports">
                <h3>console.exports</h3>
                <p>Expose <code>shell</code>.</p>
                <pre class="js">module.exports = shell;</pre>
              </section>
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="console.shell">
                <h3>
                  console.shell
                </h3>
                <p>Start a new interactive repl.</p>
                <pre class="js">function shell(options) {
  options || (options = {});
  options.env || (options.env = 'development');

  var context = repl.start({
    prompt: 'tower&gt; ',
    // XXX: use http://nodejs.org/api/vm.html
    useGlobal: true,
    eval: evaluate
  }).context;

  context.exit = function(){
    process.exit(0);
  };

  process.nextTick(function(){
    context.Future = Future;
    context.Fiber  = Fiber;
    // XXX: replace this with just `require('tower')` soon.
    context.resource = require('tower-resource');
    context.query = require('tower-query');
    context.adapter = require('tower-adapter');
    context.text = require('tower-text');
    context.route = require('tower-route');
    require('tower-memory-adapter');
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="console.evaluate">
                <h3>
                  console.evaluate
                </h3>
                <p>Evaluate stdin synchronously.</p>
                <pre class="js">function evaluate(cmd, ctx, filename, fn) {
  Fiber(function(){
    try {
      fn(null, eval.call(ctx, cmd));
    } catch (err) {
      fn(err);
    }
  }).run();
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="collection-module">
          <h2>collection</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="collection.collection">
                <h3>collection.collection</h3>
                <p>Expose <code>collection</code> of collections.</p>
                <pre class="js">exports.collection = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="collection.Collection">
                <h3>collection.Collection</h3>
                <p>Expose <code>Collection</code>.</p>
                <pre class="js">exports.Collection = Collection;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="collection.collection">
                <h3>
                  collection.collection
                </h3>
                <p>Instantiate a new <code>Collection</code>.</p>
                <pre class="js">function collection(name, array) {
  if ('string' !== typeof name)
    return new Collection(name);

  if (exports.collection[name] &amp;&amp; !array)
    return exports.collection[name];

  return exports.collection[name] = new Collection(array, name);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="collection.Collection">
                <h3>
                  collection.Collection
                </h3>
                <p>Instantiate a new <code>Collection</code>.</p>
                <pre class="js">function Collection(array, name) {
  this.array = array || [];
  this.length = this.array.length;
  if (name) this.name = name;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="collection.subscribe">
                <h3>
                  collection.subscribe
                </h3>
                <p>Subscribe to a query.</p>
                <pre class="js">Collection.prototype.subscribe = function(query){
  var self = this;
  this.unsubscribe();
  this._query = query;

  function fn(record) {
    switch (query.type) {
      case 'create':
        self.push(record);
        break;
      case 'update':
        break;
      case 'remove':
        self.remove(record);
        break;
    }
  }

  query.__collectionFn__ = fn;
  query.subscribe(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="collection.unsubscribe">
                <h3>
                  collection.unsubscribe
                </h3>
                <p>Unsubscribe from current query.</p>
                <pre class="js">Collection.prototype.unsubscribe = function(){
  if (!this._query) return this;

  this._query.unsubscribe(this._query.__collectionFn__);
  delete this._query;
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="collection.apply">
                <h3>
                  collection.apply
                </h3>
                <p>@api private</p>
                <pre class="js">Collection.prototype.apply = function(method, args){
  return this.array[method].apply(this.array, args);
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="client-router-module">
          <h2>client-router</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="client-router.route">
                <h3>client-router.route</h3>
                <p>Expose <code>route</code>.</p>
                <pre class="js">exports.route = route;</pre>
              </section>
              
            
              
              
              <section class="property" id="client-router.Context">
                <h3>client-router.Context</h3>
                <p>Expose <code>Context</code>.</p>
                <pre class="js">exports.Context = Context;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="client-router.router">
                <h3>
                  client-router.router
                </h3>
                <p>Router as middleware.</p>
                <pre class="js">function router(context, next) {
  exports.dispatch(context, next);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="client-router.dispatch">
                <h3>
                  client-router.dispatch
                </h3>
                <p>Dispatch the given <code>context</code>.</p>
                <pre class="js">exports.dispatch = function(context, fn){
  if ('string' === typeof context)
    context = new Context({ path: context });

  series(callbacks, context, function(err){
    if (err &amp;&amp; fn) fn(err);
  });

  return exports;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-router.clear">
                <h3>
                  client-router.clear
                </h3>
                <p>Clear routes and callbacks.</p>
                <pre class="js">exports.clear = function(){
  callbacks.length = 0;
  route.routes.length = 0;
  return exports;
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="client-router.start">
                <h3>
                  client-router.start
                </h3>
                <p>Bind <code>onpopstate</code> or <code>hashchange</code> event handler.</p>
                <pre class="js">exports.start = function(d){
  if (running) return;
  running = true;
  dispatch = false !== d;
  window.addEventListener(event, onchange);
  // be wary of location protocol == file:
  exports.replace(location.pathname + location.search);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-router.stop">
                <h3>
                  client-router.stop
                </h3>
                <p>Unbind <code>onpopstate</code> or <code>hashchange</code> event handler.</p>
                <pre class="js">exports.stop = function(){
  running = false;
  window.removeEventListener(event, onchange);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-router.show">
                <h3>
                  client-router.show
                </h3>
                <p>Show <code>path</code> with optional <code>state</code> object.</p>

<p>This is the same as if the server got a request.</p>
                <pre class="js">exports.show = function(path, state, dispatch){
  var context = new Context({
    path: path,
    state: state
  });

  if (false !== dispatch) exports.dispatch(context);
  if (!context.unhandled) context.pushState();
  return context;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-router.replace">
                <h3>
                  client-router.replace
                </h3>
                <p>Replace <code>path</code> with optional <code>state</code> object.</p>
                <pre class="js">exports.replace = function(path, state, dispatch){
  var context = new Context({
    path: path,
    state: state
  });

  if (null == dispatch) dispatch = true;
  if (dispatch) exports.dispatch(context);
  context.save();
  return context;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-router.Context">
                <h3>
                  client-router.Context
                </h3>
                <p>Instantiate a new <code>Context</code>.</p>

<p>XXX: Maybe this becomes <code>tower-client-context</code>.</p>
                <pre class="js">function Context(options) {
  options || (options = {});

  for (var key in options) this[key] = options[key];

  var path = options.path;
  var i = path.indexOf('?');
  this.canonicalPath = path;
  this.path = path || '/';
  this.state = {};
  this.state.path = path;
  this.querystring = ~i ? path.slice(i + 1) : '';
  this.pathname = ~i ? path.slice(0, i) : path;
  this.params = [];
  this.title = document.title;
  this.state = options.state || {};
}

Context.prototype.save = function(){
  this.replaceState();
};

Context.prototype.redirect = function(path){
  exports.replace(path);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-router.transition">
                <h3>
                  client-router.transition
                </h3>
                <p>Transition to a new route.</p>

<p>This first exits out of the current route,<br />then enters into the new one.</p>
                <pre class="js">Context.prototype.transition = function(name){
  // TODO: use the `queue` module, or somehow better configure.
  series(this.route.actions['exit'], this, function(){
    exports.dispatch(route(name));
  });
};

if (modern) { // for browsers supporting history.pushState
  Context.prototype.pushState = function(){
    history.pushState(this.state, this.title, this.canonicalPath);
  };

  Context.prototype.replaceState = function(){
    history.replaceState(this.state, this.title, this.canonicalPath);
  };
  
  onchange = function onpopstate(e){
    if (e.state) exports.replace(e.state.path, e.state);
  };
} else { // for IE7/8
  Context.prototype.replaceState = Context.prototype.pushState = function(){
    window.location.hash = '#' + this.canonicalPath;
    document.title = this.title;
  };

  onchange = function onhashchange(e){
    // e.newURL.split(hash)[1];
    exports.replace(e.oldURL.split('#')[1]);
    return false;
  };
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="attr-module">
          <h2>attr</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="attr.Attr">
                <h3>attr.Attr</h3>
                <p>Expose <code>Attr</code>.</p>
                <pre class="js">exports.Attr = Attr;

// XXX:
// module.exports = attr;
// attr('user.email')
// attr.on('define', function(name, obj));</pre>
              </section>
              
            
              
              
              <section class="property" id="attr.validator">
                <h3>attr.validator</h3>
                <p>Expose <code>validator</code>.</p>
                <pre class="js">exports.validator = validator;</pre>
              </section>
              
            
              
              
              <section class="property" id="attr.collection">
                <h3>attr.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="attr.exports">
                <h3>attr.exports</h3>
                <p>Expose <code>validators</code>.</p>
                <pre class="js">module.exports = validators;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="attr.attr">
                <h3>
                  attr.attr
                </h3>
                <p>Get an <code>Attr</code>.</p>
                <pre class="js">function attr(name, type, options) {
  if (undefined === type &amp;&amp; exports.collection[name])
    return exports.collection[name];

  var instance = new Attr(name, type, options);
  exports.collection[name] = instance;
  exports.collection.push(instance);
  exports.emit('define', name, instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="attr.ns">
                <h3>
                  attr.ns
                </h3>
                <p>Create an <code>attr</code> function that<br />just prepends a namespace to every key.</p>
                <pre class="js">exports.ns = function(ns){
  function attr(name, type, options) {
    return exports(ns + '.' + name, type, options);
  }

  // XXX: copy functions?
  for (var key in exports) {
    if ('function' === typeof exports[key])
      attr[key] = exports[key];
  }
  return attr;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="attr.Attr">
                <h3>
                  attr.Attr
                </h3>
                <p>Instantiate a new <code>Attr</code>.</p>
                <pre class="js">function Attr(name, type, options){
  if (!type) {
    options = { type: 'string' };
  } else {
    var kind = kindof(type);
    if ('object' === kind) {
      options = type;
    } else if ('function' === kind) {
      options = { value: type };
      // XXX: array too
    } else {
      if ('object' !== kindof(options)) {
        options = { value: options };
      } else {
        options || (options = {}); 
      }
      options.type = type;
    }
  }

  this.name = name;
  this.type = options.type || 'string';
  // XXX: I18n path, maybe should be
  // model.user.attr.
  this.path = options.path || 'attr.' + name;
  if (undefined !== options.value) {
    this.value = options.value;
    this.hasDefaultValue = true;
    this.defaultType = kindof(options.value);
  }

  if (options.validators) this.validators = [];
  if (options.alias) this.aliases = [ options.alias ];
  else if (options.aliases) this.aliases = options.aliases;

  // XXX: maybe it should allow any custom thing to be set?
}</pre>
              </section>
              
            
              
              
              <section class="method" id="attr.validator">
                <h3>
                  attr.validator
                </h3>
                <p>Add validator to stack.</p>
                <pre class="js">Attr.prototype.validator = function(key, val){
  var assert = validator(key);
  // XXX: need some sort of error handling so it's
  // easier to tell `assert` is undefined.

  // lazily instantiate validators
  (this.validators || (this.validators = []))
    .push(function validate(attr, obj, fn){
      if (!assert(attr, obj, val)) {
        // XXX: hook into `tower-inflector` for I18n
        var error = text.has(attr.path)
          ? text(attr.path).render(attr)
          : text('attr').render(attr);

        obj.errors[attr.name] = error;
        obj.errors.push(error);
      }
    });
};

Attr.prototype.alias = function(key){
  (this.aliases || (this.aliases = [])).push(key);
};

Attr.prototype.validate = function(obj, fn){
  if (!this.validators) return fn();

  var self = this;

  // XXX: part-async-series
  this.validators.forEach(function(validate){
    validate(self, obj);
  });

  if (fn) fn(); // XXX
};</pre>
              </section>
              
            
              
              
              <section class="method" id="attr.typecast">
                <h3>
                  attr.typecast
                </h3>
                <p>Convert a value into a proper form.</p>

<p>Typecasting.</p>
                <pre class="js">Attr.prototype.typecast = function(val){
  return type(this.type).sanitize(val);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="attr.apply">
                <h3>
                  attr.apply
                </h3>
                <p>Get default value.</p>
                <pre class="js">Attr.prototype.apply = function(obj){
  if (!this.hasDefaultValue) return;

  // XXX: this should be computed in the constructor.
  switch (this.defaultType) {
    case 'function':
      return this.value(obj);
      break;
    case 'array':
      return this.value.concat();
      break;
    default:
      return this.value;
      break;
  }
};

validators(exports);</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="attr.validators">
                <h3>
                  attr.validators
                </h3>
                <p>Define default validators.</p>
                <pre class="js">function validators(attr) {
  // XXX: maybe this goes into a separate module.
  attr.validator('present', function(self, obj){
    return null != obj.get(self.name);
  });

  ['eq', 'neq', 'in', 'nin', 'contains', 'gte', 'gt', 'lt', 'lte'].forEach(function(key){
    attr.validator(key, function(self, obj, val){
      return validator(key)(obj.get(self.name), val);
    });
  });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="adapter-module">
          <h2>adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="adapter.collection">
                <h3>adapter.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="adapter.Adapter">
                <h3>adapter.Adapter</h3>
                <p>Expose <code>Adapter</code> constructor.</p>
                <pre class="js">exports.Adapter = Adapter;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="adapter.adapter">
                <h3>
                  adapter.adapter
                </h3>
                <p>Lazily get an adapter instance by <code>name</code>.</p>
                <pre class="js">function adapter(name) {
  if (exports.collection[name]) return exports.collection[name];
  if (exports.load(name)) return exports.collection[name];

  var obj = new Adapter(name);
  exports.collection[name] = obj;
  // exports.collection.push(obj);
  // XXX: if has any event listeners...
  exports.emit('define', obj);
  exports.emit('define ' + name, obj);
  return obj;
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="adapter.load">
                <h3>
                  adapter.load
                </h3>
                <p>Lazy-load adapters.</p>
                <pre class="js">exports.load = function(name, path){
  return 1 === arguments.length
    ? load(exports, name)
    : load.apply(load, [exports].concat(Array.prototype.slice.call(arguments)));
};</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.exists">
                <h3>
                  adapter.exists
                </h3>
                <p>Check if adapter <code>name</code> exists.</p>
                <pre class="js">exports.exists = function(name){
  return !!exports.collection[name];
};

// XXX: remove `exists` in favor of `has`.
exports.has = exports.exists;</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.Adapter">
                <h3>
                  adapter.Adapter
                </h3>
                <p>Instantiate a new <code>Adapter</code>.</p>
                <pre class="js">function Adapter(name) {
  this.name = name;
  this.context = this;
  this.types = {};
  this.settings = {};
  // XXX
  this.resources = {};
  this.connections = {};
  //this.resource = this.resource.bind(this);
  // XXX: refactor, should handle namespacing.
  this.resource = resource.ns(name);
  this.action = stream.ns(name);
  // XXX: todo
  // this.type = type.ns(name);

  // make queryable.
  // XXX: add to `clear` for both (or something like).
  query.use(this);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.query">
                <h3>
                  adapter.query
                </h3>
                <p>Start a query against this adapter.</p>
                <pre class="js">Adapter.prototype.query = function(){
  return query().use(this);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.use">
                <h3>
                  adapter.use
                </h3>
                <p>Use database/connection (config).</p>
                <pre class="js">Adapter.prototype.use = function(name){
  throw new Error('Adapter#use not implemented');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.connection">
                <h3>
                  adapter.connection
                </h3>
                <p>Define connection settings.</p>
                <pre class="js">Adapter.prototype.connection = function(name, options){
  if (1 === arguments.length &amp;&amp; 'string' == typeof name) {
    setting = this.context = settings[name]
    return this;
  }

  if ('object' === typeof name) options = name;
  options || (options = {});
  options.name || (options.name = name);
  setting = this.context = settings[options.name] = options;

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.type">
                <h3>
                  adapter.type
                </h3>
                <p>Datatype serialization.</p>
                <pre class="js">Adapter.prototype.type = function(name){
  this.context =
    this.types[name] || (this.types[name] = type(this.name + '.' + name));
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.serializer">
                <h3>
                  adapter.serializer
                </h3>
                <p>Delegate to <code>type</code>.</p>

<p>XXX: This may just actually become the <code>type</code> object itself.</p>
                <pre class="js">Adapter.prototype.serializer = function(name){
  // `this.types[x] === this.context`
  this.context.serializer(name);
  return this;
};

Adapter.prototype.to = function(fn){
  this.context.to(fn);
  return this;
};

Adapter.prototype.from = function(fn){
  this.context.from(fn);
  return this;
};

Adapter.prototype.exec = function(query, fn){
  throw new Error('Adapter#exec not implemented.');
};</pre>
              </section>
              
            
              
              
              <section class="method" id="adapter.self">
                <h3>
                  adapter.self
                </h3>
                <p>Reset the context to <code>this</code>.</p>
                <pre class="js">Adapter.prototype.self = function(){
  return this.context = this;
};

exports.api = function(name, fn){
  ['connect', 'disconnect'].forEach(function(method){
    fn[method] = function(){
      return fn()[method].apply(adapter(name), arguments);
    }
  });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="uuid-module">
          <h2>uuid</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
              <section class="property" id="uuid.exports">
                <h3>uuid.exports</h3>
                <p>Expose <code>uuid</code>.</p>
                <pre class="js">module.exports = uuid;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
              <section class="method" id="uuid.uuid">
                <h3>
                  uuid.uuid
                </h3>
                <p>Taken straight from <a href='https://github.com/gjohnson/uuid'>https://github.com/gjohnson/uuid</a>,<br />which was taken straight from jed's gist: <a href='https://gist.github.com/982883'>https://gist.github.com/982883</a></p>

<p>If there is a more optimal/ideal approach, submit that sh**!</p>

<p>Returns a random v4 UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,<br />where each x is replaced with a random hexadecimal digit from 0 to f, and<br />y is replaced with a random hexadecimal digit from 8 to b.</p>
                <pre class="js">function uuid(a) {
  return a           // if the placeholder was passed, return
    ? (              // a random number from 0 to 15
      a ^            // unless b is 8,
      Math.random()  // in which case
      * 16           // a random number from
      &gt;&gt; a/4         // 8 to 11
      ).toString(16) // in hexadecimal
    : (              // or otherwise a concatenated string:
      [1e7] +        // 10000000 +
      -1e3 +         // -1000 +
      -4e3 +         // -4000 +
      -8e3 +         // -80000000 +
      -1e11          // -100000000000,
      ).replace(     // replacing
        /[018]/g,    // zeroes, ones, and eights with
        uuid         // random hex digits
      )
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="style-guide-module">
          <h2>style-guide</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="style-guide.exports">
                <h3>style-guide.exports</h3>
                <p>Expose <code>style</code>.</p>
                <pre class="js">module.exports = style;</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="style-guide.style">
                <h3>
                  style-guide.style
                </h3>
                <p>XXX: Maybe this goes through the<br />     tower source code and cleans it up.</p>
                <pre class="js">function style(name) {

}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="relation-module">
          <h2>relation</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="relation.hasMany">
                <h3>
                  relation.hasMany
                </h3>
                
                <pre class="js">exports.hasMany = function(name, options){
  return this.relation('incoming', name, options);
}

exports.hasOne = function(name, options){
  options || (options = {});
  options.limit = 1;

  return this.relation('incoming', name, options);
}

exports.through = function(name, options){
  return this;
}

exports.belongsTo = function(name, options){
  options || (options = {});
  options.limit = 1;
  
  return this.relation('outgoing', name, options);
}

exports.incoming = function(name, options){
  return this.relation('incoming', name, options);
}

exports.outgoing = function(name, options){
  return this.relation('outgoing', name, options);
}

exports.relation = function(type, name, options){
  options || (options = {});
  options.type = type;
  options.name = name;

  this.relations[options.name] = options;
  this.relations.push(options);

  return this;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="proxy-module">
          <h2>proxy</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="proxy.status">
                <h3>proxy.status</h3>
                <p>Current Status</p>
                <pre class="js">exports.status = {
  listening: false,
  crashing: false
};</pre>
              </section>
              
            
              
              
              <section class="property" id="proxy.process">
                <h3>proxy.process</h3>
                <p>Processes</p>
                <pre class="js">exports.process = undefined;</pre>
              </section>
              
            
              
              
              <section class="property" id="proxy.server">
                <h3>proxy.server</h3>
                <p>Server Instance</p>
                <pre class="js">exports.server = server = undefined;</pre>
              </section>
              
            
              
              
              <section class="property" id="proxy.serverFile">
                <h3>proxy.serverFile</h3>
                <p>Default server file.</p>
                <pre class="js">exports.serverFile = undefined;</pre>
              </section>
              
            
              
              
              <section class="property" id="proxy.serverFiles">
                <h3>proxy.serverFiles</h3>
                <p>Server files</p>
                <pre class="js">exports.serverFiles = [
  'index.js',
  'app.js',
  'server.js'
];</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="proxy.proxy">
                <h3>
                  proxy.proxy
                </h3>
                <p>Proxy Function</p>
                <pre class="js">function proxy(program) {
  var outerPort = program.port || 3000;
  var innerPort = outerPort + 1;

  // Find the file to load.
  if (process.argv[3]) {
    exports.serverFile = process.argv[3];
  } else {
    // Try finding the file.
    exports.serverFiles.forEach(function(file){
      if (exports.serverFile) return;
      if (fs.existsSync(process.cwd() + '/' + file)) {
        exports.serverFile = process.cwd() + '/' + file;
      }
    });
  }

  // Start the sub-process
  if (!exports.status.listening) {
    exports.process = fork(exports.serverFile, [innerPort]);
  }

  // Create the proxy server.
  httpProxy.createServer(function(req, res, proxy){
    proxy.proxyRequest(req, res, {
      host: 'localhost',
      port: innerPort
    });
  }).listen(outerPort, function(){
    console.log(&quot;Tower: Proxy started on port [&quot; + outerPort + &quot;]&quot;);
  });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="asset-module">
          <h2>asset</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="asset.collection">
                <h3>asset.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="asset.configs">
                <h3>asset.configs</h3>
                <p>Collection Config</p>
                <pre class="js">exports.configs = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="asset.templates">
                <h3>asset.templates</h3>
                <p>Collection of templates (in-memory)</p>
                <pre class="js">exports.templates = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="asset.layouts">
                <h3>asset.layouts</h3>
                <p>Collection of layouts (in-memory)</p>
                <pre class="js">exports.layouts = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="asset.templateFiles">
                <h3>asset.templateFiles</h3>
                <p>Collection of template files</p>
                <pre class="js">exports.templateFiles = [];</pre>
              </section>
              
            
              
              
              <section class="property" id="asset.layoutFiles">
                <h3>asset.layoutFiles</h3>
                <p>Collection of layout files</p>
                <pre class="js">exports.layoutFiles = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="asset.config">
                <h3>
                  asset.config
                </h3>
                <p>Config</p>
                <pre class="js">exports.config = function(ns, config){
  exports.configs[ns] = config;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="asset.add">
                <h3>
                  asset.add
                </h3>
                <p>Add</p>
                <pre class="js">exports.add = function(){

};</pre>
              </section>
              
            
              
              
              <section class="method" id="asset.fetch">
                <h3>
                  asset.fetch
                </h3>
                <p>Put all the templates and layouts in memory.</p>
                <pre class="js">exports.fetch = function(){
  // templates
  exports.templateFiles.forEach(function(file){
    exports.read('templates', file);
  });

  // layouts
  exports.layoutFiles.forEach(function(file){
    exports.read('layouts', file);
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="asset.read">
                <h3>
                  asset.read
                </h3>
                <p>Process file.</p>
                <pre class="js">exports.read = function(type, file){
  var data = fs.readFileSync(file, 'utf-8');
  var extension = file.substring(file.indexOf('.') + 1);
  var struct = {
    filename: file,
    extension: extension,
    data: data
  };

  exports[type][file] = struct;
  exports[type].push(struct);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="asset.initialize">
                <h3>
                  asset.initialize
                </h3>
                <p>Initialize the asset pipeline.</p>

<p>First, start by working with the templates and layouts. We need<br />to watch templates and hot-swap them into the browser when they<br />change. If a layout changes, then we'd do a simple full refresh<br />(and for simplicity we'd do that for everything) but later on<br />we'd want a hot-swap model for templates, especially not-rendered<br />ones.</p>

<p>1) Start a watcher for the templates and a separate one for layouts.</p>
                <pre class="js">exports.initialize = function(){
  // List of files.
  var templates = globule.find(exports.configs['templates'], {
    srcBase: process.cwd(),
    prefixBase: true
  });

  var layouts = globule.find(exports.configs['layouts'], {
    srcBase: process.cwd(),
    prefixBase: true
  });

  // Expose those files.
  exports.templateFiles = exports.templateFiles.concat(templates);
  exports.layoutFiles = exports.layoutFiles.concat(layouts);

  // Load the templates &amp; layouts into memory.
  exports.fetch();

  // Template watcher
  gaze(exports.configs['templates'] || [], function(){
    this.on('changed', function(filepath){
      if (exports.templates[filepath]) {
        exports.read('templates', filepath);
      }
    });

    this.on('deleted', function(filepath){
      if (exports.templates[filepath]) {
        delete exports.templates[filepath];
      }
    });

    this.on('added', function(filepath){
      exports.read('templates', filepath);
    });
  });

  // Layout watcher
  gaze(exports.configs['layouts'] || [], function(){
    this.on('changed', function(filepath){
      if (exports.layouts[filepath]) {
        exports.read('layouts', filepath);
      }
    });

    this.on('deleted', function(filepath){
      if (exports.layouts[filepath]) {
        delete exports.layouts[filepath];
      }
    });

    this.on('added', function(filepath){
      exports.read('layouts', filepath);
    });
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="asset.asset">
                <h3>
                  asset.asset
                </h3>
                <p>Asset Function</p>
                <pre class="js">function asset(req, res, next) {
  var url = req.url;
  var regex = /\/public\/js\/([^\/]+)/;

  console.log(url.match(regex));

  next();
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="s3-cookbook-module">
          <h2>s3-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
              <section class="method" id="s3-cookbook.create">
                <h3>
                  s3-cookbook.create
                </h3>
                <p>S3 cookbook.</p>

<p>XXX: should be called <code>upload</code>.</p>

<p>Just supports upload at the moment.</p>
                <pre class="js">exports.create = function(recipe, args, fn){
  var options = require('commander')
    .option('-k, --key &lt;value&gt;', 'API key')
    .option('-s, --secret &lt;value&gt;', 'API secret')
    .option('-b, --bucket &lt;name&gt;', 'S3 bucket')
    .option('-i, --input &lt;path&gt;', 'File to upload')
    .option('-o, --output &lt;path&gt;', 'Path on s3')
    .parse(args);

  var client = knox.createClient({
    key: options.key,
    secret: options.secret,
    bucket: options.bucket
  });

  var headers = { 'x-amz-acl': 'public-read' };

  client.putFile(options.input, options.output, headers, function(err, res){
    console.log(res.statusCode);
    fn();
  });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="input-directive-module">
          <h2>input-directive</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
          

          <h3>Methods:</h3>
          
            
            
          
          </div>
        </div>
        
        
        <div id="accessor-module">
          <h2>accessor</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
              <section class="method" id="accessor.get">
                <h3>
                  accessor.get
                </h3>
                <p>Get [nested] property from <code>obj</code>.</p>
                <pre class="js">function get(obj, path) {
  path = path.split('.');
  var val = findAttr(this, path.shift());

  // XXX: refactor to more generic/better system.
  while (path.length &amp;&amp; undefined !== val) {
    var name = path.shift();
    if (val.hasOwnProperty(name)) {
      val = val[name];
    // XXX: unoptimized, but should work for the moment.
    } else if ('function' === typeof val.get) {
      val = val.get([name].concat(path).join('.'));
      path = [];
    } else {
      val = undefined;
    }
  }

  return val;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="accessor.use">
                <h3>
                  accessor.use
                </h3>
                <p>Push additional check for attribute.</p>
                <pre class="js">exports.use = function(fn){

}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="filter-module">
          <h2>filter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="filter.collection">
                <h3>filter.collection</h3>
                <p>Expose <code>collection</code>.</p>
                <pre class="js">exports.collection = {};</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="filter.filter">
                <h3>
                  filter.filter
                </h3>
                <p>Filter for DOM directives.</p>
                <pre class="js">function filter(name, fn) {
  if (!fn &amp;&amp; exports.collection[name])
    return exports.collection[name];

  return exports.collection[name] = fn;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="rest-adapter-module">
          <h2>rest-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="cassandra-cookbook-module">
          <h2>cassandra-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="cassandra-cookbook.start">
                <h3>
                  cassandra-cookbook.start
                </h3>
                <p>Start cassandra.</p>
                <pre class="js">exports.start = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('cassandra', ['-f'], { stdio: 'inherit' });
  process.on('SIGINT', function(){
    child.kill();
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="cassandra-cookbook.stop">
                <h3>
                  cassandra-cookbook.stop
                </h3>
                <p>Stop cassandra.</p>
                <pre class="js">exports.stop = function(recipe, args){
  require('parse-processes')('tower start cassandra', function(err, processes){
    var killed = false;
    
    processes.forEach(function(p){
      if (p.cmd.match(/node +.+tower start cassandra/)) {
        process.kill(p.id, 'SIGINT');
        killed = true;
        return false;
      }
    });

    if (!killed) console.log(&quot;No cassandra process found to kill.&quot;);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="cassandra-cookbook.enter">
                <h3>
                  cassandra-cookbook.enter
                </h3>
                <p>Enter interactive cassandra console.</p>
                <pre class="js">exports.enter = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('cassandra-cli', [], { stdio: 'inherit' });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="cassandra-cookbook.install">
                <h3>
                  cassandra-cookbook.install
                </h3>
                <p>Install cassandra.</p>
                <pre class="js">exports.install = function(recipe, args){
  // XXX: only works for Ubuntu now.
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="app-cookbook-module">
          <h2>app-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="app-cookbook.create">
                <h3>
                  app-cookbook.create
                </h3>
                <p>Example:</p>

<p>tower create app my-app</p>
                <pre class="js">exports.create = function(recipe, args, fn){
  var strcase = require('tower-strcase')
    , tinfo = require('tinfo')
    , now = new Date()
    , projectName = args[4];

  var options = require('commander')
    .option('-o, --output-directory [value]', 'Output directory', process.cwd())
    .option('-b --bin', 'include executable', false)
    .option('--component', 'Add component.json', false)
    .option('--package', 'Add package.json', true)
    .option('--travis', 'Include travis.yml', false)
    .parse(args);

  recipe.outputDirectory(options.outputDirectory);

  recipe
    .set('projectName', projectName)
    .set('date', { year: now.getFullYear() })
    .set('strcase', strcase);

  tinfo(function(info){
    recipe
      .set('userRealName', info.name)
      .set('userTwitterName', info.username)
      .set('userGitHubName', info.username)
      .set('userEmail', info.email);

    recipe.directory(projectName, function(){
      if (options.bin) {
        recipe.directory('bin', function(){
          recipe.file(projectName);
          recipe.executable(projectName);
        });
      }

      recipe.template('README.md');

      if (options.component)
        recipe.template('component.json');

      if (options.package)
        recipe.template('package.json');

      recipe.copy('.gitignore');
      recipe.copy('.npmignore');

      if (options.travis)
        recipe.copy('.travis.yml');

      recipe.template('app.js')
        .directory('models')
        .directory('routes')
        .directory('templates')
        .directory('views')
        .directory('public', function(){
          recipe.directory('images')
            .directory('javascripts')
            .directory('stylesheets');
        });

      recipe.directory('test', function(){
        recipe.template('index.js', 'test.js');
        recipe.template('index.html', 'test.html');
      });
    });

    fn();
  }, this);
}

exports.remove = function(recipe, args){
  console.log('Not implemented');
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="node-cookbook-module">
          <h2>node-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
              <section class="method" id="node-cookbook.install">
                <h3>
                  node-cookbook.install
                </h3>
                <p>Install Node.js</p>

<p>Example:</p>

<p>$ tower install node -h example.com -u user</p>
                <pre class="js">exports.install = function(recipe, args, fn){
  // XXX: how to check if ubuntu vs. debian
  //      process.env? process.platform?
  var platform = 'darwin' === process.platform
    ? 'mac'
    : process.platform;

  switch (platform) {
    // XXX: only supports ubuntu right now.
    case 'linux':
      // XXX: assuming you're in ssh.
      //      maybe it asks for requirement.
      cmds([
          'sudo apt-get -y install python-software-properties python g++ make'
        , 'sudo apt-get -y install software-properties-common'
        , 'sudo add-apt-repository ppa:chris-lea/node.js'
        , 'sudo apt-get update'
        , 'sudo apt-get -y install nodejs'
        , 'node -v'
      ]);
      break;
    default:
      console.log(platform + ' not supported. Ping me and I\'ll help you add support.');
      //cmds([
      //    'brew install node'
      //]);
      break;
  }
}

exports.uninstall = contribute('`tower uninstall node`');

function cmd(args) {
  var args = args.split(/\s+/);
  var spawn = require('child_process').spawn;
  return spawn(args.shift(), args, { stdio: 'inherit' });
}

function cmds(array) {
  cmd(array.shift()).on('close', function(){
    process.nextTick(function(){
      if (array.length) cmds(array);
    });
  });
}

// XXX: maybe we have methods like this with helpful
// messages about how to contribute it.
function contribute(method) {
  console.log(method + ' not implemented.\nYou want to implement?\nPing us and we\'ll work with you to make it happen.');
  process.exit();
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="server-template-module">
          <h2>server-template</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="server-template.View">
                <h3>server-template.View</h3>
                <p>Expose <code>View</code>.</p>
                <pre class="js">exports.View = View;</pre>
              </section>
              
            
              
              
              <section class="property" id="server-template.context">
                <h3>server-template.context</h3>
                <p>Expose <code>context</code>.</p>
                <pre class="js">exports.context = context;</pre>
              </section>
              
            
              
              
            
              
              
              <section class="property" id="server-template.views">
                <h3>server-template.views</h3>
                <p>Registry of all the views.</p>
                <pre class="js">exports.views = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="server-template.bindings">
                <h3>server-template.bindings</h3>
                <p>Map of all the binding functions.</p>
                <pre class="js">exports.bindings = {};</pre>
              </section>
              
            
              
              
              <section class="property" id="server-template.helpers">
                <h3>server-template.helpers</h3>
                <p>Registry of view helpers.</p>
                <pre class="js">exports.helpers = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="server-template.Context">
                <h3>server-template.Context</h3>
                <p>Expose <code>Context</code>.</p>
                <pre class="js">exports.Context = Context;</pre>
              </section>
              
            
              
              
            
              
              
              <section class="property" id="server-template.ctx">
                <h3>server-template.ctx</h3>
                <p>Set of contexts. A context is tagged by a key and a value.</p>
                <pre class="js">exports.ctx = {};</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="server-template.view">
                <h3>
                  server-template.view
                </h3>
                <p>Create a new view instance.</p>
                <pre class="js">function view(name) {
  // Views require a name.
  if (!name) throw new Error('You need to specify a name for the view.');

  // Return a view instance if
  // it already exists.
  if (exports.views[name]) return exports.views[name];

  // Create a new view instance.
  var instance = new View({
    name: name
  });

  // Return a new view instance.
  return exports.views[name] = instance;
}</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="server-template.helper">
                <h3>
                  server-template.helper
                </h3>
                <p>Function used to define new view helpers.</p>
                <pre class="js">exports.helper = function(tag, attr, cb){
  exports.helpers.push({ tag: tag, attr: attr, cb: cb });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.clear">
                <h3>
                  server-template.clear
                </h3>
                <p>Clears the references of all the views.</p>
                <pre class="js">exports.clear = function(){
  exports.views = {};
  exports.context.clear();
  return exports;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.render">
                <h3>
                  server-template.render
                </h3>
                <p>Renders a view.</p>
                <pre class="js">exports.render = function(name){
  // increment the render count.
  view.render.count++;
  // Load the template to be rendered
  var template = view.template(name);

  var compiled = view.compile(template);
  if (view.context.res) view.context.res.send(compiled);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.compile">
                <h3>
                  server-template.compile
                </h3>
                <p>Compile the template.</p>
                <pre class="js">exports.compile = function(template){
  // Create a new global context if it doesn't already exist.
  context('global');

  // Load the template into cheerio.
  // XXX: can cache the cheerio dom then clone?
  $ = cheerio.load(template);

  // Render the views.
  exports.bindings.view($('html'), context('global'));

  // Return the rendered html.
  return $.html();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.findPlaceHolders">
                <h3>
                  server-template.findPlaceHolders
                </h3>
                <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br />Find and replace placeholders</p>
                <pre class="js">function findPlaceHolders(e, isChild){
  var viewholds;

  // Only look for script tags if the element isn't a child.
  if (isChild) {
    viewholds = e;
  } else {
    viewholds = e.find('script[type=&quot;text/viewhold&quot;]');
  }

  // If viewholds is still valid.
  if (viewholds) {
    // Loop through the viewholds.
    for (var viewKey in viewholds) {
      // Only access valid keys.
      if (viewholds.hasOwnProperty(viewKey)) {
        var cachedView = viewholds[viewKey];

        // Only if the cachedView is valid.
        if (cachedView &amp;&amp; 'object' === typeof cachedView) {
          // DOMify the cachedView.
          cachedView = $(cachedView);

          var viewName = cachedView.attr('data-view');
          var currentView = $(cachedView[viewName]);

          // Replace the script tag with the appropriate view.
          cachedView.after(currentView.toString());
          cachedView.remove();

          // Find any sub script tags and run this function again.
          var viewElement = e.find('[view=' + viewName + ']');
          var subScripts = viewElement.find('script[type=&quot;text/viewhold&quot;]');
          if (subScripts) findPlaceHolders(subScripts, true);
        }
      }
    }
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.content">
                <h3>
                  server-template.content
                </h3>
                <p>Replaces a DOM's content.</p>
                <pre class="js">function content(elem, ctx, func, filter) {
  // Find all the elements with the attribute `data-text`
  elem.find('[data-'+func+']').each(function(){
    // Get the attribute value and split by &quot;.&quot;
    var keys = this.attr('data-'+func+'').split('.');
    // Run a filter against the `keys` variable.
    // Some use cases need to remove the first index to match the
    // context.
    if ('function' === typeof filter) keys = filter(keys);
    // If keys is still valid.
    if (keys) {
      // Replace the html with the contexts of the key within the
      // current context `ctx`
      this[func](ctx.get(keys));
    }
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.helpers">
                <h3>
                  server-template.helpers
                </h3>
                <p>=======</p>

<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <blockquote>
            <blockquote>
              <p>984a6bb93198050c384c495b7125fc93b8ccf3ad<br />Run all the view helpers</p>
            </blockquote>
          </blockquote>
        </blockquote>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>
                <pre class="js">exports.bindings.helpers = function(elem, ctx){
  for (var i = 0, n = exports.helpers.length; i &lt; n; i++) {
    var helper = exports.helpers[i];
    elem.find(helper.tag + '[' + helper.attr + ']').each(function(i, e) {
      this[helper.attr] = this.attr(helper.attr);
      helper.cb.apply(this);
    });
  }
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.text">
                <h3>
                  server-template.text
                </h3>
                <p>Find and bind <code>data-text</code> attributes.</p>
                <pre class="js">exports.bindings.text = function(elem, ctx, filter){
  content(elem, ctx, 'text', filter);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.html">
                <h3>
                  server-template.html
                </h3>
                <p>HTML</p>
                <pre class="js">exports.bindings.html = function(elem, ctx, filter){
  content(elem, ctx, 'html', filter);
};

var viewCache = {};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.view">
                <h3>
                  server-template.view
                </h3>
                <p>Render a view and render all the bindings within the view.</p>
                <pre class="js">exports.bindings.view = function(elem, ctx){
  // Find all the elements that are defined as views.
  elem.find('[view]').each(function(){
    // Insert a new script tag as a placeholder after the view.
    this.after('&lt;script type=&quot;text/viewhold&quot; data-view=&quot;' + this.attr('view') + '&quot;&gt;&lt;/script&gt;');
  });

  // Cache the find call.
  var uviewCache = elem.find('[view]');

  // Loop through the uviewCache (#find call)
  // XXX: Rename the variables to be clearer.
  for (var kk in uviewCache) {
    // Only access valid keys.
    if (uviewCache.hasOwnProperty(kk) &amp;&amp; kk !== 'length') {
      var val = uviewCache[kk];
      var viewName = $(val).attr('view');
      // fill the viewName (key) with the appropriate element value.
      if (viewName) viewCache[viewName] = val;
    }
  }

  // Find all the views and remove them. (We will replace them later.)
  elem.find('[view]').remove();

  // Run all the bindings (except [view]).
  for (var key in exports.bindings) {
    if (key != 'view')
      exports.bindings[key](elem, ctx);
  }

  // Find and replace all placeholders.
  findPlaceHolders(elem);

  // Render child views. (recursively)
  elem.find('[view]').each(function(){
    exports.bindings.view(this, ctx);
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.each">
                <h3>
                  server-template.each
                </h3>
                <p>Render the [each] binding</p>

<p>XXX: Support both <code>data-each</code> and <code>each</code></p>
                <pre class="js">exports.bindings.each = function(elem, ctx){
  elem.find('[each]').each(function(){
    // Create a new context.
    var attr = this.attr('each').split(' '),
      source = attr[2],
      malloc = attr[0];

    context(source, ctx.key)
      .array(context(ctx.key).get(source));

    if (context(source).length() &gt;= 0) {
      // make this one a template, for use on the client.
      this.attr('style', 'display:none;');

      // Clone it before we start appending to it. Otherwise we get a replication bug.
      var original = this.clone();
      // Remove a few attributes.
      original.removeAttr('style');
      original.removeAttr('each');
      // Loop through the context vars.
      for (var i = 0, n = context(source).length(); i &lt; n; i++) {
        // Get the current object within the context. source = `user in users` &lt;-- users
        var obj = context(source).vars[i];
        // Form a new context name for each iteration
        var ctxName = malloc + '.' + i;

        // Clone the original clone again, that way we get a clean copy.
        var clone = original.clone();

        // Create a new context for the loop index.
        context(ctxName, source)
        // Add an object to the context.
        // This will copy each key and value separately to the context
        // scope.
        .object(obj);

        // Replace data-text with the appropriate value from
        // the specified context.
        exports.bindings.text(clone, context(ctxName), function(keys){
          // Remove the first index.
          keys.splice(0, 1);
          return keys;
        });

        var last = this.parent();

        // Append to the DOM!
        last.append(clone);
      }
    }
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.checked">
                <h3>
                  server-template.checked
                </h3>
                <p>Checked</p>
                <pre class="js">exports.bindings.checked = function(elem, ctx){
  // Find all the elements with the attribute `data-text`
  elem.find('[data-checked]').each(function(){
    // Get the attribute value and split by &quot;.&quot;
    var variable = this.attr('data-checked');

    if (variable === false) {
      return exports.bindings.unchecked(elem, ctx);
    }

    // Replace the html with the contexts of the key within the
    // current context `ctx`
    this.attr('checked', ctx.get(variable));
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.unchecked">
                <h3>
                  server-template.unchecked
                </h3>
                <p>Unchecked</p>
                <pre class="js">exports.bindings.unchecked = function(elem, ctx){
  // Find all the elements with the attribute `data-text`
  elem.find('[data-unchecked]').each(function(){
    // Get the attribute value and split by &quot;.&quot;
    var variable = this.attr('data-unchecked');

    if (variable === false) {
      this.attr('checked', ctx.get(variable));
    } else {
      this.removeAttr('checked');
    }
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.value">
                <h3>
                  server-template.value
                </h3>
                <p>Value</p>

<p>This is used for input boxes and such.</p>
                <pre class="js">exports.bindings.value = function(elem, ctx){
  // Find all the elements with the attribute `data-value`
  elem.find('[data-value]').each(function(){
    // Get the attribute value and split by &quot;.&quot;
    var variable = this.attr('data-value');

    this.attr('value', ctx.get(variable));
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.show">
                <h3>
                  server-template.show
                </h3>
                <p>Show</p>
                <pre class="js">exports.bindings.show = function(elem, ctx){
  // XXX

};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.hide">
                <h3>
                  server-template.hide
                </h3>
                <p>Hide</p>
                <pre class="js">exports.bindings.hide = function(elem, ctx){
  // XXX

};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.enabled">
                <h3>
                  server-template.enabled
                </h3>
                <p>Enabled</p>
                <pre class="js">exports.bindings.enabled = function(elem, ctx){
  // XXX

};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.disabled">
                <h3>
                  server-template.disabled
                </h3>
                <p>Disabled</p>
                <pre class="js">exports.bindings.disabled = function(elem, ctx){
  // XXX

};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="server-template.template">
                <h3>
                  server-template.template
                </h3>
                <p>Return the specified template.</p>
                <pre class="js">exports.template = function(name, path){
  name = name.replace(/\./, '/') + '.html';
  var lookup = path || view.template.lookup;
  // XXX: Implement view caching.
  //      This synchronous call
  //      will only happen
  //      once for every view.
  //      (unless the file changes.)
  return fs.readFileSync(lookup + name, 'utf-8');
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="server-template.View">
                <h3>
                  server-template.View
                </h3>
                <p>View constructor.</p>
                <pre class="js">function View(options) {
  // View/template name.
  this.name = options.name;
  // children for the current view.
  this.children = [];
  // DOM element.
  this.elem = null;
  // Current view's context.
  this.ctx = {};
}

Emitter(View.prototype);</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.child">
                <h3>
                  server-template.child
                </h3>
                <p>Add a child view.</p>
                <pre class="js">View.prototype.child = function(name){
  if (!this.children[name]) {
    this.children.push(this.children[name] = view(name));
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.swap">
                <h3>
                  server-template.swap
                </h3>
                <p>Swap the current child view.</p>
                <pre class="js">View.prototype.swap = function(name){
  // XXX: if there are multiple child views, maybe switch by name.
  //      since it's only handling one view now this should work.
  this.children[0] = view(name);
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.findPlaceHolders">
                <h3>
                  server-template.findPlaceHolders
                </h3>
                <p>Find and replace placeholders</p>
                <pre class="js">function findPlaceHolders(e, isChild){
  var viewholds;

  // Only look for script tags if the element isn't a child.
  if (isChild) {
    viewholds = e;
  } else {
    viewholds = e.find('script[type=&quot;text/viewhold&quot;]');
  }

  // If viewholds is still valid.
  if (viewholds) {
    // Loop through the viewholds.
    for (var viewKey in viewholds) {
      // Only access valid keys.
      if (viewholds.hasOwnProperty(viewKey)) {
        var cachedView = viewholds[viewKey];

        // Only if the cachedView is valid.
        if (cachedView &amp;&amp; 'object' === typeof cachedView) {
          // DOMify the cachedView.
          cachedView = $(cachedView);

          var viewName = cachedView.attr('data-view');
          var currentView = $(viewCache[viewName]);

          // Replace the script tag with the appropriate view.
          cachedView.after(currentView.toString());
          cachedView.remove();

          // Find any sub script tags and run this function again.
          var viewElement = e.find('[view=' + viewName + ']');
          var subScripts = viewElement.find('script[type=&quot;text/viewhold&quot;]');
          if (subScripts) findPlaceHolders(subScripts, true);
        }
      }
    }
  }
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.content">
                <h3>
                  server-template.content
                </h3>
                <p>Replaces a DOM's content.</p>
                <pre class="js">function content(elem, ctx, func, filter) {
  // Find all the elements with the attribute `data-text`
  elem.find('[data-'+func+']').each(function(){
    // Get the attribute value and split by &quot;.&quot;
    var keys = this.attr('data-'+func+'').split('.');
    // Run a filter against the `keys` variable.
    // Some use cases need to remove the first index to match the
    // context.
    if ('function' === typeof filter) keys = filter(keys);
    // If keys is still valid.
    if (keys) {
      // Replace the html with the contexts of the key within the
      // current context `ctx`
      this[func](ctx.get(keys));
    }
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.findParent">
                <h3>
                  server-template.findParent
                </h3>
                <p>Find the elements' parent or current view.</p>
                <pre class="js">function findParent(el) {
  var parent = el.parent('[view]');
  if (parent.attr('view')) return parent;
}

// Built-in view helpers.
exports.helper('script', 'asset', function(){
  this.attr('src', bundler.js(this.asset));
});

exports.helper('style', 'asset', function(){
  this.attr('href', bundler.css(this.asset));
});

exports.helper('img', 'asset', function(){
  this.attr('href', bundler.img(this.asset));
});</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="server-template.context">
                <h3>
                  server-template.context
                </h3>
                <p>Create or access a context.<br />A global context is first created with a key of 'global'. Secondary contexts<br />can be created for <code>each</code> loops or if it's explicitly defined.</p>

<p>Each context that's within another context needs to define it's parent.</p>
                <pre class="js">function context(key, parent) {
  if (!key) throw new Error('A context needs a key.');

  if (exports.ctx[key]) return exports.ctx[key];

  return exports.ctx[key] = new Context({
      key: key
    , parent: parent
  });
};</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="server-template.clear">
                <h3>
                  server-template.clear
                </h3>
                <p>Clear the contexts (Mostly used for testing.)</p>
                <pre class="js">exports.clear = function(){
  exports.ctx = {};
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.Context">
                <h3>
                  server-template.Context
                </h3>
                <p>Context constructor.</p>
                <pre class="js">function Context(options) {
  this.key = options.key;
  this.parent = exports.ctx[options.parent];
  this.children = {};
  this.vars = {}; // A variable scope
}</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.get">
                <h3>
                  server-template.get
                </h3>
                <p>Get a variable. If a variable is not defined within the current<br />context we'll search the parent's context and keep going up the<br />chain until we have no more parents or we find the variable.</p>
                <pre class="js">Context.prototype.get = function(key){
  if ('string' === typeof key) key = key.split('.');

  var prev = this.vars[key[0]];
  // If we can't find the key, return undefined.
  if (!prev) return undefined;

  for (var i = 1, n = key.length; i &lt; n; i++) {
    // Can't find the key, return undefined.
    if (!prev[key[i]]) return undefined;
    prev = prev[key[i]];
  }

  return prev;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.set">
                <h3>
                  server-template.set
                </h3>
                <p>Assign values to keys to <code>vars</code>.<br />Keys can be strings, arrays, objects or numbers.</p>
                <pre class="js">Context.prototype.set = function(key, value){
  if ('string' === typeof key) key = key.split(&quot;.&quot;);

  // Check if the key is a number.
  else if (!isNaN(parseFloat(key)) &amp;&amp; isFinite(key)) {
    this.vars[key] = value;
    return this;
  }

  // If a key only has a single index, assign it directly.
  if (1 === key.length) {
    this.vars[key[0]] = value;
    // Make this method chain-able.
    return this;
  }

  // Previous object.
  // This will be added onto which will basically turn into:
  // `this.vars[key[0]][key[1]][key[2]] = value;
  var prev = this.vars;
  // Initiate a new loop around the key array.
  for (var i = 0, n = key.length; i &lt; n; i++) {
    // if `prev` isn't null or undefined. If it's null|undefined
    // we either return because we're done, or we throw an error
    if (prev) {
      // Stack a new part to the `prev` object. If we're at the last
      // iteration within the loop, we can assign the real value.
      // Otherwise we can set a new object to it.
      prev = prev[key[i]] = (i === key.length - 1)
        ? value
        : {};
    } else {
      // If we're at the end of the loop.
      if (i === key.length - 1) {
        // we're done.
        return this;
      } else {
        // XXX: Not sure if we should throw an error.
        throw new Error('Failure setting variable within a context.');
      }
    }
  }

  // Make this method chain-able.
  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.length">
                <h3>
                  server-template.length
                </h3>
                <p>Return the length of the <code>vars</code> object.</p>
                <pre class="js">Context.prototype.length = function(){
  return Object.keys(this.vars).length;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.array">
                <h3>
                  server-template.array
                </h3>
                <p>Set each array key as a separate variable within the current context.</p>
                <pre class="js">Context.prototype.array = function(arr){
  if (!arr || 0 === arr.length) return this;

  for (var i = 0; i &lt; arr.length; i++) {
    var val = arr[i];
    this.set(i, val);
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.object">
                <h3>
                  server-template.object
                </h3>
                <p>Turn an object into separate keys</p>
                <pre class="js">Context.prototype.object = function(obj){
  for (var key in obj) {
    var val = obj[key];
    this.set(key, val);
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="server-template.child">
                <h3>
                  server-template.child
                </h3>
                <p>Create a child context.</p>
                <pre class="js">Context.prototype.child = function(name){
  this.children[name] = context(name);
  return this;
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="reload-module">
          <h2>reload</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="reload.callbacks">
                <h3>reload.callbacks</h3>
                <p>Array of callbacks.</p>
                <pre class="js">exports.callbacks = [];</pre>
              </section>
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="reload.onMigrate">
                <h3>
                  reload.onMigrate
                </h3>
                <p>Register a callback function to run when<br />a migration happens.</p>
                <pre class="js">exports.onMigrate = function(name, cb){
  if (!cb) {
    callback = name;
    name = undefined;
  }
  exports.callbacks.push({ name: name, callback: cb });
};

exports.migrationData = function(name){
  return old_data[name];
};

var reloading = false;
exports.reload = function(){
  if (reloading) return;

  reloading = true;

  exports.callbacks.forEach(function(provider){
    var status = provider.callback();
    if (status[0]) {
      mgData[provider.name] = status[0];
      console.log(mgData);
    }
  });

  try {
    var json = JSON.stringify({
        data: mgData
      , reload: true
    });
  } catch(e) {
    console.log(&quot;Couldn't serialize data for migration&quot;, exports.migrationData);
    throw e;
  };

  if (supported) {
    session.setItem(key, json);
  } else {
    console.log(&quot;Unsupported browser for hot reload.&quot;);
  }

  window.location.reload();
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="client-session-module">
          <h2>client-session</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="client-session.adapters">
                <h3>client-session.adapters</h3>
                <p>Export Adapter Registry.</p>
                <pre class="js">exports.adapters = {};</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="client-session.session">
                <h3>
                  client-session.session
                </h3>
                <p>Session container object/method.</p>

<p>session('hello', 123)</p>
                <pre class="js">function session (key, value) {

  if (arguments.length === 2) {
    return exports.adapter.set(key,value);
  } else {
    return exports.adapter.get(key);
  }

}

exports.adapter = null;

exports.adapters = [
    'session'
  , 'local'
];

session.init = function() {

  for (var i = 0, n = exports.adapters.length; i &lt; n; i++) {
    if (adapter(exports.adapters[i]).supported) {
      return exports.adapter = adapter(exports.adapters[i]);
    }
  }

};</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="method" id="client-session.Adapter">
                <h3>
                  client-session.Adapter
                </h3>
                <p>Adapter Constructor.</p>
                <pre class="js">function Adapter(options) {
  this.name = options.name;
  this.methods = {};
  this.supported = false;
}

Adapter.prototype.support = function(cb) {
  this.supported = cb();
  return this;
};

Adapter.prototype.method = function(type, cb) {
  this.methods[type] = cb;
  return this;
};

Adapter.prototype.set = function(key, value) {
  if (this.methods.set)
    return this.methods.set(key, value);
};

Adapter.prototype.get = function(key) {
  return this.methods.get(key);
};</pre>
              </section>
              
            
          
            
            
              
              
            
          
            
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="client-socket-module">
          <h2>client-socket</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
              <section class="property" id="client-socket.exports">
                <h3>client-socket.exports</h3>
                <p>Module Export</p>
                <pre class="js">module.exports = Socket;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
              <section class="method" id="client-socket.Socket">
                <h3>
                  client-socket.Socket
                </h3>
                <p>Socket Constructor.</p>
                <pre class="js">function Socket() {

  this.callbacks = {
    send: [],
    get: []
  };

  this.client = null;
  this.connected = false;

  this.init();
}</pre>
              </section>
              
            
              
              
              <section class="method" id="client-socket.init">
                <h3>
                  client-socket.init
                </h3>
                <p>Initialize the socket systems.</p>
                <pre class="js">Socket.prototype.init = function() {
  var self = this;

  this.client = new SockJS('http://'+window.location.host+'/echo', null, {debug: true, devel: true});</pre>
              </section>
              
            
              
              
              <section class="method" id="client-socket.onopen">
                <h3>
                  client-socket.onopen
                </h3>
                <p>When the connection is open.</p>
                <pre class="js">this.client.onopen = function() {
    self.connected = true;
    self.runCallbacks('send');
  };</pre>
              </section>
              
            
              
              
              <section class="method" id="client-socket.onclose">
                <h3>
                  client-socket.onclose
                </h3>
                <p>When the connection closes</p>

<p>XXX: Not sure if their should be some sort of<br />     reconnection or if sockjs does this automatically.</p>
                <pre class="js">this.client.onclose = function() {
    self.connected = false;
  };</pre>
              </section>
              
            
              
              
              <section class="method" id="client-socket.onmessage">
                <h3>
                  client-socket.onmessage
                </h3>
                <p>Receive a Message</p>
                <pre class="js">this.client.onmessage = function(message) {
    self.callbacks.get.forEach(function(cb) {
      var msg = JSON.parse(message.data);
      var correct = false;
      if (msg) {
        for (var key in cb.criteria) {
          var val = cb.criteria[key];
          if (msg[key] &amp;&amp; msg[key] === val) {
            correct = true;
          } else {
            return;
          }
        }
      }

      if (correct) cb.cb.apply(self, [msg]);

    });
  };

};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-socket.runCallbacks">
                <h3>
                  client-socket.runCallbacks
                </h3>
                <p>Run the callbacks given the specified type.</p>
                <pre class="js">Socket.prototype.runCallbacks = function(type) {
  var cbs = this.callbacks[type]
    , self = this;

  if (cbs) {
    if (this.connected) {
      cbs.forEach(function(cb) {
        cb.apply(self, [self]);
      });
    }
  } else {
    throw new Error(&quot;Cannot find the specified callback type.&quot;);
  }

};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-socket.emit">
                <h3>
                  client-socket.emit
                </h3>
                <p>Emit a JSON message to the server.</p>
                <pre class="js">Socket.prototype.emit = function(message) {

  if (this.connected) {
    this.client.send(JSON.stringify(message));
  } else {
    this.callbacks.send.push(function(socket) {
      socket.send(JSON.stringify(message));
    });
  }

  return this;
};</pre>
              </section>
              
            
              
              
              <section class="method" id="client-socket.get">
                <h3>
                  client-socket.get
                </h3>
                <p>Create a new callback to receive a specific message.</p>
                <pre class="js">Socket.prototype.get = function(criteria, callback) {
  var self = this;

  this.callbacks.get.push({
    criteria: criteria
    , cb: callback
  });

  return this;
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="server-socket-module">
          <h2>server-socket</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
          

          <h3>Methods:</h3>
          
            
            
          
          </div>
        </div>
        
        
        <div id="bundler-module">
          <h2>bundler</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="bundler.js">
                <h3>
                  bundler.js
                </h3>
                <p>Retrieve JavaScript assets.</p>
                <pre class="js">exports.js = function(asset){
  var file = globule.find(path.join(process.cwd(), 'public', 'js', asset + '*.js'))[0];
  if (file) return file.replace(process.cwd(), '')
};</pre>
              </section>
              
            
              
              
              <section class="method" id="bundler.css">
                <h3>
                  bundler.css
                </h3>
                <p>Retrieve CSS assets.</p>
                <pre class="js">exports.css = function(asset){
  var file = globule.find(path.join(process.cwd(), 'public', 'css', asset + '*.css'))[0];

  return file.replace(process.cwd(), '')
};</pre>
              </section>
              
            
              
              
              <section class="method" id="bundler.img">
                <h3>
                  bundler.img
                </h3>
                <p>Retrieve Image assets.</p>
                <pre class="js">exports.img = function(asset){
  var file = globule.find(path.join(process.cwd(), 'public', 'img', asset + '.*'))[0];

  return file.replace(process.cwd(), '');
};

exports.watch = function(){
  // Find all the dependencies.
  app = new Builder(process.cwd());
  app.addLookup('../');

  build(app);

  dirs.forEach(function(elem, i){
    dirs[i] = elem + '**</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="bundler.normalize">
                <h3>
                  bundler.normalize
                </h3>
                <p>/*');</p>

<p>gaze(dirs, function(err, watcher){<br />    this.on('all', function(event, filepath){<br />      console.log("Compiling Client-side Assets...");<br />      exports.fork();<br />    });<br />  });</p>

<p>exports.fork();<br />};</p>

<p>exports.fork = function(){<br />  <em>process = fork(</em>_dirname + '/fork.js', [process.cwd()]);<br />};</p>

<p>var dirs = []<br />  , app  = null;</p>

<p>function build(builder) {<br />  dirs.push(builder.dir);<br />  if (builder.hasDependencies()) {<br />    Object.keys(builder.dependencies()).forEach(function(dep){<br />      dep = normalize(dep);</p>

<pre><code>  if (app.ignoring(dep)) return;

  app.ignore(dep);

  builder.lookup(dep, function(err, dir){
    if (err) return;

    var b = new Builder(dir, builder);
    return build(b);
  });
});
</code></pre>

<p>}<br />}</p>

<p>/**<br />Normalize package <code>name</code>.</p>
                <pre class="js">function normalize(name) {
  return name.replace('/', '-');
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="builder-module">
          <h2>builder</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="builder.exports">
                <h3>builder.exports</h3>
                <p>Expose <code>build</code>.</p>
                <pre class="js">module.exports = build;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
          
            
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="builder.buildScripts">
                <h3>
                  builder.buildScripts
                </h3>
                <p>@override<br />Implement our own custom function buildScripts.</p>
                <pre class="js">Builder.prototype.buildScripts = function(fn){
  this.buildType('scripts', fn, register);
};</pre>
              </section>
              
            
              
              
              <section class="method" id="builder.register">
                <h3>
                  builder.register
                </h3>
                <p>Register a package.</p>
                <pre class="js">function register(builder, file, js) {
  var fullPath = builder.root ? builder.config.name + '/' + file : builder.basename + '/' + file;
  var main = (builder.config.main) ? builder.config.main : builder.config.scripts[0];
  var pack = '';

  if (!packs[builder.config.name]) {
    pack = 'require.package(&quot;' + builder.config.name + '&quot;, &quot;' + main + '&quot;); ';
    //pack += 'require.alias(&quot;' + builder.config.repo.replace(/\//, '-') + '&quot;, &quot;' + builder.config.repo.replace(/\//, '-') + '&quot;);';
    packs[builder.config.name] = true;
  }

  var code = uglify.minify(js, {
    fromString: true,
    mangle: false,
    compress: false
  }).code;

  return pack + 'require.module(&quot;' + file + '&quot;, &quot;return function(exports, require, module, __filename, __dirname) {' + encodeURI(code + ' return (module.exports !== {}) ? module.exports : exports; }; //@ sourceURL=' + fullPath) + '&quot;);';
}</pre>
              </section>
              
            
              
              
              <section class="method" id="builder.build">
                <h3>
                  builder.build
                </h3>
                <p>Main builder function</p>
                <pre class="js">function build(basePath) {
  p = basePath;
  // Create a new Builder object.
  var app = new Builder(basePath || '/Users/Daniel/Documents/Projects/tower-modules/exampleApp/');

  app.addLookup(path.join(basePath, '../'));

  app.addSourceURLs();

  app.build(function(err, res){
    if (err) throw err;

    // Glob the `app-*.js` javascript file.
    globule
      .find(path.join(app.dir, 'public', 'js', 'app-*.js'))
      .forEach(function(file){
        // Delete each one of them.
        fs.unlinkSync(file);
      });

    var contents = res.require + res.js + 'require(&quot;' + app.config.name + '&quot;)';

    fs.writeFileSync(path.join(app.dir, 'public', 'js', 'app-' + md5(contents) + '.js'), contents);
  });
}</pre>
              </section>
              
            
          
            
            
              
              
              <section class="method" id="builder.exports">
                <h3>
                  builder.exports
                </h3>
                <p>CoffeeScript builder middleware.</p>
                <pre class="js">module.exports = function(builder) {


};</pre>
              </section>
              
            
          
            
            
              
              
              <section class="method" id="builder.package">
                <h3>
                  builder.package
                </h3>
                
                <pre class="js">function package(name) {
  if (!name) throw new Error(&quot;Package defined is missing a name.&quot;);

  var instance = new Package(name);
  package.packages[name] = instance;
  package.current = instance;
  return instance;
}

package.packages = {};
package.current  = null;

package.require = function(name) {
  if (package.packages[name]) {
    return package.packages[name].require();
  }

  return false;
};


function Package(name) {
  this.name = name;
  this.modules = {};
  this.main = &quot;index.js&quot;;
}

Package.prototype.add = function(name, instance) {
  this.modules[name] = instance;
};

Package.prototype.require = function(name) {
  var core = false;
  if (!name) {
    core = true;
    name = this.main;
  }

  if (this.modules[name]) {
    return this.modules[name].require();
  } else if (core &amp;&amp; this.modules['app.js']) {
    return this.modules['app.js'].require();
  }

  return false;
};


function module(name, source) {
  var options = {name: name, source: source};

  if (!name || !source) throw new Error(&quot;Cannot create a module with an empty name or source input.&quot;);

  var instance = new Module(options);
  package.current.add(name, instance);
  return instance;
}

module.current = null;

function Module(options) {
  this.name = options.name;
  this.source = options.source;
  this.moduleObject = {
    exports: {}
  };
  this.package = package.current;
}

Module.prototype.require = function() {

  var Compile, source = this.source, self = this;

  // XXX: Add //@ sourceURL= tag
  module.current = this;
  Compile = function(exports, require, module, __filename, __dirname) {

      try {
        eval(decodeURI(source));
      } catch(e) {
        throw new Error(e);
      }



    if (module.exports !== {}) {
      return module.exports;
    } else {
      return exports;
    }

  };

  return Compile({}, require, this.moduleObject, this.name, this.package.name + &quot;/&quot; + this.name.replace(/[^\/]+$/g, ''));
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="orientdb-cookbook-module">
          <h2>orientdb-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
              <section class="property" id="orientdb-cookbook.cookbook">
                <h3>orientdb-cookbook.cookbook</h3>
                
                <pre class="js">exports.cookbook = 'orientdb';

exports.start = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('orientdb', ['start'], { stdio: 'inherit' });
  process.on('SIGINT', function(){
    child.kill();
  });
}

exports.stop = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('orientdb', ['stop'], { stdio: 'inherit' });
}

exports.connect = function(recipe, args){
  var spawn = require('child_process').spawn;
  // If the detached option is set, the child process will be made the leader of a new process group. This makes it possible for the child to continue running after the parent exits.
  var child = spawn('orientdb-console', [], { stdio: 'inherit' });
  // http://superuser.com/questions/135197/using-kubuntu-sometimes-i-cant-see-what-im-trying-in-the-terminal-window-but

  // XXX: can't figure out how to reset the state of the terminal
  // so if you exit w/ CTRL-C (which you're not supposed to I guess on orientdb)
  // it will manually call `reset`.
  process.on('SIGINT', function(){
    child.on('exit', function(){
      process.kill(process.pid, 'SIGTERM');
    });
  });

  process.on('SIGTERM', function(){
    // http://ascii-table.com/ansi-escape-sequences-vt-100.php
    // http://stackoverflow.com/questions/8813142/clear-terminal-window-in-node-js-readline-shell
    // https://github.com/mscdex/node-ncurses
    // process.stdout.write('\u001B[1J');
    //process.stdin.setRawMode(false);
    //console.log(process.stdin)
    //console.log(process.stdout)
    process.exit(1);
  });
}</pre>
              </section>
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="redis-cookbook-module">
          <h2>redis-cookbook</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
              <section class="property" id="redis-cookbook.cookbook">
                <h3>redis-cookbook.cookbook</h3>
                
                <pre class="js">exports.cookbook = 'redis';

exports.start = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('redis-server', [], { stdio: 'inherit' });
  process.on('SIGINT', function(){
    child.kill();
  });
}

exports.stop = function(recipe, args){
  var exec = require('child_process').exec;
  exec('ps -ax | grep &quot;tower start redis&quot;', function(err, stdin, stderr){
    var killed = false;
    stdin.split('\n').forEach(function(line){
      // XXX: parse pid, should be separate module
      if (line.match(/^(\d+).+node +.+tower start redis/)) {
        exec('kill -s INT ' + RegExp.$1);
        killed = true;
      }
    });
    if (!killed) console.log(&quot;No redis process found to kill.&quot;);
  });
}

exports.connect = function(recipe, args){
  var spawn = require('child_process').spawn;
  var child = spawn('redis-cli', [], { stdio: 'inherit' });
}</pre>
              </section>
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="facebook-adapter-module">
          <h2>facebook-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="facebook-adapter.exports">
                <h3>facebook-adapter.exports</h3>
                <p>Expose <code>facebook</code> adapter.</p>
                <pre class="js">module.exports = adapter('facebook');</pre>
              </section>
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="couchdb-adapter-module">
          <h2>couchdb-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
              <section class="property" id="couchdb-adapter.exports">
                <h3>couchdb-adapter.exports</h3>
                <p>Expose <code>couchdb</code> adapter.</p>
                <pre class="js">module.exports = adapter('couchdb')
  , action = module.exports.action; // or `action`

action('insert')
  .on('exec', function(context){
    nano.use(context.name).insert({ crazy: true }, 'rabbit', function(err, body, header){
      if (err) {
        console.log('[alice.insert] ', err.message);
        return;
      }
      console.log('you have inserted the rabbit.')
      console.log(body);
    });
  });

action('destroy')
  .on('execute', function(){

  });

action('database.destroy')
  .on('execute', function(context, fn){
    nano.db.destroy(context.name, fn);
  });

action('database.create')
  .on('execute', function(context, fn){
    nano.db.create(context.name, function(){
      
    });
  });</pre>
              </section>
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="mysql-adapter-module">
          <h2>mysql-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="mysql-adapter.exports">
                <h3>mysql-adapter.exports</h3>
                <p>Expose <code>MySQLAdapter</code>.</p>
                <pre class="js">module.exports = MySQLAdapter;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="mysql-adapter.__proto__">
                <h3>mysql-adapter.__proto__</h3>
                <p>Inherits from <code>Stream.prototype</code>.</p>
                <pre class="js">Command.prototype.__proto__ = Stream.prototype;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="property" id="mysql-adapter.exports">
                <h3>mysql-adapter.exports</h3>
                <p>Expose <code>Select</code>.</p>
                <pre class="js">module.exports = Select;

function Select(adapter, criteria) {
  Command.apply(this, arguments);
}

Select.prototype.__proto__ = Comand.prototype;

Select.prototype.toSQL = function(){
  // take this from ../index.js
}</pre>
              </section>
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="mysql-adapter.init">
                <h3>
                  mysql-adapter.init
                </h3>
                <p>Called when a new <code>MySQLAdapter</code> is initialized.</p>
                <pre class="js">MySQLAdapter.prototype.init = function(){
  this.connections = {};
}</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.connect">
                <h3>
                  mysql-adapter.connect
                </h3>
                <p>Create a new connection to MySQL.</p>

<p>Example</p>

<p>mysql.connect({<br />       host: 'localhost'<br />     , user: 'me'<br />     , password: 'secret'<br />     , name: 'my_db'<br />   });</p>
                <pre class="js">MySQLAdapter.prototype.connect = function(config, fn){
  var connection = this.connections[config.name] = mysql.createConnection({
      host: config.host
    , user: config.user
    , password: config.password
    , database: config.name
  });

  // XXX: set timeout if takes too long and never connects
  connection.connect(function(err){
    if (fn) fn(err);
  });

  connection.on('error', function(err){
    // this.emit('error');
  })
}</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.disconnect">
                <h3>
                  mysql-adapter.disconnect
                </h3>
                <p>Remove connection to MySQL.</p>
                <pre class="js">MySQLAdapter.prototype.disconnect = function(name){
  this.connections[name].end();
}

MySQLAdapter.prototype.connection = function(name){
  return this.connections[name];
}</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.execute">
                <h3>
                  mysql-adapter.execute
                </h3>
                <p>Convert the criteria into MySQL queries.</p>
                <pre class="js">MySQLAdapter.prototype.execute = function(criteria, name, fn){
  var queryString = this.toSQL(criteria);
    , records = []
    , self = this;

  var error;</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="mysql-adapter.deserialize">
                <h3>
                  mysql-adapter.deserialize
                </h3>
                <p>Convert database attribute names and values<br />into their tower model equivalents.</p>
                <pre class="js">MySQLAdapter.prototype.deserialize = function(data, schema){
  return data;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.typecast">
                <h3>
                  mysql-adapter.typecast
                </h3>
                <p>Convert JavaScript value to MySQL datatype.</p>
                <pre class="js">MySQLAdapter.prototype.typecast = function(value){
  if ('string' == typeof value)
    return mysql.escape(value);
  else
    return value;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.toSQL">
                <h3>
                  mysql-adapter.toSQL
                </h3>
                <p>Takes a criteria array and returns a squel query.</p>
                <pre class="js">MySQLAdapter.prototype.toSQL = function(criteria){
  var last = criteria[criteria.length - 1];

  if ('execute' == last[0]) {
    switch (last[1]) {
      case 'insert':
        return this.toSQLInsert(criteria);
        break;
      case 'update':
        return this.toSQLUpdate(criteria);
        break;
      case 'delete':
        return this.toSQLDelete(criteria);
        break;
      default:
        return this.toSQLSelect(criteria);
        break;
    }
  } else {
    return this.toSQLSelect(criteria);
  }
}

MySQLAdapter.prototype.toSQLSelect = function(criteria){
  var query = squel.select({
      autoQuoteTableNames: true
    , autoQuoteFieldNames: true
  });

  var self = this;

  var returns = {}
    , tables = {};

  // XXX: need a map of table to field names

  function field(name, alias) {
    if (returns[name]) return;
    returns[name] = true;
    if (alias) returns[alias] = true;
    query.field(name, alias); 
  }

  function table(name) {
    if (tables[name]) return;
    hash.tables[name] = {};
    tables[name] = true;
    query.from(name);
  }

  var start = criteria[0][1];

  var hash = {
      context: start // tells where the fields without a table are coming from.
    , tables: {}
    , returns: {}
  };

  hash.tables[start] = {};

  function addPath(path) {
    var parts = path.split('.');
    if (parts.length == 2) {
      (hash.tables[parts[0]] || (hash.tables[parts[0]] = {}))[parts[1]] = true;
    }
  }

  // https://github.com/carlwoodward/rel

  criteria.forEach(function(clause, i){
    switch (clause[0]) {
      case 'select':
        var path = clause[1].split('.');
        table(path[0]);
        if (1 &lt; path.length) {
          hash.tables[path[0]][path[1]] = true;
          field(path[1]);
        }
        break;
      case 'start':
        break;
      case 'where':
        //addPath(clause[1])
        //addPath(clause[3])
        var condition = operators[clause[2]](clause[1], clause[3]);

        // XXX: only handles simple cases here, not joins.
        if ('string' == typeof clause[3] &amp;&amp; clause[3].match(/(\w+)\.(\w+)/)) {
          query.join(RegExp.$1, null, condition);
        } else { // simple case
          query.where(condition);
        }

        break;
      case 'as':
        // user as commenter
        query.field(criteria[i - 1][1], clause[1]);
        break;
      case 'alias':
        field(clause[1], clause[2]);
        break;
      case 'return':
        for (var i = 1, n = clause.length; i &lt; n; i++) {
          hash.returns[clause[i]] = true;
          field(clause[i]);
        }
        break;
      case 'order':
        query.order(clause[1], clause[2]); // 0 == 'DESC', 1 == 'ASC'
        break;
      case 'limit':
        query.limit(clause[1]);
        break;
      case 'offset':
        query.offset(clause[1]);
        break;
      case 'group':
        break;
    }
  });

  // XXX: SELECT should be based on the `hash.returns`

  //if (isBlank(returns)) query.from(start);

  return query.toString();
}</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.schema">
                <h3>
                  mysql-adapter.schema
                </h3>
                <p>Fetch the entire schema across your mysql databases.</p>
                <pre class="js">MySQLAdapter.prototype.schema = function(fn){
  var schema = {}
    , fields
    , table
    , field
    , database;

  this.connection.query('select * from information_schema.columns order by table_name,ordinal_position;')
    .on('error', function(err) {
      fn(err);
      // Handle error, an 'end' event will be emitted after this as well
      // XXX: exponential retry?
    })
    .on('result', function(row) {
      // { TABLE_CATALOG: 'def',
      //   TABLE_SCHEMA: 'asdf',
      //   TABLE_NAME: 'asdf',
      //   COLUMN_NAME: 'asdf',
      //   ORDINAL_POSITION: 1,
      //   COLUMN_DEFAULT: null,
      //   IS_NULLABLE: 'NO',
      //   DATA_TYPE: 'bigint',
      //   CHARACTER_MAXIMUM_LENGTH: null,
      //   CHARACTER_OCTET_LENGTH: null,
      //   NUMERIC_PRECISION: 19,
      //   NUMERIC_SCALE: 0,
      //   CHARACTER_SET_NAME: null,
      //   COLLATION_NAME: null,
      //   COLUMN_TYPE: 'bigint(20)',
      //   COLUMN_KEY: 'PRI',
      //   EXTRA: '',
      //   PRIVILEGES: 'select,insert,update,references',
      //   COLUMN_COMMENT: '' }
      database = row.TABLE_SCHEMA;
      // if (ignoreDatabase(database)) return;
      database = (schema[database] || (schema[database] = {}));

      table = row.TABLE_NAME;
      // if (ignoreTable(table)) return;

      table = (database[table] || (database[table] = {}));

      field = table[row.COLUMN_NAME] = { type: row.DATA_TYPE, validators: [] };

      // is primary
      if ('PRI' == row.COLUMN_KEY) field.primary = true;

      field.validators.push(['type', row.COLUMN_TYPE]);
      if (row.CHARACTER_MAXIMUM_LENGTH != null)
        field.validators.push(['max', row.CHARACTER_MAXIMUM_LENGTH]);
    })
    .on('end', function() {
      fn(null, schema);
    });
}</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
              <section class="method" id="mysql-adapter.Command">
                <h3>
                  mysql-adapter.Command
                </h3>
                <p>Generic command.</p>
                <pre class="js">function Command(adapter, criteria) {
  Stream.call(this);
  // implement `ReadableStream`
  this.readable = true;
  // implement `WritableStream`
  this.writable = true;
  this.adapter = adapter;
  this.criteria = criteria;
  this.conditions = {};
  this.values = [];
  // XXX: only needs to be computed at the beginning
  // (I think? maybe not, may need to go into `execute`)
  this.statement = this.toSQL();

  var self = this;

  this.on('end', function(){
    delete self.adapter; 
  });
}</pre>
              </section>
              
            
              
              
            
              
              
              <section class="method" id="mysql-adapter.pause">
                <h3>
                  mysql-adapter.pause
                </h3>
                <p>Pause.</p>
                <pre class="js">Command.prototype.pause = function(){
  this.connection.pause();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.resume">
                <h3>
                  mysql-adapter.resume
                </h3>
                <p>Resume.</p>
                <pre class="js">Command.prototype.resume = function(){
  this.connection.resume();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.destroy">
                <h3>
                  mysql-adapter.destroy
                </h3>
                <p>Implements methods of a <code>ReadableStream</code></p>
                <pre class="js">Command.prototype.destroy = function(err){
  this.query.end();
};</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.pipe">
                <h3>
                  mysql-adapter.pipe
                </h3>
                <p>Implements methods of a <code>WritableStream</code>.</p>
                <pre class="js">Command.prototype.pipe = function(stream, options){
  // http://stackoverflow.com/questions/12868969/piping-streaming-javascript-objects-in-node-js
  this.on('data', function(data){
    stream.write(data);
  });
};</pre>
              </section>
              
            
              
              
              <section class="method" id="mysql-adapter.write">
                <h3>
                  mysql-adapter.write
                </h3>
                <p>Update the query with the new data.</p>

<p>The <code>data</code> can be the result from a previous query,<br />such as ids to search within.</p>
                <pre class="js">Command.prototype.write = function(data){
  var conditions = this.conditions
    , values = this.values;

  for (var key in conditions) {
    if (data.hasOwnProperty(key)) {
      // XXX: flag &quot;isDirty&quot;?
      values[conditions[key]] = data[key];
    }
  }

  // run once, process.nextTick(this.execute);
}

Command.prototype.execute = function(){
  var self = this;

  // XXX: when this is called multiple times, remove old query and create new.
  // https://github.com/dominictarr/map-reduce/blob/master/index.js
  // https://github.com/darach/eep-js
  this.connection.query(this.statement, this.values)
    .on('end', this.emit.bind(this, 'end'));
    .on('close', this.emit.bind(this, 'close'));
    .on('error', this.emit.bind(this, 'error'));
    .on('row', function(row){
      // pipe interface:
      //  http://loose-bits.com/2012/08/02/nodejs-read-write-streams-pipes.html
      //
      // actually, only emit data when map/reduce succeeds.
      // pick a path through the graph.
      self.emit('data', self.adapter.deserialize(row));
    })
}

Command.prototype.map = Command.prototype.pipe;

Command.prototype.reduce = function(streamOrFn){
  // the reverse?
  stream.pipe(this);
}

// wait for threshold of signals until firing (reduce?)
// relationship node pointing to this command
Command.prototype.collect = function(){
  if (received.posts &amp;&amp; received.comments)
    this.emit('')
}

// relationship node pointing out
Command.prototype.pipe</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="postgres-adapter-module">
          <h2>postgres-adapter</h2>

          <div class="module-content">
          <h3>Properties:</h3>
          
            
            
              
              
            
              
              
            
              
              
              <section class="property" id="postgres-adapter.exports">
                <h3>postgres-adapter.exports</h3>
                <p>Expose <code>PostgresAdapter</code>.</p>
                <pre class="js">module.exports = PostgresAdapter;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            
            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              <section class="method" id="postgres-adapter.init">
                <h3>
                  postgres-adapter.init
                </h3>
                <p>Initialize.</p>
                <pre class="js">PostgresAdapter.prototype.init = function(options){
  // XXX: from options
  var connectionString = 'tcp://postgres:1234@localhost/postgres';
  
  this.client = new pg.Client(connectionString);
}</pre>
              </section>
              
            
              
              
              <section class="method" id="postgres-adapter.connect">
                <h3>
                  postgres-adapter.connect
                </h3>
                <p>Connect to postgres.</p>
                <pre class="js">PostgresAdapter.prototype.connect = function(fn){
  this.client.connect(function(err){
    if (fn) fn(err);
  });
}</pre>
              </section>
              
            
              
              
              <section class="method" id="postgres-adapter.disconnect">
                <h3>
                  postgres-adapter.disconnect
                </h3>
                <p>Disconnect from postgres.</p>
                <pre class="js">PostgresAdapter.prototype.disconnect = function(){
  this.client.end();
}</pre>
              </section>
              
            
              
              
              <section class="method" id="postgres-adapter.execute">
                <h3>
                  postgres-adapter.execute
                </h3>
                <p>Execute query.</p>
                <pre class="js">PostgresAdapter.prototype.execute = function(criteria, fn){
  var queryString = buildQuery(criteria)
    , records = [];

  this.client.query(queryString)
    .on('row', function(row){
      records.push(self.deserialize(row));
    })
    .on('end', function() { 
      fn.call(self, null, records);
    })
}

PostgresAdapter.prototype.deserialize = function(row){
  return row;
}</pre>
              </section>
              
            
              
              
              <section class="method" id="postgres-adapter.buildQuery">
                <h3>
                  postgres-adapter.buildQuery
                </h3>
                <p>Takes a criteria array and returns a squel query.</p>
                <pre class="js">function buildQuery(criteria) {
  var query = squel.select({
      autoQuoteTableNames: true
    , autoQuoteFieldNames: true
  });

  var self = this;

  criteria.forEach(function(clause, i){
    switch (clause[0]) {
      case 'select':
        query.from(clause[1]);
        break;
      case 'where':
        // XXX: sanitize/quote values?
        // XXX: only handles simple cases here, not joins.
        query.where(clause[1] + ' ' + operators[clause[2]] + ' ' + self.typecast(clause[3]));
        break;
      case 'as':
        // user as commenter
        query.field(criteria[i - 1][1], clause[1]);
        break;
      case 'return':
        query.field(clause[1]);
        break;
      case 'order':
        query.order(clause[1]);
        break;
      case 'limit':
        query.limit(clause[1]);
        break;
    }
  });

  return query;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
      </div>
    </div>

  </div>
</div>